//===========================================================================
// 
// Azeroth Grand Prix
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Mon Feb 14 11:27:33 2005
//   Map Author: Blizzard Entertainment
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    // User-defined
    real array              udg_Angle
    unit array              udg_Carts
    integer array           udg_Turning
    integer                 udg_TURNING_LEFT           = 0
    integer                 udg_TURNING_RIGHT          = 0
    integer                 udg_TURNING_NOTURN         = 0
    real array              udg_TurnSpeed
    integer array           udg_Accelerating
    integer                 udg_ACCELERATE_FORWARD     = 0
    integer                 udg_ACCELERATE_BACKWARD    = 0
    integer                 udg_ACCELERATE_COAST       = 0
    real array              udg_Speed
    timer                   udg_DrivingTimer           = null
    real array              udg_ModelAttributes
    integer                 udg_MODEL_NUM              = 0
    integer array           udg_Models
    integer                 udg_PLAYER_MAXNUM          = 0
    integer array           udg_GameGoingStatus
    integer array           udg_PlayerModels
    location array          udg_StartPoints
    integer                 udg_HowManyPicked          = 0
    real                    udg_START_ANGLE            = 0
    integer array           udg_CheckPointStatus
    timer                   udg_GameStartTimer         = null
    integer                 udg_CheckPointsNum         = 0
    boolean                 udg_ItsForDebug            = false
    integer                 udg_LapNumber              = 0
    dialog                  udg_DlgLapNumber           = null
    button array            udg_DlgBtnLaps
    integer                 udg_GAME_PREPARING         = 0
    integer                 udg_GAME_DRIVING           = 0
    integer                 udg_GAME_REPAIRING         = 0
    integer                 udg_GAME_FINISHING         = 0
    integer                 udg_GAME_OVER              = 0
    player                  udg_NPC                    = null
    unit array              udg_PitCrews
    unit array              udg_PitGarages
    integer                 udg_GARAGE_NUM             = 0
    integer                 udg_PITGARAGE_NUM          = 0
    integer                 udg_GAME_LEFT              = 0
    rect array              udg_ProhibitAreas
    integer                 udg_ProhibitAreaNum        = 0
    integer                 udg_TickSlow               = 0
    boolean array           udg_CaughtInTornado
    integer array           udg_CartItemNum
    integer array           udg_PowerUpTypes
    integer                 udg_PowerUpTypeNum         = 0
    string array            udg_PowerUpNames
    timer                   udg_GameTimer              = null
    integer array           udg_UseInvulnerableIndex
    timer array             udg_ThrowTurtleTimer
    real array              udg_ThrowTurtleAngle
    unit array              udg_TurtleThrown
    trigger array           udg_TrapTriggers
    unit array              udg_Traps
    integer                 udg_TrapMax                = 0
    integer array           udg_PlayerColorRed
    integer array           udg_PlayerColorGreen
    integer array           udg_PlayerColorBlue
    multiboard array        udg_mb
    integer                 udg_GAME_PICKING           = 0
    camerasetup array       udg_PickCartCamera
    location array          udg_PickCartPos
    unit array              udg_PickCarts
    timer                   udg_PickCartTimer          = null
    timerdialog             udg_PickCartTimerWnd       = null
    unit array              udg_PickCartCameraUnits
    timer array             udg_PickCartPlayerTimer
    texttag array           udg_PickCartTextTag
    string array            udg_ModelIcons
    timer                   udg_BoardTimer             = null
    real array              udg_TimeUsed
    fogmodifier array       udg_PickCartVisibility
    integer array           udg_BoardPlayerIndexes
    integer                 udg_nIndex                 = 0
    integer                 udg_PowerUpUnitTypeNum     = 0
    integer array           udg_PowerUpUnitTypes
    integer array           udg_CartPowerUps
    integer array           udg_LightningResize
    integer                 udg_LIGHTNINGRESIZE_MAX    = 0
    integer                 udg_FadeMask321            = 0
    timer                   udg_BigGunLoadTimer        = null
    unit array              udg_CartGun
    unit array              udg_PlayerCameraTarget
    integer array           udg_PlayerCameraIndex
    integer array           udg_PlayerBlazeFlag
    location array          udg_CartPrePos
    location array          udg_PlaceCheckPtPos
    integer                 udg_PlaceCheckPtNum        = 0
    real array              udg_PlaceCheckPtDir
    unit array              udg_PlaceCheckPt
    integer array           udg_PlaceChkPtCur
    real array              udg_PlaceChkPtHowFar
    integer array           udg_PlaceChkPtLap
    integer array           udg_PlaceChkPtCurBak
    real array              udg_PlaceChkPtHowFarBak
    integer array           udg_PlaceChkPtLapBak
    boolean array           udg_WarningWrongDir
    integer array           udg_Places
    integer                 udg_PlaceNum               = 0
    boolean array           udg_LostControl
    item array              udg_VulnerableSignal
    boolean array           udg_PitGarageOccupied
    integer array           udg_CartSndPlaying
    integer                 udg_SNDINDEX_COAST         = 0
    integer                 udg_SNDINDEX_NONE          = 0
    sound array             udg_CartSounds
    integer                 udg_SNDINDEX_GOING1        = 0
    integer                 udg_SNDINDEX_GOING3        = 0
    boolean array           udg_Frozen
    player                  udg_HOSTILE                = null
    integer                 udg_SNDINDEX_GOING2        = 0
    integer                 udg_SNDINDEX_BRAKE         = 0
    effect array            udg_FrozenEffect
    integer array           udg_TurtleThrowTickle
    integer array           udg_LostControlTickle
    integer                 udg_PlaceChkPtCross1       = 0
    integer                 udg_PlaceChkPtCross2       = 0
    timer                   udg_MineCartTimer          = null
    integer                 udg_MineCartTimerCount     = 0
    boolean array           udg_NormalCamera
    unit                    udg_VolcanoUnit            = null
    rect array              udg_VolcanoRegion
    location                udg_TempVolcanoPoint       = null
    string array            udg_PlayerColor
    integer array           udg_GunAmmo
    integer                 udg_AMMO_MAX               = 0
    effect array            udg_EffectWrongDir
    integer array           udg_CartAnimIndex
    integer                 udg_ANIM_STAND             = 0
    integer                 udg_ANIM_WALK              = 0
    integer                 udg_ANIM_STANDATTACK       = 0
    integer                 udg_ANIM_WALKATTACK        = 0
    integer                 udg_ANIM_NONE              = 0
    integer array           udg_GunAttackTick
    string array            udg_ModelHonkPath
    integer array           udg_ModelHonkDur
    effect array            udg_EffectInjured
    integer                 udg_TickMedium             = 0
    boolean                 udg_GameOver               = false
    timer                   udg_SheepTimer             = null
    timer                   udg_ShipAttackTimer        = null
    unit array              udg_Ships
    integer                 udg_ANIM_VICTORY           = 0
    unit array              udg_FakePackage
    integer array           udg_PowerUpPickChance
    integer                 udg_nIndexChance           = 0
    texttag array           udg_GameTipTextTag
    string array            udg_ModelDescription
    location array          udg_ShipTargetPoint
    boolean array           udg_AmmoWarning
    sound array             udg_BigGunSound
    trigger array           udg_IceTrunkTrigger
    integer                 udg_IceTrunkTriggerNum     = 0
    unit                    udg_FlareGunA              = null
    unit                    udg_FlareGunB              = null
    location                udg_TempFlarePoint         = null
    boolean                 udg_StopFlares             = false
    sound array             udg_FlareSound
    string array            udg_DriverAnimName
    unit                    udg_ChampionDriver         = null
    string                  udg_ChampionDriverAnim
    sound array             udg_DriverSound
    sound                   udg_ChampionDriverSound    = null
    string                  udg_VictoryString
    string array            udg_AllPowerUpNames
    integer array           udg_BlizzardingFlag
    sound array             udg_BlizzardSound
    boolean array           udg_BlizzardSoundIsPlaying
    integer array           udg_IceTrunkCooldown
    boolean                 udg_SheepFled              = false
    group                   udg_CinematicUnitGrp       = null

    // Generated
    rect                    gg_rct_AssistantArea       = null
    rect                    gg_rct_CrossArea1          = null
    rect                    gg_rct_CrossArea2          = null
    rect                    gg_rct_MineCartStart21     = null
    rect                    gg_rct_MineCartStart11     = null
    rect                    gg_rct_PickCart_1          = null
    rect                    gg_rct_PickCart_2          = null
    rect                    gg_rct_PickCart_3          = null
    rect                    gg_rct_PickCart_4          = null
    rect                    gg_rct_PickCart_5          = null
    rect                    gg_rct_PickCart_6          = null
    rect                    gg_rct_PickCart_7          = null
    rect                    gg_rct_PickCart_8          = null
    rect                    gg_rct_PickingCart         = null
    rect                    gg_rct_PitGarage_1         = null
    rect                    gg_rct_PitGarage_2         = null
    rect                    gg_rct_PitGarage_3         = null
    rect                    gg_rct_PitGarage_4         = null
    rect                    gg_rct_Repairing_Area      = null
    rect                    gg_rct_StartPoint1         = null
    rect                    gg_rct_StartPoint2         = null
    rect                    gg_rct_StartPoint3         = null
    rect                    gg_rct_StartPoint4         = null
    rect                    gg_rct_StartPoint5         = null
    rect                    gg_rct_StartPoint6         = null
    rect                    gg_rct_StartPoint7         = null
    rect                    gg_rct_StartPoint8         = null
    rect                    gg_rct_VisibleRgn          = null
    rect                    gg_rct_Volcano_Death_1     = null
    rect                    gg_rct_Volcano_Death_2     = null
    rect                    gg_rct_Volcano_Death_3     = null
    rect                    gg_rct_Volcano_Death_4     = null
    rect                    gg_rct_Volcano_Death_5     = null
    rect                    gg_rct_Volcano_Death_6     = null
    rect                    gg_rct_Volcano_Death_7     = null
    rect                    gg_rct_VulnerableArea      = null
    rect                    gg_rct_EndCheck            = null
    rect                    gg_rct_SheepMoveTarget     = null
    rect                    gg_rct_SheepArea           = null
    rect                    gg_rct_ShipAttackArea      = null
    rect                    gg_rct_AmbienceWaterfall   = null
    rect                    gg_rct_AmbienceTornado     = null
    rect                    gg_rct_ShipTarget1         = null
    rect                    gg_rct_ShipTarget2         = null
    rect                    gg_rct_MineCartEnd2        = null
    rect                    gg_rct_MineCartEnd1        = null
    rect                    gg_rct_IceTrunkArea        = null
    rect                    gg_rct_Celebration_Flares  = null
    rect                    gg_rct_PlaceArea1          = null
    rect                    gg_rct_PlaceArea2          = null
    rect                    gg_rct_PlaceArea3          = null
    rect                    gg_rct_MineCartStart12     = null
    rect                    gg_rct_MineCartStart22     = null
    rect                    gg_rct_CimematicArea       = null
    rect                    gg_rct_MineCartPath2       = null
    rect                    gg_rct_MineCartPath3       = null
    rect                    gg_rct_MineCartPath4       = null
    rect                    gg_rct_MineCartPath1       = null
    rect                    gg_rct_SheepAreaFake       = null
    camerasetup             gg_cam_EndingA             = null
    camerasetup             gg_cam_EndingB             = null
    camerasetup             gg_cam_EndingC             = null
    camerasetup             gg_cam_GameEndCamera       = null
    sound                   gg_snd_Hint                = null
    sound                   gg_snd_MonsoonLightningHit = null
    string                  gg_snd_War2IntroMusic
    sound                   gg_snd_BuildingDeathLargeHuman = null
    sound                   gg_snd_GyrocopterImpactHit100 = null
    sound                   gg_snd_PeasantCannotBuildThere1 = null
    sound                   gg_snd_FreezingBreathTarget1 = null
    sound                   gg_snd_W3RaceCarGoing1_0   = null
    sound                   gg_snd_W3RaceCarGoing1_1   = null
    sound                   gg_snd_W3RaceCarGoing1_2   = null
    sound                   gg_snd_W3RaceCarGoing1_3   = null
    sound                   gg_snd_W3RaceCarGoing1_4   = null
    sound                   gg_snd_W3RaceCarGoing1_5   = null
    sound                   gg_snd_W3RaceCarGoing1_6   = null
    sound                   gg_snd_W3RaceCarGoing1_7   = null
    sound                   gg_snd_W3RaceCarGoing2_0   = null
    sound                   gg_snd_W3RaceCarGoing2_1   = null
    sound                   gg_snd_W3RaceCarGoing2_2   = null
    sound                   gg_snd_W3RaceCarGoing2_3   = null
    sound                   gg_snd_W3RaceCarGoing2_4   = null
    sound                   gg_snd_W3RaceCarGoing2_5   = null
    sound                   gg_snd_W3RaceCarGoing2_6   = null
    sound                   gg_snd_W3RaceCarGoing2_7   = null
    sound                   gg_snd_W3RaceCarLoop0      = null
    sound                   gg_snd_W3RaceCarLoop1      = null
    sound                   gg_snd_W3RaceCarLoop2      = null
    sound                   gg_snd_W3RaceCarLoop3      = null
    sound                   gg_snd_W3RaceCarLoop4      = null
    sound                   gg_snd_W3RaceCarLoop5      = null
    sound                   gg_snd_W3RaceCarLoop6      = null
    sound                   gg_snd_W3RaceCarLoop7      = null
    sound                   gg_snd_W3RaceCarGoing3_0   = null
    sound                   gg_snd_W3RaceCarGoing3_1   = null
    sound                   gg_snd_W3RaceCarGoing3_2   = null
    sound                   gg_snd_W3RaceCarGoing3_3   = null
    sound                   gg_snd_W3RaceCarGoing3_4   = null
    sound                   gg_snd_W3RaceCarGoing3_5   = null
    sound                   gg_snd_W3RaceCarGoing3_6   = null
    sound                   gg_snd_W3RaceCarGoing3_7   = null
    sound                   gg_snd_AnnouncerOneProcessed = null
    sound                   gg_snd_AnnouncerTwoProcessed = null
    sound                   gg_snd_AnnouncerThreeProcessed = null
    sound                   gg_snd_AnnouncerFinalLap01 = null
    string                  gg_snd_PH1
    string                  gg_snd_Credits
    sound                   gg_snd_AnnouncerGoProcessed = null
    sound                   gg_snd_QuestLog            = null
    sound                   gg_snd_AmbienceWaterfall   = null
    sound                   gg_snd_AmbienceTornado     = null
    sound                   gg_snd_AmbienceEarthquake  = null
    sound                   gg_snd_PError              = null
    sound                   gg_snd_HeroTinkerWhat4     = null
    sound                   gg_snd_GyrocopterImpactHit101 = null
    sound                   gg_snd_GyrocopterImpactHit102 = null
    sound                   gg_snd_GyrocopterImpactHit103 = null
    sound                   gg_snd_GyrocopterImpactHit104 = null
    sound                   gg_snd_GyrocopterImpactHit105 = null
    sound                   gg_snd_GyrocopterImpactHit106 = null
    sound                   gg_snd_GyrocopterImpactHit107 = null
    sound                   gg_snd_UtherReturns        = null
    sound                   gg_snd_VictoryLich         = null
    sound                   gg_snd_VictoryDiablo       = null
    sound                   gg_snd_VictoryDwarf        = null
    sound                   gg_snd_VictoryGrunt        = null
    sound                   gg_snd_FlareTarget2        = null
    sound                   gg_snd_FlareTarget3        = null
    sound                   gg_snd_FlareTarget4        = null
    sound                   gg_snd_W3RaceCrowdCheer    = null
    sound                   gg_snd_BlizzardLoop100     = null
    sound                   gg_snd_BlizzardLoop101     = null
    sound                   gg_snd_BlizzardLoop102     = null
    sound                   gg_snd_BlizzardLoop103     = null
    sound                   gg_snd_BlizzardLoop104     = null
    sound                   gg_snd_BlizzardLoop105     = null
    sound                   gg_snd_BlizzardLoop106     = null
    sound                   gg_snd_BlizzardLoop107     = null
    trigger                 gg_trg_Sound_Functions     = null
    trigger                 gg_trg_Initialization_Functions = null
    trigger                 gg_trg_Init_PowerUps       = null
    trigger                 gg_trg_Init_Place_Check_Points = null
    trigger                 gg_trg_Initialization      = null
    trigger                 gg_trg_Pick_Cart_Functions = null
    trigger                 gg_trg_Start_Picking_Cart  = null
    trigger                 gg_trg_Picking_Cart_Player_Timer = null
    trigger                 gg_trg_Select_Other_Unit_Than_Picking_Cart = null
    trigger                 gg_trg_Deselect_Picking_Cart = null
    trigger                 gg_trg_View_Previous_Cart  = null
    trigger                 gg_trg_View_Next_Cart      = null
    trigger                 gg_trg_Pick_Cart           = null
    trigger                 gg_trg_Game_Start_Functions = null
    trigger                 gg_trg_Prepare_for_Game    = null
    trigger                 gg_trg_Number_of_Laps_Selected = null
    trigger                 gg_trg_Picking_Cart_Timer  = null
    trigger                 gg_trg_Game_Start_Timer    = null
    trigger                 gg_trg_Big_Gun_Timer       = null
    trigger                 gg_trg_Place_Functions     = null
    trigger                 gg_trg_Pass_End_Point      = null
    trigger                 gg_trg_Abilities_Functions = null
    trigger                 gg_trg_Cart_Cast_Spell     = null
    trigger                 gg_trg_Mine_Exploded       = null
    trigger                 gg_trg_Trap_Expired        = null
    trigger                 gg_trg_Throw_Turtle_Timer  = null
    trigger                 gg_trg_PowerUp_Respawn     = null
    trigger                 gg_trg_Sheep_Respawn_1     = null
    trigger                 gg_trg_Sheep_Respawn_2     = null
    trigger                 gg_trg_Snowman_Respawn     = null
    trigger                 gg_trg_Ice_Trunk_Respawn   = null
    trigger                 gg_trg_Ice_Trunk_Flee      = null
    trigger                 gg_trg_Driving_Functions   = null
    trigger                 gg_trg_Move_Cart           = null
    trigger                 gg_trg_Turning_Left        = null
    trigger                 gg_trg_Turning_Left_Released = null
    trigger                 gg_trg_Turning_Right       = null
    trigger                 gg_trg_Turning_Right_Released = null
    trigger                 gg_trg_Acceleration        = null
    trigger                 gg_trg_Acceleration_Released = null
    trigger                 gg_trg_Deceleration        = null
    trigger                 gg_trg_Deceleration_Stop   = null
    trigger                 gg_trg_Sheep_Flee          = null
    trigger                 gg_trg_Ship_Attack         = null
    trigger                 gg_trg_Ship_Start_Attack   = null
    trigger                 gg_trg_Killed              = null
    trigger                 gg_trg_Multi_Board_Functions = null
    trigger                 gg_trg_Create_Board        = null
    trigger                 gg_trg_Refresh_MultiBoard  = null
    trigger                 gg_trg_Select_Cart_Functions = null
    trigger                 gg_trg_Deselect_Cart       = null
    trigger                 gg_trg_Select_something_else = null
    trigger                 gg_trg_Repairing_Functions = null
    trigger                 gg_trg_Enter_Repair_Area   = null
    trigger                 gg_trg_Leave_Repair_Area   = null
    trigger                 gg_trg_Enter_Repair_Spot_1 = null
    trigger                 gg_trg_Enter_Repair_Spot_2 = null
    trigger                 gg_trg_Enter_Repair_Spot_3 = null
    trigger                 gg_trg_Enter_Repair_Spot_4 = null
    trigger                 gg_trg_Player_Left         = null
    trigger                 gg_trg_Cross_Road_Functions = null
    trigger                 gg_trg_Mine_Carts_Timer    = null
    trigger                 gg_trg_Mine_Carts_Region_1 = null
    trigger                 gg_trg_Mine_Carts_Region_2 = null
    trigger                 gg_trg_Mine_Carts_Region_3 = null
    trigger                 gg_trg_Mine_Carts_Region_4 = null
    trigger                 gg_trg_Remove_Mine_Cart_1  = null
    trigger                 gg_trg_Remove_Mine_Cart_2  = null
    trigger                 gg_trg_Hurt_Myself         = null
    trigger                 gg_trg_Create_Item         = null
    trigger                 gg_trg_Size                = null
    trigger                 gg_trg_Spin                = null
    trigger                 gg_trg_Camera              = null
    trigger                 gg_trg_All_Laps_Done       = null
    trigger                 gg_trg_Order_ID            = null
    trigger                 gg_trg_GameOver            = null
    trigger                 gg_trg_Carrion_Swarm       = null
    trigger                 gg_trg_Debug               = null
    trigger                 gg_trg_Periodic_Volcano_Spew = null
    trigger                 gg_trg_Ending_Cinematic_Functions = null
    trigger                 gg_trg_Ending              = null
    trigger                 gg_trg_Ending_Flares       = null
    unit                    gg_unit_n00B_0129          = null
    unit                    gg_unit_n00D_0050          = null
    unit                    gg_unit_n00D_0049          = null
    unit                    gg_unit_o001_0131          = null
    unit                    gg_unit_n00D_0052          = null
    unit                    gg_unit_n00D_0051          = null
    unit                    gg_unit_o000_0224          = null
    unit                    gg_unit_n00B_0099          = null
    unit                    gg_unit_n00B_0014          = null
    unit                    gg_unit_n00B_0015          = null
    unit                    gg_unit_n00B_0016          = null
    unit                    gg_unit_n00B_0017          = null
    unit                    gg_unit_n00B_0018          = null
    unit                    gg_unit_n00B_0019          = null
    unit                    gg_unit_n00B_0020          = null
    unit                    gg_unit_n00B_0021          = null
    unit                    gg_unit_n00B_0022          = null
    unit                    gg_unit_n00B_0023          = null
    unit                    gg_unit_n00B_0024          = null
    unit                    gg_unit_n00B_0025          = null
    unit                    gg_unit_n00B_0026          = null
    unit                    gg_unit_n00B_0043          = null
    unit                    gg_unit_n00B_0027          = null
    unit                    gg_unit_n00B_0028          = null
    unit                    gg_unit_n00B_0029          = null
    unit                    gg_unit_n00B_0030          = null
    unit                    gg_unit_n00B_0032          = null
    unit                    gg_unit_n00B_0033          = null
    unit                    gg_unit_n00B_0040          = null
    unit                    gg_unit_n00B_0054          = null
    unit                    gg_unit_n00B_0055          = null
    unit                    gg_unit_n00B_0057          = null
    unit                    gg_unit_n00B_0058          = null
    unit                    gg_unit_n00B_0083          = null
    unit                    gg_unit_n00B_0086          = null
    unit                    gg_unit_n00B_0087          = null
    unit                    gg_unit_n00B_0094          = null
    unit                    gg_unit_n00B_0095          = null
    unit                    gg_unit_n00B_0130          = null
    unit                    gg_unit_hbsh_0111          = null
    unit                    gg_unit_hbsh_0116          = null
    unit                    gg_unit_n00B_0138          = null
    unit                    gg_unit_opeo_0210          = null
    unit                    gg_unit_earc_0216          = null
    unit                    gg_unit_Hart_0188          = null
    unit                    gg_unit_odoc_0187          = null
    unit                    gg_unit_nhef_0292          = null
    unit                    gg_unit_Hvwd_0141          = null
    unit                    gg_unit_hcth_0191          = null
    unit                    gg_unit_earc_0190          = null
    unit                    gg_unit_earc_0189          = null
    unit                    gg_unit_hsor_0186          = null
    unit                    gg_unit_hmtm_0197          = null
    unit                    gg_unit_hmtm_0196          = null
    unit                    gg_unit_o000_0223          = null
    unit                    gg_unit_o000_0221          = null
    unit                    gg_unit_o000_0222          = null
    destructable            gg_dest_B000_8421          = null
endglobals

function InitGlobals takes nothing returns nothing
    local integer i = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Angle[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Turning[i] = 0
        set i = i + 1
    endloop

    set udg_TURNING_LEFT = -1
    set udg_TURNING_RIGHT = 1
    set udg_TURNING_NOTURN = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_TurnSpeed[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Accelerating[i] = 0
        set i = i + 1
    endloop

    set udg_ACCELERATE_FORWARD = 1
    set udg_ACCELERATE_BACKWARD = -1
    set udg_ACCELERATE_COAST = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Speed[i] = 0
        set i = i + 1
    endloop

    set udg_DrivingTimer = CreateTimer()
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_ModelAttributes[i] = 0
        set i = i + 1
    endloop

    set udg_MODEL_NUM = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_Models[i] = 0
        set i = i + 1
    endloop

    set udg_PLAYER_MAXNUM = 8
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_GameGoingStatus[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlayerModels[i] = -1
        set i = i + 1
    endloop

    set udg_HowManyPicked = 0
    set udg_START_ANGLE = 90.00
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_CheckPointStatus[i] = 0
        set i = i + 1
    endloop

    set udg_GameStartTimer = CreateTimer()
    set udg_CheckPointsNum = 3
    set udg_ItsForDebug = false
    set udg_LapNumber = 1
    set udg_DlgLapNumber = DialogCreate()
    set udg_GAME_PREPARING = 1
    set udg_GAME_DRIVING = 2
    set udg_GAME_REPAIRING = 3
    set udg_GAME_FINISHING = 4
    set udg_GAME_OVER = 5
    set udg_NPC = Player(PLAYER_NEUTRAL_PASSIVE)
    set udg_GARAGE_NUM = 4
    set udg_PITGARAGE_NUM = 4
    set udg_GAME_LEFT = 6
    set udg_ProhibitAreaNum = 0
    set udg_TickSlow = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_CaughtInTornado[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_CartItemNum[i] = 0
        set i = i + 1
    endloop

    set udg_PowerUpTypeNum = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PowerUpNames[i] = ""
        set i = i + 1
    endloop

    set udg_GameTimer = CreateTimer()
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_UseInvulnerableIndex[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_ThrowTurtleTimer[i] = CreateTimer()
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_ThrowTurtleAngle[i] = 0
        set i = i + 1
    endloop

    set udg_TrapMax = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PlayerColorRed[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PlayerColorGreen[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PlayerColorBlue[i] = 0
        set i = i + 1
    endloop

    set udg_GAME_PICKING = 0
    set udg_PickCartTimer = CreateTimer()
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PickCartPlayerTimer[i] = CreateTimer()
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 1)
        set udg_ModelIcons[i] = ""
        set i = i + 1
    endloop

    set udg_BoardTimer = CreateTimer()
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_TimeUsed[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 1)
        set udg_BoardPlayerIndexes[i] = 0
        set i = i + 1
    endloop

    set udg_nIndex = 0
    set udg_PowerUpUnitTypeNum = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_CartPowerUps[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_LightningResize[i] = 0
        set i = i + 1
    endloop

    set udg_LIGHTNINGRESIZE_MAX = 7
    set udg_FadeMask321 = 5
    set udg_BigGunLoadTimer = CreateTimer()
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlayerCameraIndex[i] = 2
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlayerBlazeFlag[i] = 0
        set i = i + 1
    endloop

    set udg_PlaceCheckPtNum = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PlaceCheckPtDir[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtCur[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtHowFar[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtLap[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtCurBak[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtHowFarBak[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlaceChkPtLapBak[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_WarningWrongDir[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Places[i] = -1
        set i = i + 1
    endloop

    set udg_PlaceNum = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_LostControl[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PitGarageOccupied[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_CartSndPlaying[i] = -1
        set i = i + 1
    endloop

    set udg_SNDINDEX_COAST = 0
    set udg_SNDINDEX_NONE = -1
    set udg_SNDINDEX_GOING1 = 1
    set udg_SNDINDEX_GOING3 = 3
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_Frozen[i] = false
        set i = i + 1
    endloop

    set udg_HOSTILE = Player(PLAYER_NEUTRAL_AGGRESSIVE)
    set udg_SNDINDEX_GOING2 = 2
    set udg_SNDINDEX_BRAKE = 4
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_TurtleThrowTickle[i] = 0
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_LostControlTickle[i] = 0
        set i = i + 1
    endloop

    set udg_PlaceChkPtCross1 = -1
    set udg_PlaceChkPtCross2 = -1
    set udg_MineCartTimer = CreateTimer()
    set udg_MineCartTimerCount = 0
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_NormalCamera[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_PlayerColor[i] = ""
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_GunAmmo[i] = 0
        set i = i + 1
    endloop

    set udg_AMMO_MAX = 50
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_CartAnimIndex[i] = -1
        set i = i + 1
    endloop

    set udg_ANIM_STAND = 0
    set udg_ANIM_WALK = 1
    set udg_ANIM_STANDATTACK = 2
    set udg_ANIM_WALKATTACK = 3
    set udg_ANIM_NONE = -1
    set i = 0
    loop
        exitwhen (i > 8)
        set udg_GunAttackTick[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 4)
        set udg_ModelHonkPath[i] = ""
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 4)
        set udg_ModelHonkDur[i] = 0
        set i = i + 1
    endloop

    set udg_TickMedium = 0
    set udg_GameOver = false
    set udg_SheepTimer = CreateTimer()
    set udg_ShipAttackTimer = CreateTimer()
    set udg_ANIM_VICTORY = 4
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_PowerUpPickChance[i] = 0
        set i = i + 1
    endloop

    set udg_nIndexChance = 0
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_ModelDescription[i] = ""
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_AmmoWarning[i] = false
        set i = i + 1
    endloop

    set udg_IceTrunkTriggerNum = 0
    set udg_StopFlares = false
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_DriverAnimName[i] = ""
        set i = i + 1
    endloop

    set udg_ChampionDriverAnim = ""
    set udg_VictoryString = ""
    set i = 0
    loop
        exitwhen (i > 1)
        set udg_AllPowerUpNames[i] = ""
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_BlizzardingFlag[i] = -1
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_BlizzardSoundIsPlaying[i] = false
        set i = i + 1
    endloop

    set i = 0
    loop
        exitwhen (i > 8)
        set udg_IceTrunkCooldown[i] = -1
        set i = i + 1
    endloop

    set udg_SheepFled = false
    set udg_CinematicUnitGrp = CreateGroup()
endfunction

//***************************************************************************
//*
//*  Sounds
//*
//***************************************************************************

function InitSounds takes nothing returns nothing
    set gg_snd_Hint = CreateSound( "Sound\\Interface\\Hint.wav", false, false, false, 10, 10, "" )
    call SetSoundParamsFromLabel( gg_snd_Hint, "Hint" )
    call SetSoundDuration( gg_snd_Hint, 2006 )
    set gg_snd_MonsoonLightningHit = CreateSound( "Abilities\\Spells\\Other\\Monsoon\\MonsoonLightningHit.wav", false, false, true, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_MonsoonLightningHit, "MonsoonBolt" )
    call SetSoundDuration( gg_snd_MonsoonLightningHit, 2415 )
    set gg_snd_War2IntroMusic = "Sound\\Music\\mp3Music\\War2IntroMusic.mp3"
    set gg_snd_BuildingDeathLargeHuman = CreateSound( "Sound\\Buildings\\Death\\BuildingDeathLargeHuman.wav", false, true, true, 10, 10, "DefaultEAXON" )
    call SetSoundParamsFromLabel( gg_snd_BuildingDeathLargeHuman, "DeathHumanLargeBuilding" )
    call SetSoundDuration( gg_snd_BuildingDeathLargeHuman, 3460 )
    set gg_snd_GyrocopterImpactHit100 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit100, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit100, 998 )
    set gg_snd_PeasantCannotBuildThere1 = CreateSound( "Sound\\Interface\\Warning\\Human\\PeasantCannotBuildThere1.wav", false, false, false, 10, 10, "DefaultEAXON" )
    call SetSoundParamsFromLabel( gg_snd_PeasantCannotBuildThere1, "CantPlaceHuman" )
    call SetSoundDuration( gg_snd_PeasantCannotBuildThere1, 952 )
    set gg_snd_FreezingBreathTarget1 = CreateSound( "Abilities\\Spells\\Undead\\FreezingBreath\\FreezingBreathTarget1.wav", false, true, true, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_FreezingBreathTarget1, "FreezingBreath" )
    call SetSoundDuration( gg_snd_FreezingBreathTarget1, 2833 )
    set gg_snd_W3RaceCarGoing1_0 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_0, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_0, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_0, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_0, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_0, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_0, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_0, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_0, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_1 = CreateSound( "war3mapImported\\CarLoop1.wav", false, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_1, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_1, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_1, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_1, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_1, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_1, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_1, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_1, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_2 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_2, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_2, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_2, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_2, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_2, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_2, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_2, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_2, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_3 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_3, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_3, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_3, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_3, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_3, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_3, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_3, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_3, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_4 = CreateSound( "war3mapImported\\CarLoop1.wav", false, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_4, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_4, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_4, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_4, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_4, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_4, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_4, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_4, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_5 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_5, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_5, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_5, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_5, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_5, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_5, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_5, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_5, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_6 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_6, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_6, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_6, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_6, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_6, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_6, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_6, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_6, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing1_7 = CreateSound( "war3mapImported\\CarLoop1.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing1_7, 2359 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing1_7, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing1_7, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing1_7, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing1_7, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing1_7, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing1_7, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing1_7, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_0 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_0, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_0, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_0, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_0, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_0, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_0, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_0, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_0, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_1 = CreateSound( "war3mapImported\\CarLoop2.wav", false, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_1, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_1, 0 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_1, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_1, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_1, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_1, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_1, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_1, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_2 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_2, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_2, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_2, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_2, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_2, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_2, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_2, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_2, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_3 = CreateSound( "war3mapImported\\CarLoop2.wav", false, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_3, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_3, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_3, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_3, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_3, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_3, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_3, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_3, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_4 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_4, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_4, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_4, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_4, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_4, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_4, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_4, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_4, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_5 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_5, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_5, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_5, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_5, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_5, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_5, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_5, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_5, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_6 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_6, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_6, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_6, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_6, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_6, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_6, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_6, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_6, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing2_7 = CreateSound( "war3mapImported\\CarLoop2.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing2_7, 1872 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing2_7, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing2_7, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing2_7, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing2_7, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing2_7, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing2_7, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing2_7, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop0 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop0, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop0, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop0, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop0, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop0, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop0, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop0, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop0, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop1 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop1, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop1, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop1, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop1, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop1, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop1, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop1, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop1, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop2 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop2, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop2, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop2, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop2, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop2, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop2, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop2, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop2, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop3 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop3, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop3, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop3, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop3, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop3, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop3, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop3, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop3, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop4 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop4, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop4, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop4, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop4, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop4, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop4, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop4, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop4, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop5 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop5, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop5, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop5, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop5, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop5, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop5, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop5, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop5, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop6 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop6, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop6, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop6, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop6, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop6, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop6, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop6, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop6, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarLoop7 = CreateSound( "war3mapImported\\W3RaceCarLoop.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarLoop7, 5000 )
    call SetSoundChannel( gg_snd_W3RaceCarLoop7, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarLoop7, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarLoop7, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarLoop7, 750.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarLoop7, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarLoop7, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarLoop7, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_0 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_0, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_0, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_0, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_0, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_0, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_0, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_0, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_0, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_1 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_1, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_1, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_1, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_1, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_1, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_1, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_1, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_1, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_2 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_2, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_2, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_2, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_2, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_2, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_2, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_2, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_2, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_3 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_3, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_3, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_3, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_3, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_3, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_3, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_3, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_3, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_4 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_4, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_4, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_4, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_4, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_4, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_4, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_4, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_4, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_5 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_5, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_5, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_5, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_5, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_5, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_5, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_5, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_5, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_6 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_6, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_6, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_6, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_6, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_6, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_6, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_6, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_6, 0.0, 0.0, 0.0 )
    set gg_snd_W3RaceCarGoing3_7 = CreateSound( "war3mapImported\\CarLoop3.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCarGoing3_7, 1486 )
    call SetSoundChannel( gg_snd_W3RaceCarGoing3_7, 9 )
    call SetSoundVolume( gg_snd_W3RaceCarGoing3_7, 127 )
    call SetSoundPitch( gg_snd_W3RaceCarGoing3_7, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCarGoing3_7, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCarGoing3_7, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCarGoing3_7, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCarGoing3_7, 0.0, 0.0, 0.0 )
    set gg_snd_AnnouncerOneProcessed = CreateSound( "war3mapImported\\AnnouncerOneProcessed.wav", false, false, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_AnnouncerOneProcessed, 1516 )
    call SetSoundChannel( gg_snd_AnnouncerOneProcessed, 0 )
    call SetSoundVolume( gg_snd_AnnouncerOneProcessed, 127 )
    call SetSoundPitch( gg_snd_AnnouncerOneProcessed, 1.0 )
    set gg_snd_AnnouncerTwoProcessed = CreateSound( "war3mapImported\\AnnouncerTwoProcessed.wav", false, false, false, 10, 10, "" )
    call SetSoundDuration( gg_snd_AnnouncerTwoProcessed, 1227 )
    call SetSoundChannel( gg_snd_AnnouncerTwoProcessed, 0 )
    call SetSoundVolume( gg_snd_AnnouncerTwoProcessed, 127 )
    call SetSoundPitch( gg_snd_AnnouncerTwoProcessed, 1.0 )
    set gg_snd_AnnouncerThreeProcessed = CreateSound( "war3mapImported\\AnnouncerThreeProcessed.wav", false, false, false, 10, 10, "" )
    call SetSoundDuration( gg_snd_AnnouncerThreeProcessed, 1461 )
    call SetSoundChannel( gg_snd_AnnouncerThreeProcessed, 0 )
    call SetSoundVolume( gg_snd_AnnouncerThreeProcessed, 127 )
    call SetSoundPitch( gg_snd_AnnouncerThreeProcessed, 1.0 )
    set gg_snd_AnnouncerFinalLap01 = CreateSound( "war3mapImported\\AnnouncerFinalLapProcessed.wav", false, false, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_AnnouncerFinalLap01, 1766 )
    call SetSoundChannel( gg_snd_AnnouncerFinalLap01, 0 )
    call SetSoundVolume( gg_snd_AnnouncerFinalLap01, 127 )
    call SetSoundPitch( gg_snd_AnnouncerFinalLap01, 1.0 )
    set gg_snd_PH1 = "Sound\\Music\\mp3Music\\PH1.mp3"
    set gg_snd_Credits = "Sound\\Music\\mp3Music\\Credits.mp3"
    set gg_snd_AnnouncerGoProcessed = CreateSound( "war3mapImported\\AnnouncerGoProcessed.wav", false, false, false, 10, 10, "" )
    call SetSoundDuration( gg_snd_AnnouncerGoProcessed, 1769 )
    call SetSoundChannel( gg_snd_AnnouncerGoProcessed, 0 )
    call SetSoundVolume( gg_snd_AnnouncerGoProcessed, 127 )
    call SetSoundPitch( gg_snd_AnnouncerGoProcessed, 1.0 )
    set gg_snd_QuestLog = CreateSound( "Sound\\Interface\\QuestLog.wav", false, false, false, 10, 10, "" )
    call SetSoundParamsFromLabel( gg_snd_QuestLog, "QuestUpdate" )
    call SetSoundDuration( gg_snd_QuestLog, 2276 )
    set gg_snd_AmbienceWaterfall = CreateSound( "Sound\\Ambient\\DoodadEffects\\WaterWaterFallLoop1.wav", false, true, true, 10, 10, "DoodadsEAX" )
    call SetSoundParamsFromLabel( gg_snd_AmbienceWaterfall, "WaterfallLoop" )
    call SetSoundDuration( gg_snd_AmbienceWaterfall, 1022 )
    call SetSoundVolume( gg_snd_AmbienceWaterfall, 127 )
    call SetSoundDistances( gg_snd_AmbienceWaterfall, 1500.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_AmbienceWaterfall, 3000.0 )
    set gg_snd_AmbienceTornado = CreateSound( "Abilities\\Spells\\Other\\Tornado\\TornadoLoop.wav", false, true, true, 10, 10, "DoodadsEAX" )
    call SetSoundParamsFromLabel( gg_snd_AmbienceTornado, "TornadoLoop" )
    call SetSoundDuration( gg_snd_AmbienceTornado, 3408 )
    call SetSoundChannel( gg_snd_AmbienceTornado, 10 )
    call SetSoundDistances( gg_snd_AmbienceTornado, 1500.0, 100000.0 )
    call SetSoundDistanceCutoff( gg_snd_AmbienceTornado, 3000.0 )
    set gg_snd_AmbienceEarthquake = CreateSound( "Sound\\Ambient\\DoodadEffects\\Earthquake.wav", false, true, true, 10, 10, "DoodadsEAX" )
    call SetSoundParamsFromLabel( gg_snd_AmbienceEarthquake, "EarthquakeWithRocksLoop" )
    call SetSoundDuration( gg_snd_AmbienceEarthquake, 6000 )
    call SetSoundDistances( gg_snd_AmbienceEarthquake, 1500.0, 5000.0 )
    call SetSoundDistanceCutoff( gg_snd_AmbienceEarthquake, 3000.0 )
    set gg_snd_PError = CreateSound( "war3mapImported\\PError.wav", true, false, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_PError, 819 )
    call SetSoundChannel( gg_snd_PError, 0 )
    call SetSoundVolume( gg_snd_PError, 127 )
    call SetSoundPitch( gg_snd_PError, 1.0 )
    set gg_snd_HeroTinkerWhat4 = CreateSound( "Units\\Creeps\\HeroTinker\\HeroTinkerWhat4.wav", false, false, true, 10, 10, "HeroAcksEAX" )
    call SetSoundParamsFromLabel( gg_snd_HeroTinkerWhat4, "HeroTinkerWhat" )
    call SetSoundDuration( gg_snd_HeroTinkerWhat4, 1435 )
    set gg_snd_GyrocopterImpactHit101 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit101, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit101, 998 )
    set gg_snd_GyrocopterImpactHit102 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit102, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit102, 998 )
    set gg_snd_GyrocopterImpactHit103 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit103, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit103, 998 )
    set gg_snd_GyrocopterImpactHit104 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit104, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit104, 998 )
    set gg_snd_GyrocopterImpactHit105 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit105, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit105, 998 )
    set gg_snd_GyrocopterImpactHit106 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit106, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit106, 998 )
    set gg_snd_GyrocopterImpactHit107 = CreateSound( "Units\\Human\\Gyrocopter\\GyrocopterImpactHit1.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_GyrocopterImpactHit107, "GyrocopterAttack" )
    call SetSoundDuration( gg_snd_GyrocopterImpactHit107, 998 )
    set gg_snd_UtherReturns = CreateSound( "Sound\\Ambient\\DoodadEffects\\UtherReturns.wav", false, false, false, 10, 10, "DefaultEAXON" )
    call SetSoundParamsFromLabel( gg_snd_UtherReturns, "UtherReturnsSound" )
    call SetSoundDuration( gg_snd_UtherReturns, 6711 )
    set gg_snd_VictoryLich = CreateSound( "Units\\Undead\\HeroLich\\HeroLichReady1.wav", false, false, true, 10, 10, "HeroAcksEAX" )
    call SetSoundParamsFromLabel( gg_snd_VictoryLich, "HeroLichReady" )
    call SetSoundDuration( gg_snd_VictoryLich, 3233 )
    set gg_snd_VictoryDiablo = CreateSound( "Units\\Demon\\HeroPitLord\\HPitLordReady1.wav", false, false, true, 10, 10, "HeroAcksEAX" )
    call SetSoundParamsFromLabel( gg_snd_VictoryDiablo, "HeroPitLordReady" )
    call SetSoundDuration( gg_snd_VictoryDiablo, 3019 )
    set gg_snd_VictoryDwarf = CreateSound( "Units\\Human\\Muradin\\MuradinPissed3.wav", false, false, true, 10, 10, "HeroAcksEAX" )
    call SetSoundParamsFromLabel( gg_snd_VictoryDwarf, "MuradinPissed" )
    call SetSoundDuration( gg_snd_VictoryDwarf, 3587 )
    set gg_snd_VictoryGrunt = CreateSound( "Units\\Orc\\Grunt\\GruntYesAttack1.wav", false, false, true, 10, 10, "DefaultEAXON" )
    call SetSoundParamsFromLabel( gg_snd_VictoryGrunt, "GruntYesAttack" )
    call SetSoundDuration( gg_snd_VictoryGrunt, 1251 )
    set gg_snd_FlareTarget2 = CreateSound( "Abilities\\Spells\\Human\\Flare\\FlareTarget2.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_FlareTarget2, "Flare2" )
    call SetSoundDuration( gg_snd_FlareTarget2, 1344 )
    set gg_snd_FlareTarget3 = CreateSound( "Abilities\\Spells\\Human\\Flare\\FlareTarget3.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_FlareTarget3, "Flare3" )
    call SetSoundDuration( gg_snd_FlareTarget3, 946 )
    set gg_snd_FlareTarget4 = CreateSound( "Abilities\\Spells\\Human\\Flare\\FlareTarget4.wav", false, true, true, 10, 10, "MissilesEAX" )
    call SetSoundParamsFromLabel( gg_snd_FlareTarget4, "Flare4" )
    call SetSoundDuration( gg_snd_FlareTarget4, 1000 )
    set gg_snd_W3RaceCrowdCheer = CreateSound( "war3mapImported\\W3RaceCrowdCheer.wav", true, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( gg_snd_W3RaceCrowdCheer, 6569 )
    call SetSoundChannel( gg_snd_W3RaceCrowdCheer, 5 )
    call SetSoundVolume( gg_snd_W3RaceCrowdCheer, 127 )
    call SetSoundPitch( gg_snd_W3RaceCrowdCheer, 1.0 )
    call SetSoundDistances( gg_snd_W3RaceCrowdCheer, 3000.0, 10000.0 )
    call SetSoundDistanceCutoff( gg_snd_W3RaceCrowdCheer, 3000.0 )
    call SetSoundConeAngles( gg_snd_W3RaceCrowdCheer, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( gg_snd_W3RaceCrowdCheer, 0.0, 0.0, 0.0 )
    set gg_snd_BlizzardLoop100 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop100, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop100, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop100, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop100, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop101 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop101, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop101, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop101, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop101, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop102 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop102, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop102, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop102, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop102, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop103 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop103, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop103, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop103, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop103, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop104 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop104, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop104, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop104, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop104, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop105 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop105, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop105, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop105, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop105, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop106 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop106, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop106, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop106, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop106, 1500.0, 100000.0 )
    set gg_snd_BlizzardLoop107 = CreateSound( "Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", true, true, false, 10, 10, "SpellsEAX" )
    call SetSoundParamsFromLabel( gg_snd_BlizzardLoop107, "BlizzardLoop" )
    call SetSoundDuration( gg_snd_BlizzardLoop107, 4000 )
    call SetSoundChannel( gg_snd_BlizzardLoop107, 11 )
    call SetSoundDistances( gg_snd_BlizzardLoop107, 1500.0, 100000.0 )
endfunction

//***************************************************************************
//*
//*  Destructable Objects
//*
//***************************************************************************

function CreateAllDestructables takes nothing returns nothing
    local destructable d
    local trigger t
    local real life
    set gg_dest_B000_8421 = CreateDestructable( 'B000', 2144.0, 3680.0, 90.000, 1.850, 0 )
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateNeutralHostile takes nothing returns nothing
    local player p = Player(PLAYER_NEUTRAL_AGGRESSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u = CreateUnit( p, 'n00F', -11019.2, 8534.3, 14.740 )
    set u = CreateUnit( p, 'n00F', -11932.4, 7049.9, 14.740 )
    set u = CreateUnit( p, 'n00F', -7783.9, 7557.4, 14.740 )
    set u = CreateUnit( p, 'n00F', -8997.7, 9239.2, 14.740 )
    set u = CreateUnit( p, 'n00F', -9480.8, 6755.5, 14.740 )
    set u = CreateUnit( p, 'n00F', -6334.4, 8222.7, 14.740 )
    set gg_unit_hbsh_0111 = CreateUnit( p, 'hbsh', 9764.3, 10948.5, 189.450 )
    set gg_unit_hbsh_0116 = CreateUnit( p, 'hbsh', 9536.1, 9479.1, 205.440 )
    set u = CreateUnit( p, 'n00M', -7206.3, -5739.4, 104.912 )
    set u = CreateUnit( p, 'n00M', -9498.6, -5970.0, 160.262 )
    set u = CreateUnit( p, 'n00M', -4433.4, -7708.6, 253.254 )
    set u = CreateUnit( p, 'n00M', -2837.0, -7224.7, 253.254 )
    set u = CreateUnit( p, 'n00M', -8763.7, -7581.8, 284.917 )
    set u = CreateUnit( p, 'n00M', -5551.3, -5898.3, 233.467 )
    set u = CreateUnit( p, 'n00M', -6785.4, -6833.6, 104.912 )
    set u = CreateUnit( p, 'n00M', -6006.4, -7625.2, 253.254 )
    set gg_unit_o001_0131 = CreateUnit( p, 'o001', -15058.7, -551.3, 119.840 )
    set gg_unit_hsor_0186 = CreateUnit( p, 'hsor', 9163.0, -7766.1, 215.300 )
    call SetUnitState( gg_unit_hsor_0186, UNIT_STATE_MANA, 0 )
endfunction

//===========================================================================
function CreateNeutralPassiveBuildings takes nothing returns nothing
    local player p = Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u = CreateUnit( p, 'n00H', 2304.0, 3584.0, 270.000 )
    set u = CreateUnit( p, 'hbla', -8512.0, 1664.0, 270.000 )
    set u = CreateUnit( p, 'harm', -7296.0, -1536.0, 270.000 )
    set u = CreateUnit( p, 'n00E', 10688.0, -4096.0, 270.000 )
    call SetUnitColor( u, ConvertPlayerColor(0) )
    set u = CreateUnit( p, 'n00E', 10688.0, -2944.0, 270.000 )
    call SetUnitColor( u, ConvertPlayerColor(0) )
    set u = CreateUnit( p, 'n00E', 10688.0, -1792.0, 270.000 )
    call SetUnitColor( u, ConvertPlayerColor(0) )
    set u = CreateUnit( p, 'n00E', 10688.0, -704.0, 270.000 )
    call SetUnitColor( u, ConvertPlayerColor(0) )
    set gg_unit_n00D_0049 = CreateUnit( p, 'n00D', 9984.0, -4096.0, 270.000 )
    set gg_unit_n00D_0050 = CreateUnit( p, 'n00D', 9984.0, -2944.0, 270.000 )
    set gg_unit_n00D_0051 = CreateUnit( p, 'n00D', 9984.0, -1792.0, 270.000 )
    set gg_unit_n00D_0052 = CreateUnit( p, 'n00D', 9984.0, -640.0, 270.000 )
    set u = CreateUnit( p, 'hshy', 10592.0, 3296.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 1984.0, 3392.0, 270.000 )
    set u = CreateUnit( p, 'haro', 8320.0, -2304.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2112.0, 3392.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2112.0, 3520.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2240.0, 3456.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2624.0, 3392.0, 270.000 )
    set u = CreateUnit( p, 'nfrt', 10496.0, 1280.0, 270.000 )
    set u = CreateUnit( p, 'hshy', 8032.0, 10272.0, 270.000 )
    set u = CreateUnit( p, 'hshy', 7968.0, 8160.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2496.0, 3776.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2560.0, 3904.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2624.0, 3776.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2560.0, 3648.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2432.0, 3584.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2496.0, 3456.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2624.0, 3520.0, 270.000 )
    set u = CreateUnit( p, 'nfrt', 8640.0, -7808.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2368.0, 3328.0, 270.000 )
    set u = CreateUnit( p, 'n00H', 2368.0, 3712.0, 270.000 )
    set gg_unit_o000_0221 = CreateUnit( p, 'o000', 10240.0, -640.0, 270.000 )
    set gg_unit_o000_0222 = CreateUnit( p, 'o000', 10240.0, -1792.0, 270.000 )
    set gg_unit_o000_0223 = CreateUnit( p, 'o000', 10240.0, -2944.0, 270.000 )
    set gg_unit_o000_0224 = CreateUnit( p, 'o000', 10240.0, -4096.0, 270.000 )
endfunction

//===========================================================================
function CreateNeutralPassive takes nothing returns nothing
    local player p = Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u = CreateUnit( p, 'n00C', -1562.7, -961.3, 237.609 )
    set u = CreateUnit( p, 'n00C', 5763.7, -5970.7, 100.165 )
    set u = CreateUnit( p, 'n00C', -5179.4, -6969.3, 52.448 )
    set u = CreateUnit( p, 'n00C', -5173.1, -7257.8, 52.448 )
    set u = CreateUnit( p, 'n00C', 2497.9, 243.9, 61.042 )
    set u = CreateUnit( p, 'n00C', -2203.7, 6238.1, 331.039 )
    set u = CreateUnit( p, 'n00C', -1947.7, 6494.1, 331.039 )
    set u = CreateUnit( p, 'n00C', -1927.8, 6204.8, 57.845 )
    set gg_unit_n00B_0014 = CreateUnit( p, 'n00B', -13333.7, -2540.9, 225.000 )
    set gg_unit_n00B_0015 = CreateUnit( p, 'n00B', -14117.9, -3282.1, 270.000 )
    set gg_unit_n00B_0016 = CreateUnit( p, 'n00B', -14118.1, -5623.0, 315.000 )
    set gg_unit_n00B_0017 = CreateUnit( p, 'n00B', -13075.9, -6456.9, 0.000 )
    set gg_unit_n00B_0018 = CreateUnit( p, 'n00B', -35.6, -6490.3, 45.000 )
    set gg_unit_n00B_0019 = CreateUnit( p, 'n00B', 1279.7, -5049.2, 90.000 )
    set gg_unit_n00B_0020 = CreateUnit( p, 'n00B', 1246.2, -509.5, 45.000 )
    set gg_unit_n00B_0021 = CreateUnit( p, 'n00B', 1762.2, 270.0, 0.000 )
    set gg_unit_n00B_0022 = CreateUnit( p, 'n00B', 3157.9, 294.4, 315.000 )
    set gg_unit_n00B_0023 = CreateUnit( p, 'n00B', 4087.1, -854.9, 270.000 )
    set gg_unit_n00B_0024 = CreateUnit( p, 'n00B', 4083.4, -5280.7, 315.000 )
    set gg_unit_n00B_0025 = CreateUnit( p, 'n00B', 4992.9, -6120.2, 0.000 )
    set gg_unit_n00B_0026 = CreateUnit( p, 'n00B', 6325.4, -6120.5, 45.000 )
    set gg_unit_n00B_0027 = CreateUnit( p, 'n00B', 7103.6, -5163.8, 90.000 )
    set gg_unit_n00B_0028 = CreateUnit( p, 'n00B', 6915.1, 4293.6, 90.000 )
    set gg_unit_n00B_0029 = CreateUnit( p, 'n00B', 6875.3, 10920.5, 135.000 )
    set gg_unit_n00B_0030 = CreateUnit( p, 'n00B', 5677.0, 11996.1, 180.000 )
    set gg_unit_n00B_0032 = CreateUnit( p, 'n00B', 3406.5, 11972.6, 225.000 )
    set gg_unit_n00B_0033 = CreateUnit( p, 'n00B', 2280.9, 10839.4, 270.000 )
    set u = CreateUnit( p, 'n00C', -9682.7, 11404.8, 9.921 )
    set u = CreateUnit( p, 'n00C', 5549.6, -6119.3, 4.559 )
    set u = CreateUnit( p, 'n00C', 7316.7, 9668.8, 45.000 )
    set u = CreateUnit( p, 'n00C', -9708.2, 11770.5, 326.963 )
    set u = CreateUnit( p, 'n00C', -1886.7, -981.2, 342.839 )
    set u = CreateUnit( p, 'n00C', -2064.7, -1167.7, 317.822 )
    set gg_unit_n00B_0040 = CreateUnit( p, 'n00B', 2181.3, 4901.9, 225.000 )
    set u = CreateUnit( p, 'n00C', 1909.5, 9194.9, 247.046 )
    set u = CreateUnit( p, 'n00C', -9654.0, 6938.0, 122.117 )
    set gg_unit_n00B_0043 = CreateUnit( p, 'n00B', 1200.4, 3915.3, 180.000 )
    set u = CreateUnit( p, 'n00C', -1693.7, -1192.2, 201.924 )
    set gg_unit_n00B_0054 = CreateUnit( p, 'n00B', 250.8, 3918.3, 135.000 )
    set gg_unit_n00B_0055 = CreateUnit( p, 'n00B', -3388.2, 7466.4, 160.000 )
    set u = CreateUnit( p, 'n00C', -2221.1, -949.8, 132.796 )
    set gg_unit_n00B_0057 = CreateUnit( p, 'n00B', -9126.3, 8406.9, 180.000 )
    set gg_unit_n00B_0058 = CreateUnit( p, 'n00B', -14084.9, 6205.4, 270.000 )
    set u = CreateUnit( p, 'n00C', -2151.8, 5948.8, 57.845 )
    set u = CreateUnit( p, 'n00C', -2395.7, 6014.1, 331.039 )
    set u = CreateUnit( p, 'n00C', -9882.0, 11961.1, 124.973 )
    set u = CreateUnit( p, 'n00C', 5762.5, -6310.7, 142.640 )
    set u = CreateUnit( p, 'n00C', 7161.5, 9463.4, 45.000 )
    set u = CreateUnit( p, 'n00C', 6818.1, 9452.7, 45.000 )
    set u = CreateUnit( p, 'n00C', 6647.6, 9640.8, 45.000 )
    set u = CreateUnit( p, 'n00C', 6987.6, 9657.0, 45.000 )
    set u = CreateUnit( p, 'n00C', 5581.9, -5814.1, 193.739 )
    set u = CreateUnit( p, 'n00C', 5575.3, -6457.7, 308.615 )
    set u = CreateUnit( p, 'n00C', 2243.0, 9147.9, 130.104 )
    set u = CreateUnit( p, 'n00C', -9850.3, 11235.3, 192.124 )
    set u = CreateUnit( p, 'n00C', -14154.6, -4515.8, 27.851 )
    set u = CreateUnit( p, 'n00C', -9882.4, 11605.5, 288.762 )
    set u = CreateUnit( p, 'n00C', -9668.4, 7352.4, 260.867 )
    set u = CreateUnit( p, 'n00C', -9939.8, 7146.7, 142.343 )
    set u = CreateUnit( p, 'n00C', -9932.9, 7575.3, 217.844 )
    set gg_unit_n00B_0083 = CreateUnit( p, 'n00B', -14080.5, 1786.3, 335.000 )
    set u = CreateUnit( p, 'n00C', -8117.8, -7108.1, 12.030 )
    set u = CreateUnit( p, 'n00C', -8116.7, -6823.9, 61.042 )
    set gg_unit_n00B_0086 = CreateUnit( p, 'n00B', -11692.0, 749.6, 0.000 )
    set gg_unit_n00B_0087 = CreateUnit( p, 'n00B', -2762.0, 697.7, 315.000 )
    set u = CreateUnit( p, 'n00C', -13844.3, -4537.8, 192.278 )
    set u = CreateUnit( p, 'n00C', -13994.9, -4735.2, 48.418 )
    set u = CreateUnit( p, 'n00C', -14437.5, -4508.6, 279.874 )
    set u = CreateUnit( p, 'n00C', -14303.7, -4717.6, 167.876 )
    set gg_unit_n00B_0094 = CreateUnit( p, 'n00B', -1896.3, -173.5, 270.000 )
    set gg_unit_n00B_0095 = CreateUnit( p, 'n00B', -1915.9, -1852.6, 225.000 )
    set gg_unit_n00B_0099 = CreateUnit( p, 'n00B', -2794.0, -2477.0, 180.000 )
    set u = CreateUnit( p, 'H00J', -14993.4, -588.7, 2.180 )
    set u = CreateUnit( p, 'hhdl', 2480.5, 3178.9, 234.930 )
    set u = CreateUnit( p, 'hdes', 8549.3, 8815.1, 4.091 )
    set u = CreateUnit( p, 'hbot', 8556.3, 8034.5, 358.848 )
    set u = CreateUnit( p, 'hbot', 8571.3, 7633.7, 4.889 )
    set u = CreateUnit( p, 'hdes', 8563.7, 8336.3, 359.698 )
    set u = CreateUnit( p, 'hbsh', 10718.4, 10199.8, 54.879 )
    set u = CreateUnit( p, 'hdes', 11189.0, 4232.5, 359.698 )
    set u = CreateUnit( p, 'hbot', 11182.4, 3027.5, 4.889 )
    set gg_unit_n00B_0129 = CreateUnit( p, 'n00B', -8474.7, 792.6, 0.000 )
    set gg_unit_n00B_0130 = CreateUnit( p, 'n00B', -7380.3, -2452.4, 180.000 )
    set u = CreateUnit( p, 'n00C', 2531.0, 9211.9, 130.104 )
    set u = CreateUnit( p, 'n00C', 2357.5, 9386.9, 247.046 )
    set u = CreateUnit( p, 'hhdl', 8063.7, 6707.9, 339.959 )
    set u = CreateUnit( p, 'hhdl', 8050.4, 6601.3, 357.870 )
    set u = CreateUnit( p, 'hrdh', 8034.6, 6448.2, 1.676 )
    set u = CreateUnit( p, 'hrdh', 6155.8, -3327.5, 179.998 )
    set gg_unit_n00B_0138 = CreateUnit( p, 'n00B', -13105.5, 7445.1, 225.000 )
    set u = CreateUnit( p, 'n00C', 2069.5, 9386.9, 247.046 )
    set gg_unit_Hvwd_0141 = CreateUnit( p, 'Hvwd', 9290.5, -6800.6, 330.470 )
    set u = CreateUnit( p, 'hpea', 6263.7, 3986.7, 31.032 )
    set u = CreateUnit( p, 'nhem', 6299.5, 4106.6, 23.718 )
    set u = CreateUnit( p, 'nhef', 6283.8, 3841.2, 34.642 )
    set u = CreateUnit( p, 'nhef', 6283.7, 4536.0, 352.820 )
    set u = CreateUnit( p, 'nhef', 6246.6, 4916.2, 333.110 )
    set u = CreateUnit( p, 'nhef', 6231.7, 5213.0, 316.274 )
    set u = CreateUnit( p, 'nhef', 6249.5, 5551.9, 307.679 )
    set u = CreateUnit( p, 'nhef', 7625.4, 5580.5, 181.497 )
    set u = CreateUnit( p, 'nhef', 7648.0, 5286.3, 215.649 )
    set u = CreateUnit( p, 'nhef', 7630.7, 4938.3, 197.298 )
    set u = CreateUnit( p, 'nhef', 7584.2, 4565.0, 183.362 )
    set u = CreateUnit( p, 'nhef', 7648.1, 3812.5, 143.980 )
    set u = CreateUnit( p, 'nhef', 7642.9, 4170.9, 157.482 )
    set u = CreateUnit( p, 'nhem', 6246.0, 4717.6, 343.892 )
    set u = CreateUnit( p, 'nhem', 6247.5, 5394.3, 311.584 )
    set u = CreateUnit( p, 'nhem', 7652.3, 5384.0, 218.951 )
    set u = CreateUnit( p, 'nhem', 7650.4, 4752.2, 191.409 )
    set u = CreateUnit( p, 'nhem', 7642.1, 4000.3, 150.386 )
    set u = CreateUnit( p, 'hpea', 6231.9, 4815.5, 337.759 )
    set u = CreateUnit( p, 'hpea', 6233.7, 4627.0, 348.677 )
    set u = CreateUnit( p, 'hpea', 6252.2, 5314.1, 314.980 )
    set u = CreateUnit( p, 'hpea', 6238.6, 5474.3, 309.732 )
    set u = CreateUnit( p, 'hpea', 7656.4, 5465.5, 220.598 )
    set u = CreateUnit( p, 'hpea', 7629.4, 5177.6, 211.338 )
    set u = CreateUnit( p, 'hpea', 7638.6, 4846.8, 194.136 )
    set u = CreateUnit( p, 'hpea', 7652.8, 4666.6, 186.743 )
    set u = CreateUnit( p, 'hpea', 7646.1, 4081.2, 154.169 )
    set u = CreateUnit( p, 'hpea', 7644.1, 3898.1, 147.882 )
    set u = CreateUnit( p, 'nhef', 6143.7, -3990.0, 330.454 )
    set u = CreateUnit( p, 'hpea', 6155.8, -3896.4, 312.502 )
    set u = CreateUnit( p, 'nhef', 8341.3, -978.2, 143.980 )
    set u = CreateUnit( p, 'hpea', 8249.1, -981.1, 147.882 )
    set u = CreateUnit( p, 'hbsh', 12664.8, 13.3, 206.175 )
    set u = CreateUnit( p, 'hbsh', 12918.5, -5498.2, 287.247 )
    set u = CreateUnit( p, 'hbot', 11431.4, -7654.9, 4.889 )
    set u = CreateUnit( p, 'hdes', 13145.0, -3100.2, 359.698 )
    set u = CreateUnit( p, 'hdes', 12674.5, 6299.3, 242.539 )
    set u = CreateUnit( p, 'nvl2', 9622.7, -6487.7, 292.635 )
    set u = CreateUnit( p, 'ndog', 9529.0, -6607.4, 177.940 )
    set u = CreateUnit( p, 'hfoo', 9207.0, -7347.2, 270.494 )
    set u = CreateUnit( p, 'nhef', 9368.1, -7136.2, 359.009 )
    set u = CreateUnit( p, 'nhem', 9379.2, -7550.0, 352.180 )
    set u = CreateUnit( p, 'hpea', 9440.4, -7395.1, 345.366 )
    set gg_unit_odoc_0187 = CreateUnit( p, 'odoc', 9212.8, -7192.9, 7.144 )
    call SetUnitState( gg_unit_odoc_0187, UNIT_STATE_MANA, 0 )
    set gg_unit_Hart_0188 = CreateUnit( p, 'Hart', 9248.0, -7769.8, 170.970 )
    call SetUnitState( gg_unit_Hart_0188, UNIT_STATE_MANA, 0 )
    set gg_unit_earc_0189 = CreateUnit( p, 'earc', 10475.4, -7389.3, 270.050 )
    set gg_unit_earc_0190 = CreateUnit( p, 'earc', 9569.1, -7770.5, 347.987 )
    set gg_unit_hcth_0191 = CreateUnit( p, 'hcth', 10278.6, -7254.4, 159.393 )
    set u = CreateUnit( p, 'n00L', 652.0, 3139.2, 66.621 )
    set gg_unit_hmtm_0196 = CreateUnit( p, 'hmtm', 11023.0, -6829.5, 220.496 )
    set gg_unit_hmtm_0197 = CreateUnit( p, 'hmtm', 11014.8, -6982.2, 212.632 )
    set u = CreateUnit( p, 'nvl2', 9471.6, -7644.8, 52.083 )
    set u = CreateUnit( p, 'nvil', 9408.5, -6784.2, 310.599 )
    set u = CreateUnit( p, 'nvil', 9733.1, -6504.5, 286.125 )
    set u = CreateUnit( p, 'nvil', 9425.5, -7138.4, 12.482 )
    set u = CreateUnit( p, 'nvlk', 9498.3, -6383.2, 291.234 )
    set u = CreateUnit( p, 'nvlk', 9440.8, -6488.8, 310.612 )
    set u = CreateUnit( p, 'nvk2', 9440.3, -6609.1, 5.705 )
    set u = CreateUnit( p, 'nvk2', 9589.7, -6380.2, 296.029 )
    set gg_unit_opeo_0210 = CreateUnit( p, 'opeo', 9760.0, -7684.8, 72.510 )
    set u = CreateUnit( p, 'n00L', 4430.0, 12712.6, 298.736 )
    set u = CreateUnit( p, 'n00L', 1696.4, 9872.3, 37.332 )
    set gg_unit_earc_0216 = CreateUnit( p, 'earc', 10157.3, -6537.9, 270.050 )
    set u = CreateUnit( p, 'n00L', 1703.8, 6521.0, 42.635 )
    set u = CreateUnit( p, 'n00L', -2335.0, 7215.6, 266.549 )
    set u = CreateUnit( p, 'n00L', -8968.7, 12379.1, 285.461 )
    set u = CreateUnit( p, 'n00L', -13678.9, 10477.6, 343.607 )
    set u = CreateUnit( p, 'n00L', -14696.0, 3941.1, 62.594 )
    set u = CreateUnit( p, 'n00L', -11366.6, 156.6, 103.376 )
    set u = CreateUnit( p, 'n00L', -9001.1, 148.2, 42.635 )
    set u = CreateUnit( p, 'n00L', -9084.9, -1942.3, 331.159 )
    set u = CreateUnit( p, 'n00L', -12090.2, -1942.2, 336.619 )
    set u = CreateUnit( p, 'n00L', -14691.7, -4346.0, 42.635 )
    set u = CreateUnit( p, 'n00L', -12580.3, -7069.8, 131.382 )
    set u = CreateUnit( p, 'n00L', 1055.3, -6181.6, 197.350 )
    set u = CreateUnit( p, 'n00L', 3562.6, -4890.8, 53.789 )
    set u = CreateUnit( p, 'n00L', 5211.7, -6732.8, 143.476 )
    set u = CreateUnit( p, 'n00L', 7761.0, -4153.5, 42.635 )
    set u = CreateUnit( p, 'n00L', 7763.3, -1875.2, 222.806 )
    set u = CreateUnit( p, 'n00L', 7771.4, 292.4, 208.238 )
    set u = CreateUnit( p, 'n00L', 6443.0, -852.6, 42.635 )
    set u = CreateUnit( p, 'n00L', 6418.4, 8527.3, 318.272 )
    set u = CreateUnit( p, 'n00L', 6444.1, 1615.4, 313.929 )
    set u = CreateUnit( p, 'n00L', -279.4, -5925.2, 212.069 )
    set u = CreateUnit( p, 'n00L', -12147.3, -5929.9, 312.464 )
    set u = CreateUnit( p, 'n00L', -10410.7, -3053.1, 15.841 )
    set u = CreateUnit( p, 'n00L', -5020.5, -3045.7, 15.640 )
    set u = CreateUnit( p, 'n00L', -1386.0, -828.1, 160.631 )
    set u = CreateUnit( p, 'n00L', -1416.7, 4688.1, 331.682 )
    set u = CreateUnit( p, 'nvk2', 8961.1, -7783.4, 213.996 )
    set gg_unit_nhef_0292 = CreateUnit( p, 'nhef', 8899.5, -7698.5, 239.718 )
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreateNeutralPassiveBuildings(  )
    call CreatePlayerBuildings(  )
    call CreateNeutralHostile(  )
    call CreateNeutralPassive(  )
    call CreatePlayerUnits(  )
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_AssistantArea = Rect( 11328.0, -9728.0, 12224.0, -8960.0 )
    set gg_rct_CrossArea1 = Rect( -8352.0, -960.0, -7520.0, 96.0 )
    set gg_rct_CrossArea2 = Rect( -8352.0, -1920.0, -7520.0, -928.0 )
    set gg_rct_MineCartStart21 = Rect( -8160.0, -3200.0, -8032.0, -3072.0 )
    set gg_rct_MineCartStart11 = Rect( -7712.0, 1952.0, -7584.0, 2080.0 )
    set gg_rct_PickCart_1 = Rect( -16928.0, -9152.0, -16832.0, -9056.0 )
    set gg_rct_PickCart_2 = Rect( -16128.0, -9152.0, -16032.0, -9056.0 )
    set gg_rct_PickCart_3 = Rect( -15296.0, -9152.0, -15200.0, -9056.0 )
    set gg_rct_PickCart_4 = Rect( -14464.0, -9152.0, -14368.0, -9056.0 )
    set gg_rct_PickCart_5 = Rect( -13600.0, -9152.0, -13504.0, -9056.0 )
    set gg_rct_PickCart_6 = Rect( -12768.0, -9152.0, -12672.0, -9056.0 )
    set gg_rct_PickCart_7 = Rect( -11936.0, -9152.0, -11840.0, -9056.0 )
    set gg_rct_PickCart_8 = Rect( 9280.0, -9152.0, 9376.0, -9056.0 )
    set gg_rct_PickingCart = Rect( 6272.0, -9664.0, 6656.0, -8928.0 )
    set gg_rct_PitGarage_1 = Rect( 9792.0, -4352.0, 10208.0, -3840.0 )
    set gg_rct_PitGarage_2 = Rect( 9792.0, -3200.0, 10208.0, -2688.0 )
    set gg_rct_PitGarage_3 = Rect( 9792.0, -2048.0, 10208.0, -1536.0 )
    set gg_rct_PitGarage_4 = Rect( 9792.0, -896.0, 10208.0, -384.0 )
    set gg_rct_Repairing_Area = Rect( 9792.0, -4448.0, 11744.0, -96.0 )
    set gg_rct_StartPoint1 = Rect( 6592.0, 3968.0, 6784.0, 4096.0 )
    set gg_rct_StartPoint2 = Rect( 7008.0, 3968.0, 7200.0, 4096.0 )
    set gg_rct_StartPoint3 = Rect( 6592.0, 3584.0, 6784.0, 3712.0 )
    set gg_rct_StartPoint4 = Rect( 7008.0, 3584.0, 7200.0, 3712.0 )
    set gg_rct_StartPoint5 = Rect( 6592.0, 3200.0, 6784.0, 3328.0 )
    set gg_rct_StartPoint6 = Rect( 7008.0, 3200.0, 7200.0, 3328.0 )
    set gg_rct_StartPoint7 = Rect( 6592.0, 2816.0, 6784.0, 2944.0 )
    set gg_rct_StartPoint8 = Rect( 7008.0, 2816.0, 7200.0, 2944.0 )
    set gg_rct_VisibleRgn = Rect( -18336.0, -8896.0, 13568.0, 14048.0 )
    set gg_rct_Volcano_Death_1 = Rect( -14752.0, 1280.0, -13696.0, 3328.0 )
    call SetSoundPosition( gg_snd_AmbienceEarthquake, -14224.0, 2304.0, 553.5 )
    call RegisterStackedSound( gg_snd_AmbienceEarthquake, true, 1056.0, 2048.0 )
    set gg_rct_Volcano_Death_2 = Rect( -14176.0, 896.0, -13696.0, 1280.0 )
    set gg_rct_Volcano_Death_3 = Rect( -13696.0, 1440.0, -13216.0, 1920.0 )
    set gg_rct_Volcano_Death_4 = Rect( -13696.0, 288.0, -11552.0, 1440.0 )
    call SetSoundPosition( gg_snd_AmbienceEarthquake, -12624.0, 864.0, 375.6 )
    call RegisterStackedSound( gg_snd_AmbienceEarthquake, true, 2144.0, 1152.0 )
    set gg_rct_Volcano_Death_5 = Rect( -13600.0, -3072.0, -11456.0, -1952.0 )
    call SetSoundPosition( gg_snd_AmbienceEarthquake, -12528.0, -2512.0, 252.8 )
    call RegisterStackedSound( gg_snd_AmbienceEarthquake, true, 2144.0, 1120.0 )
    set gg_rct_Volcano_Death_6 = Rect( -14656.0, -4608.0, -13600.0, -2848.0 )
    call SetSoundPosition( gg_snd_AmbienceEarthquake, -14128.0, -3728.0, 257.6 )
    call RegisterStackedSound( gg_snd_AmbienceEarthquake, true, 1056.0, 1760.0 )
    set gg_rct_Volcano_Death_7 = Rect( -14240.0, -2848.0, -13600.0, -2176.0 )
    set gg_rct_VulnerableArea = Rect( 6784.0, -9664.0, 7520.0, -8928.0 )
    set gg_rct_EndCheck = Rect( 6240.0, 4288.0, 7648.0, 4832.0 )
    set gg_rct_SheepMoveTarget = Rect( 3104.0, 11328.0, 5696.0, 12608.0 )
    set gg_rct_SheepArea = Rect( 1920.0, 3680.0, 2144.0, 3904.0 )
    set gg_rct_ShipAttackArea = Rect( 6208.0, 7520.0, 7680.0, 11264.0 )
    set gg_rct_AmbienceWaterfall = Rect( 960.0, -992.0, 4288.0, 1120.0 )
    call SetSoundPosition( gg_snd_AmbienceWaterfall, 2624.0, 64.0, 252.8 )
    call RegisterStackedSound( gg_snd_AmbienceWaterfall, true, 3328.0, 2112.0 )
    set gg_rct_AmbienceTornado = Rect( -13568.0, 5568.0, -5408.0, 10304.0 )
    call SetSoundPosition( gg_snd_AmbienceTornado, -9488.0, 7936.0, 734.1 )
    call RegisterStackedSound( gg_snd_AmbienceTornado, true, 8160.0, 4736.0 )
    set gg_rct_ShipTarget1 = Rect( 8544.0, 10528.0, 8672.0, 10656.0 )
    set gg_rct_ShipTarget2 = Rect( 8320.0, 9184.0, 8448.0, 9312.0 )
    set gg_rct_MineCartEnd2 = Rect( -8352.0, 1792.0, -7520.0, 2176.0 )
    set gg_rct_MineCartEnd1 = Rect( -8320.0, -3328.0, -7552.0, -3008.0 )
    set gg_rct_IceTrunkArea = Rect( -10432.0, -8736.0, -1824.0, -5088.0 )
    call SetSoundPosition( gg_snd_AmbienceWaterfall, -6128.0, -6912.0, 252.8 )
    call RegisterStackedSound( gg_snd_AmbienceWaterfall, true, 8608.0, 3648.0 )
    set gg_rct_Celebration_Flares = Rect( 9088.0, -7872.0, 10464.0, -7072.0 )
    set gg_rct_PlaceArea1 = Rect( 9856.0, -7040.0, 9984.0, -6912.0 )
    set gg_rct_PlaceArea2 = Rect( 9728.0, -7296.0, 9856.0, -7168.0 )
    set gg_rct_PlaceArea3 = Rect( 10016.0, -7328.0, 10144.0, -7200.0 )
    set gg_rct_MineCartStart12 = Rect( -8000.0, 1920.0, -7872.0, 2048.0 )
    set gg_rct_MineCartStart22 = Rect( -7840.0, -3200.0, -7712.0, -3072.0 )
    set gg_rct_CimematicArea = Rect( 8384.0, -8416.0, 11264.0, -5824.0 )
    set gg_rct_MineCartPath2 = Rect( -8256.0, -1376.0, -7616.0, -1088.0 )
    set gg_rct_MineCartPath3 = Rect( -8256.0, -416.0, -7616.0, -128.0 )
    set gg_rct_MineCartPath4 = Rect( -8256.0, 544.0, -7616.0, 832.0 )
    set gg_rct_MineCartPath1 = Rect( -8256.0, -2336.0, -7616.0, -2048.0 )
    set gg_rct_SheepAreaFake = Rect( 1888.0, 3232.0, 2720.0, 4000.0 )
endfunction

//***************************************************************************
//*
//*  Cameras
//*
//***************************************************************************

function CreateCameras takes nothing returns nothing

    set gg_cam_EndingA = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_ROTATION, 100.8, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_ANGLE_OF_ATTACK, 334.5, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_TARGET_DISTANCE, 1699.5, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingA, CAMERA_FIELD_FARZ, 10000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_EndingA, 9076.9, -7265.3, 0.0 )

    set gg_cam_EndingB = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_ROTATION, 100.8, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_ANGLE_OF_ATTACK, 334.5, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_TARGET_DISTANCE, 1699.5, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingB, CAMERA_FIELD_FARZ, 10000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_EndingB, 9786.5, -6587.9, 0.0 )

    set gg_cam_EndingC = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_ROTATION, 100.8, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_ANGLE_OF_ATTACK, 339.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_TARGET_DISTANCE, 1419.5, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_EndingC, CAMERA_FIELD_FARZ, 10000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_EndingC, 9764.4, -6172.2, 0.0 )

    set gg_cam_GameEndCamera = CreateCameraSetup(  )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_ZOFFSET, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_ROTATION, 90.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_ANGLE_OF_ATTACK, 304.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_TARGET_DISTANCE, 1650.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_ROLL, 0.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0 )
    call CameraSetupSetField( gg_cam_GameEndCamera, CAMERA_FIELD_FARZ, 5000.0, 0.0 )
    call CameraSetupSetDestPosition( gg_cam_GameEndCamera, 6913.2, 4486.2, 0.0 )

endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
function IsPlayerEnemyCR takes player pPlayer1, player pPlayer2 returns boolean
    return pPlayer1 != pPlayer2
endfunction

function PlaySoundPlayer takes player pPlayer, sound soundHandle returns nothing
    if ( GetLocalPlayer() == pPlayer ) then
        call PlaySoundBJ(soundHandle)
    endif
endfunction

function StopSoundPlayer takes player pPlayer, sound soundHandle, boolean bFadeOut returns nothing
    if ( GetLocalPlayer() == pPlayer ) then
        call StopSound(soundHandle, false, bFadeOut)
    endif
endfunction

function StandardAngle takes real rAngle returns real
    loop
        if ( rAngle < -180 ) then
            set rAngle = rAngle + 360
        elseif ( rAngle > 180 ) then
            set rAngle = rAngle - 360
        else
            exitwhen true
        endif
    endloop

    return rAngle
endfunction

function ShowDebugMsg takes string fp_strMsg returns nothing
    if (udg_ItsForDebug) then
        call DisplayTextToForce( GetPlayersAll(), fp_strMsg )
    endif
endfunction

function ShowDisplayOrderID takes nothing returns nothing
    call ShowDebugMsg( I2S(GetIssuedOrderIdBJ()) )
endfunction

function ShowQuestMsg takes string fp_strTitle, string fp_strMsg returns nothing
    call QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "\r|cffffcc00REQUIRED QUEST|r\n" + StringCase(fp_strTitle, true) + "\n" + fp_strMsg )
endfunction

function ShowQuestHintMsg takes string fp_strMsg returns nothing
    call PlaySoundBJ( gg_snd_Hint )
    call QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "\r|cffffcc00HINT|r - " + fp_strMsg )
endfunction

function ShowTipMsg takes string fp_strMsg returns nothing
    call PlaySoundBJ( gg_snd_Hint )
    call QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "\r|cff00ff00TIP|r - " + fp_strMsg )
endfunction

function ShowTipMsgPlayer takes player fp_Player, string fp_strMsg returns nothing
    call DisplayTextToPlayer( fp_Player, 0, 0, "\r|cff00ff00TIP|r - " + fp_strMsg )
endfunction

function ShowWarningMsg takes player fp_Player, string fp_strMsg returns nothing
    call DisplayTextToPlayer ( fp_Player, 0, 0, "\r|cffff0000WARNING|r - " + fp_strMsg )
endfunction

function ShowGeneralMsg takes string fp_strMsg, boolean fp_snd returns nothing
    if (fp_snd) then
        call PlaySoundBJ( gg_snd_Hint )
    endif
    call QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "\r|cffffcc00" + StringCase(fp_strMsg, true) + "|r")
endfunction

function ShowDrivingMsgPlayer takes player plPlayer, string strMsg returns nothing
    call DisplayTextToPlayer ( plPlayer, 0, 0, "\r|cffffcc00" + strMsg + "|r" )
endfunction

function ShowPowerUpMsgPlayer takes player plPlayer, string strMsg returns nothing
    call DisplayTextToPlayer ( plPlayer, 0, 0, "\r|cccffff00" + strMsg + "|r" )
endfunction

function GetPlayerNameWithColor takes integer nPlayerIndex returns string
    return udg_PlayerColor[nPlayerIndex] + GetPlayerName(Player(nPlayerIndex)) + "|r"
endfunction

function ShowHitMsg takes player fp_PlayerHit, integer nPlayerIndexHitter, string fp_strMsg returns nothing
    call PlaySoundPlayer( fp_PlayerHit, gg_snd_QuestLog )
    call ShowWarningMsg( fp_PlayerHit, "You got hit by " + GetPlayerNameWithColor( nPlayerIndexHitter ) + "'s " + fp_strMsg + "!" )
endfunction

function GetPlayerIndex takes player plPlayer returns integer
    local integer nIndex = 0

    loop
        exitwhen nIndex > udg_PLAYER_MAXNUM

        if ( plPlayer == Player(nIndex) ) then
            return nIndex
        endif

        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function GetModelAddress takes integer nModel returns integer
    return nModel * 12
endfunction

function GetModelUnitType takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 0]
endfunction

function GetModelIndex takes integer nUnitType returns integer
    local integer nIndex = 0
    loop
        exitwhen nIndex >= udg_MODEL_NUM

        if ( nUnitType == GetModelUnitType(nIndex) ) then
            return nIndex
        endif

        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function GetModelPickUnitType takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 1]
endfunction

function GetModelFlyUnitType takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 2]
endfunction

function GetModelHonk takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 3]
endfunction

function GetModelAnimStandID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 4]
endfunction

function GetModelAnimWalkID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 5]
endfunction

function GetModelAnimStandAttackID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 6]
endfunction

function GetModelAnimWalkAttackID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 7]
endfunction

function GetModelAnimVictoryID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 8]
endfunction

function GetModelDriverUnitType takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 9]
endfunction

function GetModelDriverAnimID takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 10]
endfunction

function GetModelDriverSound takes integer nModel returns integer
    return udg_Models[GetModelAddress(nModel) + 11]
endfunction

function GetModelAttributesAddress takes integer nModel returns integer
    return nModel * 4
endfunction

function GetModelMaxSpeed takes integer nModel returns real
    return udg_ModelAttributes[GetModelAttributesAddress(nModel) + 0]
endfunction

function GetModelTurnRate takes integer nModel returns real
    return udg_ModelAttributes[GetModelAttributesAddress(nModel) + 1]
endfunction

function GetModelAcceRate takes integer nModel returns real
    return udg_ModelAttributes[GetModelAttributesAddress(nModel) + 2]
endfunction

function GetModelMassDrag takes integer nModel returns real
    return udg_ModelAttributes[GetModelAttributesAddress(nModel) + 3]
endfunction

function GetPowerUpTypeAddress takes integer nIndex returns integer
    return nIndex * 4
endfunction

function GetPowerUpType takes integer nIndex, integer nSlot returns integer
    return udg_PowerUpTypes[GetPowerUpTypeAddress(nIndex) + nSlot]
endfunction

function GetPowerUpTypeIndex takes integer nType returns integer
    local integer nIndex = 0
    local integer nSlot = 0
    loop
        exitwhen nIndex >= udg_PowerUpTypeNum
        set nSlot = 0
        loop
            exitwhen nSlot >= 4
            if ( GetPowerUpType( nIndex, nSlot ) == nType ) then
                return nIndex
            endif
            set nSlot = nSlot + 1
        endloop
        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function GetPowerUpTypeSlot takes integer nType returns integer
    local integer nIndex = 0
    local integer nSlot = 0
    loop
        exitwhen nIndex >= udg_PowerUpTypeNum
        set nSlot = 0
        loop
            exitwhen nSlot >= 4
            if ( GetPowerUpType( nIndex, nSlot ) == nType ) then
                return nSlot
            endif
            set nSlot = nSlot + 1
        endloop
        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function IsItACart takes integer nUnitId returns boolean
    local integer nLoopId = 0

    loop
        exitwhen nLoopId >= udg_MODEL_NUM

        if ( GetModelUnitType( nLoopId ) == nUnitId ) then
            return true
        endif

        set nLoopId = nLoopId + 1
    endloop

    return false
endfunction

function GetPickModelIndex takes integer nUnitType returns integer
    local integer nIndex = 0
    loop
        exitwhen nIndex >= udg_MODEL_NUM

        if ( nUnitType == GetModelPickUnitType(nIndex) ) then
            return nIndex
        endif

        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function GetCurrentPlayerNum takes nothing returns integer
    local integer nPlayerIndex = 0
    local integer nNum = 0

    loop
        exitwhen nPlayerIndex >= 8

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            set nNum = nNum + 1
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop

    return nNum
endfunction

function RealSpeed takes real rSpeed returns real
    return rSpeed / 3
endfunction

function FakeSpeed takes real rSpeed returns real
    return rSpeed * 3
endfunction

function IsCartVisible takes unit uCart returns boolean
    return not UnitHasBuffBJ( uCart, 'Binv' ) and not UnitHasBuffBJ( uCart, 'B003' )
endfunction

function IsCartSpinning takes unit uCart returns boolean
    return UnitHasBuffBJ( uCart, 'B000' )
endfunction

function IsCartTrapped takes unit uCart returns boolean
    return UnitHasBuffBJ( uCart, 'Beng' )
endfunction

function IsCartStunned takes unit uCart returns boolean
    return UnitHasBuffBJ( uCart, 'BPSE' )
endfunction

function IsCartLightened takes unit uCart returns boolean
    return UnitHasBuffBJ( uCart, 'B004' )
endfunction

function SetCartInvulnerable takes unit uCart, boolean b returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if ( nPlayerIndex < 0 ) then
        return
    endif

    call SetUnitInvulnerable( uCart, b )
    call SetItemInvulnerable( udg_VulnerableSignal[nPlayerIndex], b )
endfunction

function IsCartVulnerable takes unit uCart returns boolean
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local boolean b = false
    if ( nPlayerIndex < 0 ) then
        return false
    endif

    set b = not UnitHasBuffBJ( uCart, 'Bvul' ) and not UnitHasBuffBJ( uCart, 'B005' )
    set b = b and not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Btsp' )    //Tonado
    set b = b and not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'B007' )    //Frozen

    return b and not IsItemInvulnerable( udg_VulnerableSignal[nPlayerIndex] )
endfunction

function Integer2String2 takes integer n returns string
    local integer n1 = 0
    local integer n2 = 0

    if ( n > 99 ) then
        set n = ModuloInteger( n, 100 )
    endif

    set n1 = n / 10
    set n2 = n - n1 * 10

    return I2S(n1) + I2S(n2)
endfunction

function Second2String takes integer nSeconds, boolean bHour returns string
    local string str = null
    if ( bHour ) then
        set str = Integer2String2( nSeconds / 3600 ) + ":"
    else
        set str = ""
    endif
    set nSeconds = ModuloInteger( nSeconds, 3600 )
    set str = str + Integer2String2( nSeconds / 60 )
    set nSeconds = ModuloInteger( nSeconds, 60 )
    set str = str + ":" + Integer2String2( nSeconds )

    return str    
endfunction


//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Sound Functions
//===========================================================================
function CreateHonkSound takes integer nIndex returns sound
    local string strPath = udg_ModelHonkPath[nIndex]
    local sound snd = CreateSound( strPath, false, true, false, 10, 10, "DefaultEAXON" )
    call SetSoundDuration( snd, udg_ModelHonkDur[nIndex] )
    call SetSoundChannel( snd, 0 )
    call SetSoundVolume( snd, 127 )
    call SetSoundPitch( snd, 1.0 )
    call SetSoundDistances( snd, 1000.0, 10000.0 )
    call SetSoundDistanceCutoff( snd, 3000.0 )
    call SetSoundConeAngles( snd, 0.0, 0.0, 127 )
    call SetSoundConeOrientation( snd, 0.0, 0.0, 0.0 )
    return snd
endfunction

function GetCartSoundIndex takes integer nPlayerIndex, integer nSound returns integer
    return nSound * udg_PLAYER_MAXNUM + nPlayerIndex
endfunction

function GetCartSound takes integer nPlayerIndex, integer nSound returns sound
    return udg_CartSounds[GetCartSoundIndex(nPlayerIndex, nSound)]
endfunction

function SetCartSound takes integer nPlayerIndex, integer nSound, sound sndCart returns nothing
    set udg_CartSounds[GetCartSoundIndex(nPlayerIndex, nSound)] = sndCart
endfunction

function ChangeCartSound takes integer nPlayerIndex, integer nSound returns nothing
    if ( udg_CartSndPlaying[nPlayerIndex] == nSound ) then
        return
    endif

    if ( udg_CartSndPlaying[nPlayerIndex] != udg_SNDINDEX_NONE ) then
        call StopSoundBJ( GetCartSound( nPlayerIndex, udg_CartSndPlaying[nPlayerIndex] ), true )
    endif

    set udg_CartSndPlaying[nPlayerIndex] = nSound
    if ( nSound != udg_SNDINDEX_NONE ) then
        call PlaySoundOnUnitBJ( GetCartSound( nPlayerIndex, udg_CartSndPlaying[nPlayerIndex] ), 100, udg_Carts[nPlayerIndex] )
    endif
endfunction

//===========================================================================
function InitTrig_Sound_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Initialization Functions
//
// MODEL ATTRIBUTES INDEX
// 0 - UnitType
// 1 - PickUnitType
// 2 - FlyUnitType
// 3 - Honk
// 4 - AnimStand
// 5 - AnimWalk
// 6 - AnimStandAttack
// 7 - AnimWalkAttack
// 8 - AnimVictory
// 9 - Driver
// 10-Driver Animation
// 11-Driver Sound
//===========================================================================

function InitializePlayer takes nothing returns nothing
    local integer nPlayerIndex = 0

    loop
        exitwhen nPlayerIndex >= 8

        call SetPlayerAbilityAvailable( Player(nPlayerIndex), 'A01V', false )

        set nPlayerIndex = nPlayerIndex + 1         
    endloop

    set nPlayerIndex = 0
    set udg_PlaceNum = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM
        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            set udg_Places[udg_PlaceNum] = nPlayerIndex
            set udg_PlaceNum = udg_PlaceNum + 1
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM
        set udg_VulnerableSignal[nPlayerIndex] = CreateItem( 'I000', GetRectCenterX(gg_rct_VulnerableArea), GetRectCenterY(gg_rct_VulnerableArea) )
        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function InitializeModelArray takes nothing returns nothing
    local integer nIndex = 0
    local integer nIndex1 = 0
    set udg_MODEL_NUM = 0

    set udg_DriverAnimName[0] = "Spell Slam"
    set udg_DriverAnimName[1] = "Stand - 3"
    set udg_DriverAnimName[2] = "Stand Victory"
    set udg_DriverAnimName[3] = "Spell"
    set udg_DriverAnimName[4] = "Stand Alternate"

    set udg_DriverSound[0] = gg_snd_VictoryDiablo
    set udg_DriverSound[1] = gg_snd_VictoryGrunt
    set udg_DriverSound[2] = gg_snd_VictoryLich
    set udg_DriverSound[3] = gg_snd_VictoryDwarf

    //Diablo
    set udg_Models[nIndex1] = 'h000'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00B'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00H'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 5
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00P'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 4
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNDiabloCar.blp"
    set udg_ModelDescription[udg_MODEL_NUM] = "Moderate Acceleration, Good Top Speed, Moderate HP\r\rDiablo, Lord of Terror, was excited upon hearing about the Azeroth Grand Prix and wanted something fast and durable. Void dragons were too annoying to deal with, so he turned his attention to the sentinel infernal contraptions."

    set udg_ModelAttributes[nIndex] = 205.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 6.8
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

    //Orc
    set udg_Models[nIndex1] = 'h002'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h001'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00C'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 5
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00O'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 4
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNOrcCar.blp"
    set udg_ModelDescription[udg_MODEL_NUM] = "Good Acceleration, Moderate Top Speed, Good HP\r\rThe Horde possess brutish endurance on the battlefield as well as on the racing track. Chief Engineer Gazlowe stuck the engine of a goblin shredder into a motorcycle molded from pillaged dwarven steel to create this well balanced machine."

    set udg_ModelAttributes[nIndex] = 200.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 7.2
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

    //Undead
    set udg_Models[nIndex1] = 'h004'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h007'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00F'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 5
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00N'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 4
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNUndeadCar.blp"
    set udg_ModelDescription[udg_MODEL_NUM] = "Poor Acceleration, Excellent Top Speed, Poor HP\r\rHailing from the icy realms of Northend, Ner’zhul’s champion biker “Swifticle” commands both acceleration and top speed. Racers that underestimate its frail-looking chasis are left in the chilly dust."

    set udg_ModelAttributes[nIndex] = 210.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 6.5
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

    //Dwarf
    set udg_Models[nIndex1] = 'h008'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h009'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00G'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 4
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00M'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 4
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNDwarfCar.blp"
    set udg_ModelDescription[udg_MODEL_NUM] = "Excellent Acceleration, Poor Top Speed, Excellent HP\r\rDwarven know-how and gnome expertise combined to produce this powerful mobile racing tank which can withstand the most extreme temperatures. Unfortunately, the weight of its thick mithril layers left it a little lacking in the top speed category. Gnomish engineering at its finest."

    set udg_ModelAttributes[nIndex] = 195.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 7.5
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

    return

    //Night Elf
    set udg_Models[nIndex1] = 'h006'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h003'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00D'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 1
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 0
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNGlaiveThrower.blp"

    set udg_ModelAttributes[nIndex] = 220.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 8.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

    //Judge
    set udg_Models[nIndex1] = 'h00A'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h005'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 'h00E'
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 2
    set nIndex1 = nIndex1 + 1
    set udg_Models[nIndex1] = 3
    set nIndex1 = nIndex1 + 1

    set udg_ModelIcons[udg_MODEL_NUM] = "ReplaceableTextures\\CommandButtons\\BTNInfernalFlameCannon.blp"

    set udg_ModelAttributes[nIndex] = 200.00
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 1.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 7.
    set nIndex = nIndex + 1
    set udg_ModelAttributes[nIndex] = 0.006
    set nIndex = nIndex + 1

    set udg_MODEL_NUM = udg_MODEL_NUM + 1

endfunction

function InitializePlayerColor takes nothing returns nothing
    set udg_PlayerColorRed[0] = 255
    set udg_PlayerColorGreen[0] = 0
    set udg_PlayerColorBlue[0] = 0
    set udg_PlayerColor[0] = "|cffff0000"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[1] = 0
    set udg_PlayerColorGreen[1] = 0
    set udg_PlayerColorBlue[1] = 255
    set udg_PlayerColor[1] = "|cff0000ff"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[2] = 0
    set udg_PlayerColorGreen[2] = 255
    set udg_PlayerColorBlue[2] = 255
    set udg_PlayerColor[2] = "|cff00ffff"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[3] = 128
    set udg_PlayerColorGreen[3] = 0
    set udg_PlayerColorBlue[3] = 128
    set udg_PlayerColor[3] = "|cff800080"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[4] = 255
    set udg_PlayerColorGreen[4] = 255
    set udg_PlayerColorBlue[4] = 0
    set udg_PlayerColor[4] = "|cffffff00"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[5] = 255
    set udg_PlayerColorGreen[5] = 128
    set udg_PlayerColorBlue[5] = 0
    set udg_PlayerColor[5] = "|cffff8000"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[6] = 0
    set udg_PlayerColorGreen[6] = 255
    set udg_PlayerColorBlue[6] = 0
    set udg_PlayerColor[6] = "|cff00ff00"
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_PlayerColorRed[7] = 255
    set udg_PlayerColorGreen[7] = 0
    set udg_PlayerColorBlue[7] = 255
    set udg_PlayerColor[7] = "|cffff00ff"
endfunction

function InitializePitCrews takes real rFace returns nothing
    local integer nIndex = 0

    loop
        exitwhen nIndex >= udg_PITGARAGE_NUM
        call SetUnitFacing( udg_PitCrews[nIndex], rFace )
        set nIndex = nIndex + 1
    endloop
endfunction

function InitializeCartPowerUps takes nothing returns nothing
    local integer nPlayerIndex = 0
    local integer nSlot = 0
    local integer nIndex = 0

    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        set nSlot = 0
        loop
            exitwhen nSlot >= 4

            set udg_CartPowerUps[nIndex] = 0
            set nIndex = nIndex + 1

            set nSlot = nSlot + 1
        endloop

        set nPlayerIndex = nPlayerIndex + 1         
    endloop
endfunction

function InitializeSound takes nothing returns nothing
    set udg_BigGunSound[0] = gg_snd_GyrocopterImpactHit100
    set udg_BigGunSound[1] = gg_snd_GyrocopterImpactHit101
    set udg_BigGunSound[2] = gg_snd_GyrocopterImpactHit102
    set udg_BigGunSound[3] = gg_snd_GyrocopterImpactHit103
    set udg_BigGunSound[4] = gg_snd_GyrocopterImpactHit104
    set udg_BigGunSound[5] = gg_snd_GyrocopterImpactHit105
    set udg_BigGunSound[6] = gg_snd_GyrocopterImpactHit106
    set udg_BigGunSound[7] = gg_snd_GyrocopterImpactHit107

    set udg_BlizzardSound[0] = gg_snd_BlizzardLoop100
    set udg_BlizzardSound[1] = gg_snd_BlizzardLoop101
    set udg_BlizzardSound[2] = gg_snd_BlizzardLoop102
    set udg_BlizzardSound[3] = gg_snd_BlizzardLoop103
    set udg_BlizzardSound[4] = gg_snd_BlizzardLoop104
    set udg_BlizzardSound[5] = gg_snd_BlizzardLoop105
    set udg_BlizzardSound[6] = gg_snd_BlizzardLoop106
    set udg_BlizzardSound[7] = gg_snd_BlizzardLoop107

    call SetCartSound( 0, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop0 )
    call SetCartSound( 1, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop1 )
    call SetCartSound( 2, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop2 )
    call SetCartSound( 3, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop3 )
    call SetCartSound( 4, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop4 )
    call SetCartSound( 5, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop5 )
    call SetCartSound( 6, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop6 )
    call SetCartSound( 7, udg_SNDINDEX_COAST, gg_snd_W3RaceCarLoop7 )

    call SetCartSound( 0, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_0 )
    call SetCartSound( 1, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_1 )
    call SetCartSound( 2, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_2 )
    call SetCartSound( 3, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_3 )
    call SetCartSound( 4, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_4 )
    call SetCartSound( 5, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_5 )
    call SetCartSound( 6, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_6 )
    call SetCartSound( 7, udg_SNDINDEX_GOING1, gg_snd_W3RaceCarGoing1_7 )

    call SetCartSound( 0, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_0 )
    call SetCartSound( 1, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_1 )
    call SetCartSound( 2, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_2 )
    call SetCartSound( 3, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_3 )
    call SetCartSound( 4, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_4 )
    call SetCartSound( 5, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_5 )
    call SetCartSound( 6, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_6 )
    call SetCartSound( 7, udg_SNDINDEX_GOING2, gg_snd_W3RaceCarGoing2_7 )

    call SetCartSound( 0, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_0 )
    call SetCartSound( 1, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_1 )
    call SetCartSound( 2, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_2 )
    call SetCartSound( 3, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_3 )
    call SetCartSound( 4, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_4 )
    call SetCartSound( 5, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_5 )
    call SetCartSound( 6, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_6 )
    call SetCartSound( 7, udg_SNDINDEX_GOING3, gg_snd_W3RaceCarGoing3_7 )

    set udg_ModelHonkPath[0] = "war3mapImported\\War3CarHonk02.wav"
    set udg_ModelHonkDur[0] = 784
    set udg_ModelHonkPath[1] = "war3mapImported\\War3CarHonk03.wav"
    set udg_ModelHonkDur[1] = 678
    set udg_ModelHonkPath[2] = "war3mapImported\\War3CarHonk05.wav"
    set udg_ModelHonkDur[2] = 1401
    set udg_ModelHonkPath[3] = "war3mapImported\\War3CarHonk08.wav"
    set udg_ModelHonkDur[3] = 1324
endfunction

function IceTrunkFilter takes nothing returns boolean
    return GetUnitTypeId( GetFilterUnit() ) == 'n00M' and IsUnitAliveBJ( GetFilterUnit() )
endfunction

function Trig_IceTrunk_Conditions takes nothing returns boolean
    if ( not IsItACart( GetUnitTypeId( GetTriggerUnit() ) ) ) then
        return false
    elseif ( not IsUnitAliveBJ( GetTriggerUnit() ) ) then
        return false
    elseif ( not IsCartVisible( GetTriggerUnit() ) ) then
        return false
    elseif ( not IsCartVulnerable( GetTriggerUnit() ) ) then
        return false
    endif

    return true
endfunction

function Trig_IceTrunk_Actions takes nothing returns nothing
    local unit uAttacker
    local unit uCart
    local location loc
    local group g
    local unit uIceTrunk
    local integer nIndex
    local integer nPlayerIndex
    local effect eff

    call ShowDebugMsg( "Trig_IceTrunk_Actions" )

    set uCart = GetTriggerUnit()
    set nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_IceTrunkCooldown[nPlayerIndex] >= 0 ) then
        return
    endif

    set loc = GetUnitLoc( uCart )

    set udg_Frozen[nPlayerIndex] = true
    set udg_Speed[nPlayerIndex] = 0
    call SetUnitTimeScale( udg_Carts[nPlayerIndex], 1 )
    call SetCartInvulnerable( udg_Carts[nPlayerIndex], true )

    set uAttacker = CreateUnit( udg_HOSTILE, 'n00N', GetUnitX(uCart), GetUnitY(uCart), 0 )
    call IssueTargetOrder( uAttacker, "attack", uCart )
    call UnitApplyTimedLife( uAttacker, 'BTLF', 2 )

    set eff = AddSpecialEffectTarget( "Abilities\\Spells\\Undead\\FreezingBreath\\FreezingBreathMissile.mdl", udg_Carts[nPlayerIndex], "origin" )
    call DestroyEffect( eff )

    set g = GetUnitsInRangeOfLocMatching( 400, loc, Condition(function IceTrunkFilter) )
    call RemoveLocation( loc )
    loop
        set uIceTrunk = FirstOfGroup( g )
        exitwhen uIceTrunk == null

        set nIndex = GetUnitUserData( uIceTrunk)
        if ( udg_IceTrunkTrigger[nIndex] == GetTriggeringTrigger() ) then
            call DestroyTrigger( udg_IceTrunkTrigger[nIndex] )
            set udg_IceTrunkTrigger[nIndex] = null
            call KillUnit( uIceTrunk )
            exitwhen true
        endif

        call GroupRemoveUnit( g, uIceTrunk )
    endloop
    call DestroyGroup( g )
endfunction

function CreateIceTrunk takes location loc returns nothing
    local integer nIndex
    local trigger t
    local unit u = CreateUnitAtLoc( udg_NPC, 'n00M', loc, I2R(GetRandomInt(0, 359)) )

    set t = CreateTrigger(  )
    call TriggerRegisterUnitInRangeSimple( t, 60, u )
    call TriggerAddCondition( t, Condition( function Trig_IceTrunk_Conditions ) )
    call TriggerAddAction( t, function Trig_IceTrunk_Actions )

    set nIndex = 0
    loop
        exitwhen nIndex >= udg_IceTrunkTriggerNum
        exitwhen udg_IceTrunkTrigger[nIndex] == null
        set nIndex = nIndex + 1
    endloop

    set udg_IceTrunkTrigger[nIndex] = t
    call SetUnitUserData( u, nIndex )
    if ( nIndex >= udg_IceTrunkTriggerNum ) then
        set udg_IceTrunkTriggerNum = udg_IceTrunkTriggerNum + 1
    endif
endfunction

function InitIceTrunk takes nothing returns nothing
    local group g = null
    local unit u
    local location loc

    set g = GetUnitsInRectMatching( gg_rct_IceTrunkArea, Condition(function IceTrunkFilter) )

    loop
        set u = FirstOfGroup( g )
        exitwhen u == null

        set loc = GetUnitLoc( u )
        call RemoveUnit( u )
        call CreateIceTrunk( loc )
        call RemoveLocation( loc )
        
        call GroupRemoveUnit( g, u )
    endloop

    call DestroyGroup( g )
endfunction

function FakeSheepFilter takes nothing returns boolean
    return GetUnitTypeId( GetFilterUnit() ) == 'n00H' and IsUnitAliveBJ( GetFilterUnit() )
endfunction

function InitSheep takes nothing returns nothing
    local group g = null
    local unit u

    set g = GetUnitsInRectMatching( gg_rct_SheepAreaFake, Condition(function FakeSheepFilter) )
    
    loop
        set u = FirstOfGroup( g )
        exitwhen u == null

        call SetUnitPathing( u, false )
        call SetUnitFacing( u, GetRandomReal(0., 359.) )
        
        call GroupRemoveUnit( g, u )
    endloop

    call DestroyGroup( g )
endfunction

//===========================================================================
function InitTrig_Initialization_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Init PowerUps
//
// 0 - Repair Kit
// 1 - Blaze
// 2 - Ethereal Cloak
// 3 - Mine
// 4 - Sheepedo
// 5 - Web Trap
// 6 - Engine Boost
// 7 - Specklefrogg's Rocket
// 8 - Uther's Blessing
// 9 - Eletric Justice
// 10-Blizzard
// 11-Carrion Swarm
//===========================================================================
function Trig_Init_PowerUps_Actions takes nothing returns nothing
    // Initialize Power Up Unit Types
    set udg_PowerUpUnitTypeNum = 0
    set udg_PowerUpUnitTypes[udg_PowerUpUnitTypeNum] = 'n003'
    set udg_PowerUpUnitTypeNum = ( udg_PowerUpUnitTypeNum + 1 )
    set udg_PowerUpUnitTypes[udg_PowerUpUnitTypeNum] = 'n002'
    set udg_PowerUpUnitTypeNum = ( udg_PowerUpUnitTypeNum + 1 )
    set udg_PowerUpUnitTypes[udg_PowerUpUnitTypeNum] = 'n00C'
    set udg_PowerUpUnitTypeNum = ( udg_PowerUpUnitTypeNum + 1 )
    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    // Initialize Power Up Types
    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    set udg_nIndex = 0
    set udg_nIndexChance = 0
    set udg_PowerUpTypeNum = 0
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A01Q'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01R'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01S'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00B'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 20
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 40
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Repair Kit|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A00E'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01E'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01F'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01G'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Blaze|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A00F'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01L'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01K'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01M'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 20
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Ethereal Cloak|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A01C'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01B'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00I'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01D'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 40
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Mine|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A01P'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00J'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01N'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01O'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Sheepedo|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A01I'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01H'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01J'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00K'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Web Trap|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A00C'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A016'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A015'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A017'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 50
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 60
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Engine Boost|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A019'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00G'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A01A'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A018'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Specklefrogg's Rocket|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A014'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00N'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A013'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A012'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 40
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Uther's Blessing|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A00D'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A010'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A00X'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A011'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 20
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Electric Justice|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A024'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A025'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A026'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A027'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 40
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Blizzard|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    set udg_PowerUpTypes[udg_nIndex] = 'A022'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A021'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A023'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpTypes[udg_nIndex] = 'A020'
    set udg_nIndex = ( udg_nIndex + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 0
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 30
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpPickChance[udg_nIndexChance] = 40
    set udg_nIndexChance = ( udg_nIndexChance + 1 )
    set udg_PowerUpNames[udg_PowerUpTypeNum] = "|cff80ff80Carrion Swarm|r"
    set udg_PowerUpTypeNum = ( udg_PowerUpTypeNum + 1 )
    // -------------------------------------------------------------
    call DestroyTrigger( GetTriggeringTrigger() )
endfunction

//===========================================================================
function InitTrig_Init_PowerUps takes nothing returns nothing
    set gg_trg_Init_PowerUps = CreateTrigger(  )
    call DisableTrigger( gg_trg_Init_PowerUps )
    call TriggerAddAction( gg_trg_Init_PowerUps, function Trig_Init_PowerUps_Actions )
endfunction

//===========================================================================
// Trigger: Init Place Check Points
//===========================================================================
function Trig_Init_Place_Check_Points_Actions takes nothing returns nothing
    local integer nIndex = 0
    set udg_PlaceCheckPtNum = 0
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0028
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0029
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0030
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0032
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0033
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0040
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0043
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0054
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0055
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0057
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0138
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0058
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0083
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0086
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0129
    set udg_PlaceChkPtCross1 = udg_PlaceCheckPtNum
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0087
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0094
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0095
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0099
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0130
    set udg_PlaceChkPtCross2 = udg_PlaceCheckPtNum
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0014
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0015
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0016
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0017
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0018
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0019
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0020
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0021
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0022
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0023
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0024
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0025
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0026
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set udg_PlaceCheckPt[udg_PlaceCheckPtNum] = gg_unit_n00B_0027
    set udg_PlaceCheckPtNum = ( udg_PlaceCheckPtNum + 1 )
    set nIndex = 0
    loop
        exitwhen nIndex >= udg_PlaceCheckPtNum
        set udg_PlaceCheckPtPos[nIndex] = GetUnitLoc( udg_PlaceCheckPt[nIndex] )
        set udg_PlaceCheckPtDir[nIndex] = GetUnitFacing( udg_PlaceCheckPt[nIndex] )
        call RemoveUnit( udg_PlaceCheckPt[nIndex] )
        set nIndex = nIndex + 1
    endloop
    call DestroyTrigger( GetTriggeringTrigger() )
endfunction

//===========================================================================
function InitTrig_Init_Place_Check_Points takes nothing returns nothing
    set gg_trg_Init_Place_Check_Points = CreateTrigger(  )
    call DisableTrigger( gg_trg_Init_Place_Check_Points )
    call TriggerAddAction( gg_trg_Init_Place_Check_Points, function Trig_Init_Place_Check_Points_Actions )
endfunction

//===========================================================================
// Trigger: Initialization
//
// Default melee game initialization for all players
//===========================================================================
function Trig_Initialization_Func088002 takes nothing returns nothing
    call ShowUnitHide( GetEnumUnit() )
endfunction

function Trig_Initialization_Actions takes nothing returns nothing
    local integer nIndex = 0
    local location loc = null
    // ----------------------------------------------------
    call ClearMapMusic()
    call SetMapMusic( gg_snd_War2IntroMusic, false, 0 )
    call SetMusicVolume( 150 )
    call UseTimeOfDayBJ( false )
    call SetTimeOfDay( 12 )
    call SetMapFlag( MAP_LOCK_ALLIANCE_CHANGES, true )
    call SetSkyModel( "Environment\\Sky\\BlizzardSky\\BlizzardSky.mdl" )
    call SetTerrainFogExBJ( 0, 2200.00, 5100.00, 0.00, 100.00, 100.00, 100.00 )
    // Initialize Player
    call InitializePlayer()
    // Initialize Cart Models
    call InitializeModelArray()
    // Initialize Cart Picking Parameters
    set udg_PickCartPos[0] = GetRectCenter(gg_rct_PickCart_1)
    set udg_PickCartPos[1] = GetRectCenter(gg_rct_PickCart_2)
    set udg_PickCartPos[2] = GetRectCenter(gg_rct_PickCart_3)
    set udg_PickCartPos[3] = GetRectCenter(gg_rct_PickCart_4)
    set udg_PickCartPos[4] = GetRectCenter(gg_rct_PickCart_5)
    set udg_PickCartPos[5] = GetRectCenter(gg_rct_PickCart_6)
    set udg_PickCartPos[6] = GetRectCenter(gg_rct_PickCart_7)
    set udg_PickCartPos[7] = GetRectCenter(gg_rct_PickCart_8)
    // Initialize Pit
    set udg_PitGarages[0] = gg_unit_n00D_0049
    set udg_PitGarages[1] = gg_unit_n00D_0050
    set udg_PitGarages[2] = gg_unit_n00D_0051
    set udg_PitGarages[3] = gg_unit_n00D_0052
    set udg_PitCrews[0] = gg_unit_o000_0224
    set udg_PitCrews[1] = gg_unit_o000_0223
    set udg_PitCrews[2] = gg_unit_o000_0222
    set udg_PitCrews[3] = gg_unit_o000_0221
    call InitializePitCrews( 180 )
    // Initialize Start Point
    set udg_StartPoints[0] = GetRectCenter(gg_rct_StartPoint1)
    set udg_StartPoints[1] = GetRectCenter(gg_rct_StartPoint2)
    set udg_StartPoints[2] = GetRectCenter(gg_rct_StartPoint3)
    set udg_StartPoints[3] = GetRectCenter(gg_rct_StartPoint4)
    set udg_StartPoints[4] = GetRectCenter(gg_rct_StartPoint5)
    set udg_StartPoints[5] = GetRectCenter(gg_rct_StartPoint6)
    set udg_StartPoints[6] = GetRectCenter(gg_rct_StartPoint7)
    set udg_StartPoints[7] = GetRectCenter(gg_rct_StartPoint8)
    // Initialize Prohibit Area
    set udg_ProhibitAreaNum = 0
    // Initialize PowerUps
    call TriggerExecute( gg_trg_Init_PowerUps )
    // Initialize Place Check Points
    call TriggerExecute( gg_trg_Init_Place_Check_Points )
    // --------------------------------------------------
    call InitializeCartPowerUps( )
    call InitializePlayerColor( )
    call InitializeSound( )
    call InitIceTrunk( )
    call InitSheep( )
    // Initialize Ships
    set udg_Ships[0] = gg_unit_hbsh_0111
    set udg_ShipTargetPoint[0] = GetRectCenter(gg_rct_ShipTarget1)
    set udg_Ships[1] = gg_unit_hbsh_0116
    set udg_ShipTargetPoint[1] = GetRectCenter(gg_rct_ShipTarget2)
    set udg_Ships[2] = null
    set nIndex = 0
    loop
        exitwhen udg_Ships[nIndex] == null
        call PauseUnit( udg_Ships[nIndex], true )
        set nIndex = nIndex + 1
    endloop
    // Initialize Volcano Unit
    set udg_VolcanoRegion[1] = gg_rct_Volcano_Death_1
    set udg_VolcanoRegion[2] = gg_rct_Volcano_Death_2
    set udg_VolcanoRegion[3] = gg_rct_Volcano_Death_3
    set udg_VolcanoRegion[4] = gg_rct_Volcano_Death_4
    set udg_VolcanoRegion[5] = gg_rct_Volcano_Death_5
    set udg_VolcanoRegion[6] = gg_rct_Volcano_Death_6
    set udg_VolcanoRegion[7] = gg_rct_Volcano_Death_7
    set udg_VolcanoUnit = gg_unit_o001_0131
    call SetPlayerTechResearchedSwap( 'Robf', 1, Player(PLAYER_NEUTRAL_AGGRESSIVE) )
    call TriggerExecute( gg_trg_Periodic_Volcano_Spew )
    // Initialize Ending
    call SetPlayerTechResearchedSwap( 'Rhfl', 1, Player(PLAYER_NEUTRAL_PASSIVE) )
    set udg_FlareSound[1] = gg_snd_FlareTarget4
    set udg_FlareSound[2] = gg_snd_FlareTarget2
    set udg_FlareSound[3] = gg_snd_FlareTarget3
    call SetUnitAnimation( gg_unit_opeo_0210, "death" )
    // ----------------------------------------------------------------------------------------------------------------------------------------
    set udg_CinematicUnitGrp = GetUnitsInRectAll(gg_rct_CimematicArea)
    call ForGroupBJ( udg_CinematicUnitGrp, function Trig_Initialization_Func088002 )
    // ----------------------------------------------------------------------------------------------------------------------------------------
    call PolledWait( 0.10 )
    set loc = GetRectCenter(gg_rct_EndCheck)
    call PlaySoundAtPointBJ( gg_snd_W3RaceCrowdCheer, 100, loc, 0 )
    call RemoveLocation( loc )
    call ConditionalTriggerExecute( gg_trg_Prepare_for_Game )
endfunction

//===========================================================================
function InitTrig_Initialization takes nothing returns nothing
    set gg_trg_Initialization = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Initialization, function Trig_Initialization_Actions )
endfunction

//===========================================================================
// Trigger: Pick Cart Functions
//===========================================================================

function ResetCameraForPick takes integer nPlayerIndex returns nothing
    call SetCameraTargetControllerNoZForPlayer( Player(nPlayerIndex), udg_PickCartCameraUnits[nPlayerIndex], 0, 0, true )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_TARGET_DISTANCE, 800, 0 )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_FIELD_OF_VIEW, 70, 0 )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_ROTATION, 270, 0 )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_ZOFFSET, 0, 0 )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_ANGLE_OF_ATTACK, 350.00, 0 )
    call SetCameraFieldForPlayer( Player(nPlayerIndex), CAMERA_FIELD_FARZ, 1000.00, 0 )
endfunction

function GetGameTip takes nothing returns string
    local string str = "|cff00ff00[IN GAME TIPS]|r|n"
    set str = str + "|n|cffffcc00Arrow keys|r - Drive your cart"
    set str = str + "|n|cffffcc00'A' 'S' 'D' 'F'|r - Use items"
    set str = str + "|n|cffffcc00'W'|r - Fire machine gun"
    set str = str + "|n|cffffcc00'Q'|r - Honk"

    return str
endfunction

function GetCartDescription takes unit uCart returns string
    local integer nModelId = GetPickModelIndex( GetUnitTypeId( uCart ) )
    //local string str = StringCase( GetUnitName( uCart ), true )
    //set str = str + "|n|nMax Speed :  " + R2SW( GetModelMaxSpeed( nModelId ), 1, 1 )
    //set str = str +   "|nAcceleration :  " + R2SW( GetModelAcceRate( nModelId ), 1, 1 )
    //set str = str +   "|nTurn Speed :  " + R2SW( GetModelTurnRate( nModelId ), 1, 1 )
    return udg_ModelDescription[nModelId]
endfunction

function CreateGameTipTag takes integer nPlayerIndex returns nothing
    set udg_GameTipTextTag[nPlayerIndex] = CreateTextTag()
    call SetTextTagText( udg_GameTipTextTag[nPlayerIndex], GetGameTip(), 0.023 )
    call SetTextTagColor( udg_GameTipTextTag[nPlayerIndex], 255, 255, 255, 255 )
    call SetTextTagVelocity( udg_GameTipTextTag[nPlayerIndex], 0, 0 )
    call ShowTextTagForceBJ( true, udg_GameTipTextTag[nPlayerIndex], GetForceOfPlayer(Player(nPlayerIndex)) )
    call SetTextTagPos( udg_GameTipTextTag[nPlayerIndex], GetLocationX(udg_PickCartPos[nPlayerIndex]) + 300, GetLocationY(udg_PickCartPos[nPlayerIndex]) + 200, 70)
endfunction

function DestroyGameTipTag takes integer nPlayerIndex returns nothing
    if ( udg_PickCartTextTag[nPlayerIndex] == null ) then
        return
    endif
    call DestroyTextTag( udg_GameTipTextTag[nPlayerIndex] )
    set udg_GameTipTextTag[nPlayerIndex] = null
endfunction

function ResetPickCartTextTag takes integer nPlayerIndex returns nothing
    if ( udg_PickCarts[nPlayerIndex] != null ) then
        if ( udg_PickCartTextTag[nPlayerIndex] != null ) then
            call DestroyTextTag( udg_PickCartTextTag[nPlayerIndex] )
        endif
        set udg_PickCartTextTag[nPlayerIndex] = CreateTextTag()
        call SetTextTagText( udg_PickCartTextTag[nPlayerIndex], GetCartDescription(udg_PickCarts[nPlayerIndex]), 0.023 )
        call SetTextTagColor( udg_PickCartTextTag[nPlayerIndex], 200, 255, 0, 255 )
        call SetTextTagVelocity( udg_PickCartTextTag[nPlayerIndex], 0, 0.020 )
        call ShowTextTagForceBJ( true, udg_PickCartTextTag[nPlayerIndex], GetForceOfPlayer(Player(nPlayerIndex)) )
        call SetTextTagPos( udg_PickCartTextTag[nPlayerIndex], GetLocationX(udg_PickCartPos[nPlayerIndex]) - 150, GetLocationY(udg_PickCartPos[nPlayerIndex]) + 200, -90)
    else
        if ( udg_PickCartTextTag[nPlayerIndex] != null ) then
            call DestroyTextTag( udg_PickCartTextTag[nPlayerIndex] )
            set udg_PickCartTextTag[nPlayerIndex] = null
        endif
    endif
endfunction

function PreparePickingCartPlayer takes integer nPlayerIndex returns nothing
    local unit uCamera = null
    local unit uCart = null
    local location loc = null
    local rect rc = null

    set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_PICKING

    set udg_PickCartCameraUnits[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), 'n00K', udg_PickCartPos[nPlayerIndex], 0 )
    set loc = PolarProjectionBJ( udg_PickCartPos[nPlayerIndex], 80, 0 )
    set udg_PickCarts[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), GetModelPickUnitType(0), loc, 90 )
    call RemoveLocation( loc )

    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_PickCarts[nPlayerIndex], Player(nPlayerIndex) )

    set rc = Rect( GetLocationX(udg_PickCartPos[nPlayerIndex]) - 250, GetLocationY(udg_PickCartPos[nPlayerIndex]) - 250, GetLocationX(udg_PickCartPos[nPlayerIndex]) + 250, GetLocationY(udg_PickCartPos[nPlayerIndex]) + 250 )
    set udg_PickCartVisibility[nPlayerIndex] = CreateFogModifierRectBJ( true, Player(nPlayerIndex), FOG_OF_WAR_VISIBLE, rc )
    call RemoveRect( rc )

    call TimerStart( udg_PickCartPlayerTimer[nPlayerIndex], 0.05, true, null )

    call CreateGameTipTag( nPlayerIndex )
    call ResetPickCartTextTag( nPlayerIndex )

    call ResetCameraForPick( nPlayerIndex )
endfunction

function RotatePickCart takes integer nPlayerIndex returns nothing
    local location loc = null
    local real rAngle = 0

    if ( udg_PickCarts[nPlayerIndex] == null ) then
        return
    endif

    set loc = GetUnitLoc( udg_PickCarts[nPlayerIndex] )
    set rAngle = GetUnitFacing( udg_PickCarts[nPlayerIndex] ) + 5
    call SetUnitFacing( udg_PickCarts[nPlayerIndex], rAngle )
    call SetUnitPositionLoc( udg_PickCarts[nPlayerIndex], loc )
    call RemoveLocation( loc )
endfunction

function StartPickingCart takes nothing returns nothing
    local boolean bContinue = false
    local integer nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            call PreparePickingCartPlayer(nPlayerIndex)
        else
            call DestroyTimer( udg_PickCartPlayerTimer[nPlayerIndex] )
            call DestroyTextTag( udg_PickCartTextTag[nPlayerIndex] )
            set udg_PickCartTextTag[nPlayerIndex] = null
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function ResetCameraTarget takes integer nPlayerIndex, unit uTarget returns nothing
    if ( uTarget != null and uTarget != udg_PlayerCameraTarget[nPlayerIndex] ) then
        set udg_PlayerCameraTarget[nPlayerIndex] = uTarget
        if ( IsUnitAliveBJ( udg_PlayerCameraTarget[nPlayerIndex] ) ) then
            call SetCameraTargetControllerNoZForPlayer( Player(nPlayerIndex), udg_PlayerCameraTarget[nPlayerIndex], 0, 0, true )
        endif
    endif

    if (GetLocalPlayer() == Player(nPlayerIndex) ) then
        if ( GetCameraField(CAMERA_FIELD_TARGET_DISTANCE) != 500 + udg_PlayerCameraIndex[nPlayerIndex] * 225 ) then
            call SetCameraField( CAMERA_FIELD_TARGET_DISTANCE, 500 + udg_PlayerCameraIndex[nPlayerIndex] * 225, 0 )
        endif
        if ( GetCameraField(CAMERA_FIELD_FIELD_OF_VIEW) != 70 ) then
            call SetCameraField( CAMERA_FIELD_FIELD_OF_VIEW, 70, 0 )
        endif
        if ( GetCameraField(CAMERA_FIELD_ROTATION) != udg_Angle[nPlayerIndex] ) then
            call SetCameraField( CAMERA_FIELD_ROTATION, udg_Angle[nPlayerIndex], 0 )
        endif
        if ( GetCameraField(CAMERA_FIELD_ZOFFSET) != 200 ) then
            call SetCameraField( CAMERA_FIELD_ZOFFSET, 200.00, 0 )
        endif
        if ( GetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK) != 340 ) then
            call SetCameraField( CAMERA_FIELD_ANGLE_OF_ATTACK, 340.00, 0 )
        endif
        if ( GetCameraField(CAMERA_FIELD_FARZ) != 5500 ) then
            call SetCameraField( CAMERA_FIELD_FARZ, 5500.00, 0 )
        endif
    endif
endfunction

function ResetCamera takes integer nPlayerIndex returns nothing
    if ( udg_NormalCamera[nPlayerIndex] ) then
        return
    endif

    if ( GetPlayerController(Player(nPlayerIndex)) != MAP_CONTROL_USER or GetPlayerSlotState(Player(nPlayerIndex)) != PLAYER_SLOT_STATE_PLAYING ) then
        return
    endif

    call ResetCameraTarget( nPlayerIndex, null )
endfunction

function PickCartNavigate takes unit uCartPick, boolean bForward returns nothing
    local location loc = null
    local real rAngle = 0
    local integer nModelIndex = GetPickModelIndex( GetUnitTypeId( uCartPick ) )
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer(uCartPick) )
    if ( nModelIndex < 0 or nPlayerIndex < 0 ) then
        return
    endif
    if ( uCartPick != udg_PickCarts[nPlayerIndex] ) then
        return
    endif

    if ( bForward ) then
        set nModelIndex = nModelIndex + 1
        if ( nModelIndex >= udg_MODEL_NUM ) then
            set nModelIndex = 0
        endif
    else
        set nModelIndex = nModelIndex - 1
        if ( nModelIndex < 0 ) then
            set nModelIndex = udg_MODEL_NUM - 1
        endif
    endif

    set loc = GetUnitLoc( udg_PickCarts[nPlayerIndex] )
    set rAngle = GetUnitFacing( udg_PickCarts[nPlayerIndex] )
    call RemoveUnit( udg_PickCarts[nPlayerIndex] )
    set udg_PickCarts[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), GetModelPickUnitType( nModelIndex ), loc, rAngle )
    call RemoveLocation( loc )
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_PickCarts[nPlayerIndex], Player(nPlayerIndex) )
    call ResetPickCartTextTag( nPlayerIndex )
endfunction

function PickCartSimple takes player plPlayer, integer nModelIndex returns nothing
    local integer nPlayerIndex = -1
    local rect rc = null

    set nPlayerIndex = GetPlayerIndex( plPlayer )
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_PICKING ) then
        return
    endif

    call DestroyTimer( udg_PickCartPlayerTimer[nPlayerIndex] )
    call RemoveUnit( udg_PickCarts[nPlayerIndex] )
    set udg_PickCarts[nPlayerIndex] = null
    call RemoveUnit( udg_PickCartCameraUnits[nPlayerIndex] )
    set udg_PickCartCameraUnits[nPlayerIndex] = null
    call DestroyGameTipTag( nPlayerIndex )
    call ResetPickCartTextTag( nPlayerIndex )

    set udg_PlayerModels[nPlayerIndex] = nModelIndex
    set udg_Carts[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), GetModelUnitType( udg_PlayerModels[nPlayerIndex] ), udg_StartPoints[udg_HowManyPicked], udg_START_ANGLE )
    set udg_CartPrePos[nPlayerIndex] = udg_StartPoints[udg_HowManyPicked]
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_Carts[nPlayerIndex], Player(nPlayerIndex) )

    set udg_Angle[nPlayerIndex] = udg_START_ANGLE
    call ResetCameraTarget( nPlayerIndex, udg_Carts[nPlayerIndex] )
    call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_COAST )

    set udg_HowManyPicked = udg_HowManyPicked + 1

    call DestroyFogModifier( udg_PickCartVisibility[nPlayerIndex] )
    set rc = Rect( GetLocationX(udg_PickCartPos[nPlayerIndex]) - 200, GetLocationY(udg_PickCartPos[nPlayerIndex]) - 200, GetLocationX(udg_PickCartPos[nPlayerIndex]) + 200, GetLocationY(udg_PickCartPos[nPlayerIndex]) + 200 )
    set udg_PickCartVisibility[nPlayerIndex] = CreateFogModifierRectBJ( true, Player(nPlayerIndex), FOG_OF_WAR_MASKED, rc )
    call RemoveRect( rc )

    call CreateFogModifierRectBJ( true, Player(nPlayerIndex), FOG_OF_WAR_VISIBLE, gg_rct_VisibleRgn )
endfunction

function PickingEnded takes nothing returns nothing
    local integer nPlayerIndex = 0

    if ( udg_PickCartTimer == null ) then
        return
    endif

    call DestroyTrigger( gg_trg_Picking_Cart_Timer )

    call DestroyTimerDialogBJ( udg_PickCartTimerWnd )
    call DestroyTimer( udg_PickCartTimer )
    set udg_PickCartTimer = null

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8
        if ( udg_PickCarts[nPlayerIndex] != null ) then
            call PickCartSimple( Player(nPlayerIndex), GetPickModelIndex( GetUnitTypeId( udg_PickCarts[nPlayerIndex] ) ) )
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop
    // --------------------------------------------------
    call DestroyTrigger( gg_trg_Pick_Cart_Functions )
    call DestroyTrigger( gg_trg_Start_Picking_Cart )
    call DestroyTrigger( gg_trg_Picking_Cart_Player_Timer )
    call DestroyTrigger( gg_trg_Select_Other_Unit_Than_Picking_Cart )
    call DestroyTrigger( gg_trg_Deselect_Picking_Cart )
    call DestroyTrigger( gg_trg_View_Previous_Cart )
    call DestroyTrigger( gg_trg_View_Next_Cart )
    call DestroyTrigger( gg_trg_Pick_Cart )
    // --------------------------------------------------
    call TimerStart( udg_GameStartTimer, 1.00, true, null )
    // --------------------------------------------------
    call TimerStart( udg_DrivingTimer, 0.05, true, null )
    // --------------------------------------------------
    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8
        if ( udg_Carts[nPlayerIndex] != null ) then
            call SetPlayerAbilityAvailable( Player(nPlayerIndex), 'A01V', true )
            call IssueImmediateOrder( udg_Carts[nPlayerIndex], "cannibalize" )
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop
    call TimerStart( udg_BigGunLoadTimer, 15, false, null )
    // --------------------------------------------------
    call ClearMapMusic()
    call StopMusic( true )
    call SetMapMusic( gg_snd_Credits + ";" + gg_snd_PH1, false, 0 )
    //call SetMapMusic( gg_snd_carracingxmas, false, 0 )
    call PlayMusic( gg_snd_PH1 )

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8
        set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_PREPARING
        set nPlayerIndex = nPlayerIndex + 1
    endloop

    //call ShowTipMsg( "Arrow keys - Drive your cart" )
    //call PolledWait( 10 )
    //call ShowTipMsg( "'A' 'S' 'D' 'F' - Use items" )
    //call PolledWait( 10 )
    //call ShowTipMsg( "'W' - Fire machine gun" )
    //call PolledWait( 10 )
    //call ShowTipMsg( "'Q' - Honk" )
endfunction

function PickCart takes player plPlayer, integer nModelIndex returns nothing
    local integer nPlayerIndex = 0

    call PickCartSimple( plPlayer, nModelIndex )
    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8

        if ( udg_PickCarts[nPlayerIndex] != null ) then
            return
        endif
        
        set nPlayerIndex = nPlayerIndex + 1
    endloop

    //All picked? Time for fun
    call PickingEnded()

    return
endfunction

//===========================================================================
function InitTrig_Pick_Cart_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Start Picking Cart
//===========================================================================
function Trig_Start_Picking_Cart_Actions takes nothing returns nothing
    call StartPickingCart()
endfunction

//===========================================================================
function InitTrig_Start_Picking_Cart takes nothing returns nothing
    set gg_trg_Start_Picking_Cart = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Start_Picking_Cart, function Trig_Start_Picking_Cart_Actions )
endfunction

//===========================================================================
// Trigger: Picking Cart Player Timer
//===========================================================================
function Trig_Picking_Cart_Player_Timer_Actions takes nothing returns nothing
    local timer t = GetExpiredTimer()
    local integer nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8
        if ( udg_PickCartPlayerTimer[nPlayerIndex] == t ) then
            call RotatePickCart( nPlayerIndex )
            exitwhen true
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_Picking_Cart_Player_Timer takes nothing returns nothing
    set gg_trg_Picking_Cart_Player_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[0] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[1] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[2] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[3] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[4] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[5] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[6] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Player_Timer, udg_PickCartPlayerTimer[7] )
    call TriggerAddAction( gg_trg_Picking_Cart_Player_Timer, function Trig_Picking_Cart_Player_Timer_Actions )
endfunction

//===========================================================================
// Trigger: Select Other Unit Than Picking Cart
//===========================================================================
function Trig_Select_Other_Unit_Than_Picking_Cart_Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h001' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h007' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h009' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h00B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Other_Unit_Than_Picking_Cart_Conditions takes nothing returns boolean
    if ( not Trig_Select_Other_Unit_Than_Picking_Cart_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Select_Other_Unit_Than_Picking_Cart_Actions takes nothing returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetTriggerPlayer() )
    call ShowDebugMsg( "1")
    if ( nPlayerIndex < 0 ) then
        return
    endif
    call ShowDebugMsg( "2")
    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_PICKING ) then
        return
    endif
    call ShowDebugMsg( "3")
    if ( udg_PickCarts[nPlayerIndex] == null ) then
        return
    endif
    call ShowDebugMsg( "4")
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_PickCarts[nPlayerIndex], Player(nPlayerIndex) )
endfunction

//===========================================================================
function InitTrig_Select_Other_Unit_Than_Picking_Cart takes nothing returns nothing
    set gg_trg_Select_Other_Unit_Than_Picking_Cart = CreateTrigger(  )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(0), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(1), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(2), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(3), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(4), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(5), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(6), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_Other_Unit_Than_Picking_Cart, Player(7), true )
    call TriggerAddCondition( gg_trg_Select_Other_Unit_Than_Picking_Cart, Condition( function Trig_Select_Other_Unit_Than_Picking_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_Select_Other_Unit_Than_Picking_Cart, function Trig_Select_Other_Unit_Than_Picking_Cart_Actions )
endfunction

//===========================================================================
// Trigger: Deselect Picking Cart
//===========================================================================
function Trig_Deselect_Picking_Cart_Func013C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h007' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h009' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00B' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Deselect_Picking_Cart_Conditions takes nothing returns boolean
    if ( not Trig_Deselect_Picking_Cart_Func013C() ) then
        return false
    endif
    return true
endfunction

function Trig_Deselect_Picking_Cart_Actions takes nothing returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetTriggerPlayer() )
    if ( nPlayerIndex < 0 ) then
        return
    endif
    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_PICKING ) then
        return
    endif
    if ( udg_PickCarts[nPlayerIndex] == null ) then
        return
    endif
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_PickCarts[nPlayerIndex], Player(nPlayerIndex) )
endfunction

//===========================================================================
function InitTrig_Deselect_Picking_Cart takes nothing returns nothing
    set gg_trg_Deselect_Picking_Cart = CreateTrigger(  )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(0), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(1), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(2), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(3), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(4), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(5), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(6), false )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Deselect_Picking_Cart, Player(7), false )
    call TriggerAddCondition( gg_trg_Deselect_Picking_Cart, Condition( function Trig_Deselect_Picking_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_Deselect_Picking_Cart, function Trig_Deselect_Picking_Cart_Actions )
endfunction

//===========================================================================
// Trigger: View Previous Cart
//===========================================================================
function Trig_View_Previous_Cart_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h007' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h009' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00B' ) ) then
        return true
    endif
    return false
endfunction

function Trig_View_Previous_Cart_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A002' ) ) then
        return false
    endif
    if ( not Trig_View_Previous_Cart_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_View_Previous_Cart_Actions takes nothing returns nothing
    call PickCartNavigate( GetTriggerUnit(), false )
endfunction

//===========================================================================
function InitTrig_View_Previous_Cart takes nothing returns nothing
    set gg_trg_View_Previous_Cart = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_View_Previous_Cart, EVENT_PLAYER_UNIT_SPELL_CAST )
    call TriggerAddCondition( gg_trg_View_Previous_Cart, Condition( function Trig_View_Previous_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_View_Previous_Cart, function Trig_View_Previous_Cart_Actions )
endfunction

//===========================================================================
// Trigger: View Next Cart
//===========================================================================
function Trig_View_Next_Cart_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h007' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h009' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00B' ) ) then
        return true
    endif
    return false
endfunction

function Trig_View_Next_Cart_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00S' ) ) then
        return false
    endif
    if ( not Trig_View_Next_Cart_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_View_Next_Cart_Actions takes nothing returns nothing
    call PickCartNavigate( GetTriggerUnit(), true )
endfunction

//===========================================================================
function InitTrig_View_Next_Cart takes nothing returns nothing
    set gg_trg_View_Next_Cart = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_View_Next_Cart, EVENT_PLAYER_UNIT_SPELL_CAST )
    call TriggerAddCondition( gg_trg_View_Next_Cart, Condition( function Trig_View_Next_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_View_Next_Cart, function Trig_View_Next_Cart_Actions )
endfunction

//===========================================================================
// Trigger: Pick Cart
//
// Default melee game initialization for all players
//===========================================================================
function Trig_Pick_Cart_Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h007' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h009' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00B' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Pick_Cart_Func002C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A00V' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A00Y' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A00T' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A00U' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A00Z' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A00W' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Pick_Cart_Conditions takes nothing returns boolean
    if ( not Trig_Pick_Cart_Func001C() ) then
        return false
    endif
    if ( not Trig_Pick_Cart_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_Pick_Cart_Actions takes nothing returns nothing
    call PickCart( GetOwningPlayer(GetTriggerUnit()), GetPickModelIndex( GetUnitTypeId( GetTriggerUnit() ) ) )
endfunction

//===========================================================================
function InitTrig_Pick_Cart takes nothing returns nothing
    set gg_trg_Pick_Cart = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Pick_Cart, EVENT_PLAYER_UNIT_SPELL_CAST )
    call TriggerAddCondition( gg_trg_Pick_Cart, Condition( function Trig_Pick_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_Pick_Cart, function Trig_Pick_Cart_Actions )
endfunction

//===========================================================================
// Trigger: Game Start Functions
//===========================================================================
function GameStartTimer takes nothing returns nothing
    local integer nIndex = 0

    if ( udg_FadeMask321 == 3 ) then
        call CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 0.6, "war3mapImported\\Special3Mask.blp", 90.00, 0, 0, 15.00 )
        call PlaySoundBJ( gg_snd_AnnouncerThreeProcessed )
    elseif ( udg_FadeMask321 == 2 ) then
        call CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 0.6, "war3mapImported\\Special2Mask.blp", 90.00, 0, 0, 15.00 )
        call PlaySoundBJ( gg_snd_AnnouncerTwoProcessed )
    elseif ( udg_FadeMask321 == 1 ) then
        call CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 0.6, "war3mapImported\\Special1Mask.blp", 90.00, 0, 0, 15.00 )
        call PlaySoundBJ( gg_snd_AnnouncerOneProcessed )
    elseif ( udg_FadeMask321 == 0 ) then
        call CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 3, "war3mapImported\\SpecialGoMask.blp", 90.00, 0, 0, 15.00 )
        call PlaySoundBJ( gg_snd_AnnouncerGoProcessed )

        call DestroyTimer( udg_GameStartTimer )
        // --------------------------------------------------
        call TriggerExecute( gg_trg_Create_Board )
        // --------------------------------------------------
        call TimerStart( udg_GameTimer, 1000000000.00, false, null )
        call TimerStart( udg_MineCartTimer, 0.75, true, null )
        call TimerStart( udg_SheepTimer, 80.00, false, null )
        loop
            exitwhen nIndex >= 8
            set udg_GameGoingStatus[nIndex] = udg_GAME_DRIVING

            set nIndex = nIndex + 1
        endloop

        return
    endif

    set udg_FadeMask321 = udg_FadeMask321 - 1
endfunction

function ChargeBigGunSingle takes integer nPlayerIndex returns nothing
    if ( udg_Carts[nPlayerIndex] != null ) then
        call UnitRemoveAbility( udg_Carts[nPlayerIndex], 'A01V' )
        call UnitAddAbility( udg_Carts[nPlayerIndex], 'A01U' )
        set udg_GunAmmo[nPlayerIndex] = udg_AMMO_MAX
    endif
endfunction

function ChargeBigGun takes nothing returns nothing
    local integer nPlayerIndex = 0

    call DestroyTimer( udg_BigGunLoadTimer )
    loop
        exitwhen nPlayerIndex >= 8

        call ChargeBigGunSingle( nPlayerIndex )

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_Game_Start_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Prepare for Game
//===========================================================================
function Trig_Prepare_for_Game_Func003Func001Func004C takes nothing returns boolean
    if ( not ( GetPlayerController(ConvertedPlayer(GetForLoopIndexA())) == MAP_CONTROL_USER ) ) then
        return false
    endif
    if ( not ( GetPlayerSlotState(ConvertedPlayer(GetForLoopIndexA())) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    return true
endfunction

function Trig_Prepare_for_Game_Func003Func001C takes nothing returns boolean
    if ( not Trig_Prepare_for_Game_Func003Func001Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Prepare_for_Game_Actions takes nothing returns nothing
    call DialogSetMessageBJ( udg_DlgLapNumber, "TRIGSTR_869" )
    set bj_forLoopAIndex = 0
    set bj_forLoopAIndexEnd = 3
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call DialogAddButtonBJ( udg_DlgLapNumber, I2S(( GetForLoopIndexA() + 3 )) )
        set udg_DlgBtnLaps[GetForLoopIndexA()] = GetLastCreatedButtonBJ()
        set bj_forLoopAIndex = bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex = 1
    set bj_forLoopAIndexEnd = udg_PLAYER_MAXNUM
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_Prepare_for_Game_Func003Func001C() ) then
            call DisplayTextToForce( GetPlayersAll(), "Please wait while " + GetPlayerNameWithColor( GetForLoopIndexA() - 1 ) + " chooses the total number of laps..." )
            call DialogDisplayBJ( true, udg_DlgLapNumber, ConvertedPlayer(GetForLoopIndexA()) )
            return
        else
        endif
        set bj_forLoopAIndex = bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_Prepare_for_Game takes nothing returns nothing
    set gg_trg_Prepare_for_Game = CreateTrigger(  )
    call DisableTrigger( gg_trg_Prepare_for_Game )
    call TriggerAddAction( gg_trg_Prepare_for_Game, function Trig_Prepare_for_Game_Actions )
endfunction

//===========================================================================
// Trigger: Number of Laps Selected
//===========================================================================
function Trig_Number_of_Laps_Selected_Func001Func001C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_DlgBtnLaps[GetForLoopIndexA()] ) ) then
        return false
    endif
    return true
endfunction

function Trig_Number_of_Laps_Selected_Actions takes nothing returns nothing
    set bj_forLoopAIndex = 0
    set bj_forLoopAIndexEnd = 4
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_Number_of_Laps_Selected_Func001Func001C() ) then
            set udg_LapNumber = ( GetForLoopIndexA() + 3 )
            exitwhen true
        else
        endif
        set bj_forLoopAIndex = bj_forLoopAIndex + 1
    endloop
    call ShowGeneralMsg( I2S(udg_LapNumber) + " laps", true )
    // --------------------------------------------------
    call ConditionalTriggerExecute( gg_trg_Start_Picking_Cart )
    // --------------------------------------------------
    call CreateTimerDialogBJ( udg_PickCartTimer, "TRIGSTR_550" )
    set udg_PickCartTimerWnd = GetLastCreatedTimerDialogBJ()
    call StartTimerBJ( udg_PickCartTimer, false, 30.00 )
    call TimerDialogDisplayBJ( true, udg_PickCartTimerWnd )
    // --------------------------------------------------
endfunction

//===========================================================================
function InitTrig_Number_of_Laps_Selected takes nothing returns nothing
    set gg_trg_Number_of_Laps_Selected = CreateTrigger(  )
    call TriggerRegisterDialogEventBJ( gg_trg_Number_of_Laps_Selected, udg_DlgLapNumber )
    call TriggerAddAction( gg_trg_Number_of_Laps_Selected, function Trig_Number_of_Laps_Selected_Actions )
endfunction

//===========================================================================
// Trigger: Picking Cart Timer
//===========================================================================
function Trig_Picking_Cart_Timer_Actions takes nothing returns nothing
    call PickingEnded()
endfunction

//===========================================================================
function InitTrig_Picking_Cart_Timer takes nothing returns nothing
    set gg_trg_Picking_Cart_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Picking_Cart_Timer, udg_PickCartTimer )
    call TriggerAddAction( gg_trg_Picking_Cart_Timer, function Trig_Picking_Cart_Timer_Actions )
endfunction

//===========================================================================
// Trigger: Game Start Timer
//===========================================================================
function Trig_Game_Start_Timer_Actions takes nothing returns nothing
    call GameStartTimer( )
endfunction

//===========================================================================
function InitTrig_Game_Start_Timer takes nothing returns nothing
    set gg_trg_Game_Start_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Game_Start_Timer, udg_GameStartTimer )
    call TriggerAddAction( gg_trg_Game_Start_Timer, function Trig_Game_Start_Timer_Actions )
endfunction

//===========================================================================
// Trigger: Big Gun Timer
//===========================================================================
function Trig_Big_Gun_Timer_Actions takes nothing returns nothing
    call ChargeBigGun()
endfunction

//===========================================================================
function InitTrig_Big_Gun_Timer takes nothing returns nothing
    set gg_trg_Big_Gun_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Big_Gun_Timer, udg_BigGunLoadTimer )
    call TriggerAddAction( gg_trg_Big_Gun_Timer, function Trig_Big_Gun_Timer_Actions )
endfunction

//===========================================================================
// Trigger: Place Functions
//
// function CheckWrongDirection takes integer nPlayerIndex returns nothing
//     if ( udg_WarningWrongDir[nPlayerIndex] ) then
//         return
//     endif
//     if ( udg_Speed[nPlayerIndex] <= 20 ) then
//         return
//     endif
//     //call ShowDebugMsg( "LapBak = " + I2S(udg_PlaceChkPtLapBak[nPlayerIndex]) )
//     //call ShowDebugMsg( "Lap    = " + I2S(udg_PlaceChkPtLap[nPlayerIndex]) )
//     //call ShowDebugMsg( "PosBak = " + I2S(udg_PlaceChkPtCurBak[nPlayerIndex]) )
//     //call ShowDebugMsg( "Pos    = " + I2S(udg_PlaceChkPtCur[nPlayerIndex]) )
//     //call ShowDebugMsg( "FarBak = " + R2S(udg_PlaceChkPtHowFarBak[nPlayerIndex]) )
//     //call ShowDebugMsg( "Far    = " + R2S(udg_PlaceChkPtHowFar[nPlayerIndex]) )
//     if ( ComparePlace( udg_PlaceChkPtLapBak[nPlayerIndex], udg_PlaceChkPtCurBak[nPlayerIndex], udg_PlaceChkPtHowFarBak[nPlayerIndex], udg_PlaceChkPtLap[nPlayerIndex], udg_PlaceChkPtCur[nPlayerIndex], udg_PlaceChkPtHowFar[nPlayerIndex] ) <= 0 ) then
//         if ( udg_EffectWrongDir[nPlayerIndex] != null ) then
//             call DestroyEffect( udg_EffectWrongDir[nPlayerIndex] )
//             set udg_EffectWrongDir[nPlayerIndex] = null
//         endif
//         return
//     endif
//     set udg_WarningWrongDir[nPlayerIndex] = true
//     if ( GetLocalPlayer() == Player(nPlayerIndex ) ) then
//         call PlaySoundBJ( gg_snd_PeasantCannotBuildThere1 )
//     endif
//     call ShowWarningMsg( Player(nPlayerIndex), "You are going wrong direction." )
//     call PolledWait(3)
//     set udg_WarningWrongDir[nPlayerIndex] = false
// endfunction
//===========================================================================

function GetLeadingCart takes nothing returns integer
    local integer nPlace = 0

    loop
        exitwhen nPlace >= udg_PlaceNum
        if ( udg_GameGoingStatus[udg_Places[nPlace]] == udg_GAME_DRIVING or udg_GameGoingStatus[udg_Places[nPlace]] == udg_GAME_REPAIRING ) then
            return udg_Places[nPlace]
        endif
        set nPlace = nPlace + 1
    endloop

    return -1
endfunction

function GetPlayerPlace takes integer nPlayerIndex returns integer
    local integer nIndex = 0
    loop
        exitwhen nIndex >= udg_PlaceNum
        if ( udg_Places[nIndex] == nPlayerIndex ) then
            return nIndex
        endif
        set nIndex = nIndex + 1
    endloop

    return -1
endfunction

function GameOverPlayer takes integer nPlayerIndex returns nothing
    local location loc = null
    local effect eff = null

    set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_OVER

    if ( udg_Carts[nPlayerIndex] == null ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set eff = AddSpecialEffectLoc( "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", loc)
    call RemoveLocation( loc )
    call RemoveUnit( udg_Carts[nPlayerIndex] )
    set udg_Carts[nPlayerIndex] = null
    call DestroyEffect( eff )
endfunction

function GameOver takes nothing returns nothing
    local integer nPlayerIndex = 0
    call PolledWait( 2 )

    if ( udg_GameOver ) then
        return
    endif

    set udg_GameOver = true
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM
        set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_OVER
        set nPlayerIndex = nPlayerIndex + 1
    endloop
    
    call ConditionalTriggerExecute( gg_trg_Ending )
    call ConditionalTriggerExecute( gg_trg_Ending_Flares )
endfunction

function EnterNextLap takes integer nPlayerIndex returns nothing
    if ( udg_PlaceChkPtLap[nPlayerIndex] == udg_LapNumber - 1 ) then
        call ShowDrivingMsgPlayer( Player(nPlayerIndex), "Last lap" )
        call PlaySoundPlayer( Player(nPlayerIndex), gg_snd_AnnouncerFinalLap01 )
    else
        call ShowDrivingMsgPlayer( Player(nPlayerIndex), "Lap " + I2S(udg_PlaceChkPtLap[nPlayerIndex] + 1) )
    endif
endfunction

function CompletedAllLaps takes integer nPlayerIndex returns nothing
    local string str
    local string str1 = "|cff00ff00 Please wait for the race to end and the award ceremony.|r"
    local integer nPlace
    local string array strNum

    set strNum[0] = "FIRST"
    set strNum[1] = "SECOND"
    set strNum[2] = "THIRD"
    set strNum[3] = "FOURTH"
    set strNum[4] = "FIFTH"
    set strNum[5] = "SIXTH"
    set strNum[6] = "SEVENTH"
    set strNum[7] = "EIGHTH"

    call SetCartInvulnerable( udg_Carts[nPlayerIndex], true )
    call SetUnitOwner( udg_Carts[nPlayerIndex], udg_NPC, false )
    set udg_GameGoingStatus[ nPlayerIndex ] = udg_GAME_FINISHING
    set udg_TimeUsed[ nPlayerIndex ] = TimerGetElapsed( udg_GameTimer )
    set udg_NormalCamera[nPlayerIndex] = true
    call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimVictoryID( udg_PlayerModels[nPlayerIndex] ) )
    call CameraSetupApplyForPlayer( true, gg_cam_GameEndCamera, Player(nPlayerIndex), 5.00 )
    call ResetToGameCameraForPlayer( Player(nPlayerIndex), 2.00 )

    set nPlace = GetPlayerPlace( nPlayerIndex )
    if ( nPlace == 0 ) then
        set str = "\r|cff00ff00Congratulations for finishing in |r|cffff0000" + strNum[nPlace] + "|r|cff00ff00 place.|r" + str1
    elseif ( nPlace > 0 ) then
        set str = "\r|cff00ff00You finish in |r|cffff0000" + strNum[nPlace] + "|r|cff00ff00 place.|r" + str1
    else
        return
    endif

    set str = str + "\r|cff00ff00Your total racing time is |r|cffffcc00" + Second2String( R2I(udg_TimeUsed[nPlayerIndex]), false ) + "|r|cff00ff00.|r"

    if ( GetLocalPlayer() == Player(nPlayerIndex) ) then
        call ClearTextMessages()
        call PlaySoundBJ( gg_snd_Hint )
        call DisplayTimedTextToPlayer( Player(nPlayerIndex), 0, 0, 10, str )
    endif
endfunction

function ReachedCheckPoint takes location locCart, integer nChkPtIndex returns boolean
    local real rDir = AngleBetweenPoints( udg_PlaceCheckPtPos[nChkPtIndex], locCart )
    return CosBJ( rDir - udg_PlaceCheckPtDir[nChkPtIndex] ) >= 0
endfunction

function DistanceFromCheckPoint takes location locCart, integer nChkPtIndex returns real
    local real rDir = AngleBetweenPoints( udg_PlaceCheckPtPos[nChkPtIndex], locCart )
    local real rDis = DistanceBetweenPoints( locCart, udg_PlaceCheckPtPos[nChkPtIndex] )

    return rDis * CosBJ( rDir - udg_PlaceCheckPtDir[nChkPtIndex] )
endfunction

function RefreshPlayerCheckPoint takes integer nPlayerIndex returns nothing
    local location loc = null
    local integer nLapPre
    local integer nChkPre
    local integer nLapNext
    local integer nChkNext
    local real rDis

    if ( udg_Carts[nPlayerIndex] == null ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )

    if ( RectContainsLoc( gg_rct_CrossArea1, loc ) ) then
        set udg_PlaceChkPtCur[nPlayerIndex] = udg_PlaceChkPtCross1
        set udg_PlaceChkPtHowFar[nPlayerIndex] = 900
        call RemoveLocation( loc )
        return
    elseif ( RectContainsLoc( gg_rct_CrossArea2, loc ) ) then
        set udg_PlaceChkPtCur[nPlayerIndex] = udg_PlaceChkPtCross2
        set udg_PlaceChkPtHowFar[nPlayerIndex] = 0
        call RemoveLocation( loc )
        return
    endif

    //First check whether cart reaches next point
    if ( udg_PlaceChkPtLap[nPlayerIndex] < 0 ) then
        set nChkNext = 0
        set nLapNext = 0
    elseif ( udg_PlaceChkPtCur[nPlayerIndex] == udg_PlaceCheckPtNum - 1 ) then
        set nChkNext = 0
        set nLapNext = udg_PlaceChkPtLap[nPlayerIndex] + 1
    else
        set nChkNext = udg_PlaceChkPtCur[nPlayerIndex] + 1
        set nLapNext = udg_PlaceChkPtLap[nPlayerIndex]
    endif

    //If reached next check point
    if ( nChkNext >= 0 ) then
        if ( ReachedCheckPoint( loc, nChkNext ) ) then
            set udg_PlaceChkPtLap[nPlayerIndex] = nLapNext
            set udg_PlaceChkPtCur[nPlayerIndex] = nChkNext
            set udg_PlaceChkPtHowFar[nPlayerIndex] = DistanceFromCheckPoint(loc, udg_PlaceChkPtCur[nPlayerIndex] )

            call RemoveLocation( loc )

            //If this is the start point            
            if ( udg_PlaceChkPtCur[nPlayerIndex] == 0 ) then
                if ( udg_PlaceChkPtLap[nPlayerIndex] >= udg_LapNumber ) then
                    call CompletedAllLaps( nPlayerIndex )
                else
                    call EnterNextLap( nPlayerIndex )
                endif
            endif
            return
        endif
    endif

    //If player is moving forward
    if ( udg_PlaceChkPtCur[nPlayerIndex] >= 0 ) then
        if ( ReachedCheckPoint( loc, udg_PlaceChkPtCur[nPlayerIndex] ) ) then
            set udg_PlaceChkPtHowFar[nPlayerIndex] = DistanceFromCheckPoint(loc, udg_PlaceChkPtCur[nPlayerIndex] )
            call RemoveLocation( loc )
            return
        endif
    endif

    //Player move backward
    if ( udg_PlaceChkPtLap[nPlayerIndex] < 0 ) then
        set nChkPre = -1
        set nLapPre = -1
    elseif ( udg_PlaceChkPtCur[nPlayerIndex] == 0 ) then
        if ( udg_PlaceChkPtLap[nPlayerIndex] == 0 ) then
            set nChkPre = -1
            set nLapPre = -1
        else
            set nChkPre = udg_PlaceCheckPtNum - 1
            set nLapPre = udg_PlaceChkPtLap[nPlayerIndex] - 1
        endif
    else
        set nChkPre = udg_PlaceChkPtCur[nPlayerIndex] - 1
        set nLapPre = udg_PlaceChkPtLap[nPlayerIndex]
    endif
    
    if ( nChkPre >= 0 ) then
        set udg_PlaceChkPtLap[nPlayerIndex] = nLapPre
        set udg_PlaceChkPtCur[nPlayerIndex] = nChkPre
        set udg_PlaceChkPtHowFar[nPlayerIndex] = DistanceFromCheckPoint(loc, udg_PlaceChkPtCur[nPlayerIndex] )

        call RemoveLocation( loc )
        return
    endif

    set udg_PlaceChkPtLap[nPlayerIndex] = -1
    set udg_PlaceChkPtCur[nPlayerIndex] = -1
    set udg_PlaceChkPtHowFar[nPlayerIndex] = 0

    call RemoveLocation( loc )
endfunction

function ComparePlace takes integer nLap1, integer nPos1, real rHowFar1, integer nLap2, integer nPos2, real rHowFar2 returns integer
    if ( nLap1 > nLap2 ) then
        return 1
    elseif ( nLap1 < nLap2 ) then
        return -1
    endif

    if ( nPos1 > nPos2 ) then
        return 1
    elseif ( nPos1 < nPos2 ) then
        return -1
    endif

    if ( rHowFar1 > rHowFar2 ) then
        return 1
    elseif ( rHowFar1 < rHowFar2 ) then
        return -1
    endif

    return 0
endfunction

function ComparePlaceIndex takes integer nPlayerIndex1, integer nPlayerIndex2 returns integer
    local integer n
    local boolean b1 = udg_GameGoingStatus[ nPlayerIndex1 ] == udg_GAME_FINISHING or udg_GameGoingStatus[ nPlayerIndex1 ] == udg_GAME_OVER
    local boolean b2 = udg_GameGoingStatus[ nPlayerIndex2 ] == udg_GAME_FINISHING or udg_GameGoingStatus[ nPlayerIndex2 ] == udg_GAME_OVER

    if ( b1 and b2 ) then
        if ( udg_TimeUsed[nPlayerIndex1] < udg_TimeUsed[nPlayerIndex2] ) then
            return 1
        elseif ( udg_TimeUsed[nPlayerIndex1] > udg_TimeUsed[nPlayerIndex2] ) then
            return -1
        endif
    elseif ( b1 ) then
        return 1
    elseif ( b2 ) then
        return -1
    else
        set n = ComparePlace( udg_PlaceChkPtLap[nPlayerIndex1], udg_PlaceChkPtCur[nPlayerIndex1], udg_PlaceChkPtHowFar[nPlayerIndex1], udg_PlaceChkPtLap[nPlayerIndex2], udg_PlaceChkPtCur[nPlayerIndex2], udg_PlaceChkPtHowFar[nPlayerIndex2] )
        if ( n != 0 ) then
            return n
        endif
    endif

    if ( nPlayerIndex1 < nPlayerIndex2 ) then
        return 1
    elseif ( nPlayerIndex1 > nPlayerIndex2 ) then
        return -1
    endif

    return 0
endfunction

function SortPlace takes nothing returns nothing
    local integer nPlayerIndex
    local integer nIndex
    local integer nTemp

    set nPlayerIndex = 0
    set udg_PlaceNum = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM
        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            set udg_Places[udg_PlaceNum] = nPlayerIndex
            set udg_PlaceNum = udg_PlaceNum + 1
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= udg_PlaceNum - 1

        set nIndex = 0
        loop
            exitwhen nIndex >= udg_PlaceNum - 1 - nPlayerIndex
        
            if ( ComparePlaceIndex( udg_Places[nIndex], udg_Places[nIndex + 1] ) < 0 ) then
                set nTemp = udg_Places[nIndex]
                set udg_Places[nIndex] = udg_Places[nIndex + 1]
                set udg_Places[nIndex + 1] = nTemp
            endif

            set nIndex = nIndex + 1
        endloop

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function CheckWrongDirection takes integer nPlayerIndex returns nothing
    local boolean bWrong = true

    if ( udg_Speed[nPlayerIndex] <= 20 ) then
        set bWrong = false
    elseif ( ComparePlace( udg_PlaceChkPtLapBak[nPlayerIndex], udg_PlaceChkPtCurBak[nPlayerIndex], udg_PlaceChkPtHowFarBak[nPlayerIndex], udg_PlaceChkPtLap[nPlayerIndex], udg_PlaceChkPtCur[nPlayerIndex], udg_PlaceChkPtHowFar[nPlayerIndex] ) <= 0 ) then
        set bWrong = false
    endif

    if ( not bWrong ) then    
        if ( udg_EffectWrongDir[nPlayerIndex] != null ) then
            call DestroyEffect( udg_EffectWrongDir[nPlayerIndex] )
            set udg_EffectWrongDir[nPlayerIndex] = null
        endif
        return
    endif

    if ( udg_EffectWrongDir[nPlayerIndex] == null ) then
        set udg_EffectWrongDir[nPlayerIndex] = AddSpecialEffectTarget( "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl", udg_Carts[nPlayerIndex], "overhead" )
    endif

    if ( udg_WarningWrongDir[nPlayerIndex] ) then
        return
    endif

    set udg_WarningWrongDir[nPlayerIndex] = true
    call ShowWarningMsg( Player(nPlayerIndex), "You are going wrong direction." )

    call PolledWait(15)
    set udg_WarningWrongDir[nPlayerIndex] = false
endfunction

function RefreshPlayerCheckPoints takes nothing returns nothing
    local integer nPlayerIndex
    local integer nNum = 0
    local integer nIndex

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING ) then
                //Save backup to check whether player is going wrong direction
                set udg_PlaceChkPtLapBak[nPlayerIndex] = udg_PlaceChkPtLap[nPlayerIndex]
                set udg_PlaceChkPtCurBak[nPlayerIndex] = udg_PlaceChkPtCur[nPlayerIndex]
                set udg_PlaceChkPtHowFarBak[nPlayerIndex] = udg_PlaceChkPtHowFar[nPlayerIndex]

                call RefreshPlayerCheckPoint( nPlayerIndex )
            endif
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop

    set nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING ) then
                call CheckWrongDirection( nPlayerIndex )
            endif
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop

    call SortPlace()

    set nNum = udg_PlaceNum
    if ( nNum > udg_PlaceNum ) then
        set nNum = udg_PlaceNum
    endif

    set nIndex = 0
    loop
        exitwhen nIndex >= nNum

        set nPlayerIndex = udg_Places[nIndex]
        if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_OVER and udg_GameGoingStatus[nPlayerIndex] != udg_GAME_FINISHING ) then
            return
        endif

        set nIndex = nIndex + 1
    endloop

    call GameOver()
endfunction

//===========================================================================
function InitTrig_Place_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Pass End Point
//===========================================================================
function Trig_Pass_End_Point_Func010C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Pass_End_Point_Conditions takes nothing returns boolean
    if ( not Trig_Pass_End_Point_Func010C() ) then
        return false
    endif
    return true
endfunction

function Trig_Pass_End_Point_Actions takes nothing returns nothing
    local player plPlayer = GetOwningPlayer( GetTriggerUnit() )
    local integer nPlayerIndex = GetPlayerIndex( plPlayer )
    if ( nPlayerIndex < 0 ) then
        return
    endif
    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_DRIVING) then
        return
    endif
    call RefreshPlayerCheckPoint( nPlayerIndex )
endfunction

//===========================================================================
function InitTrig_Pass_End_Point takes nothing returns nothing
    set gg_trg_Pass_End_Point = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Pass_End_Point, gg_rct_EndCheck )
    call TriggerAddCondition( gg_trg_Pass_End_Point, Condition( function Trig_Pass_End_Point_Conditions ) )
    call TriggerAddAction( gg_trg_Pass_End_Point, function Trig_Pass_End_Point_Actions )
endfunction

//===========================================================================
// Trigger: Abilities Functions
//===========================================================================

function StopCart takes integer nPlayerIndex returns nothing
    set udg_Speed[nPlayerIndex] = 0
    set udg_TurnSpeed[nPlayerIndex] = 0

    if ( udg_CartPrePos[nPlayerIndex] != null ) then
        call RemoveLocation( udg_CartPrePos[nPlayerIndex] )
    endif
    set udg_CartPrePos[nPlayerIndex] = GetUnitLoc( udg_Carts[nPlayerIndex] )
endfunction

function GetCartPowerUpAddress takes integer nPlayerIndex returns integer
    return nPlayerIndex * 4
endfunction

function GetCartSlotPowerUp takes integer nPlayerIndex, integer nSlot returns integer
    return udg_CartPowerUps[ GetCartPowerUpAddress(nPlayerIndex) + nSlot ]
endfunction

function IsCartSlotEmpty takes integer nPlayerIndex, integer nSlot returns boolean
    return GetCartSlotPowerUp(nPlayerIndex, nSlot) == 0
endfunction

function SetCartSlotPowerUp takes integer nPlayerIndex, integer nSlot, integer nType returns nothing
    set udg_CartPowerUps[ GetCartPowerUpAddress(nPlayerIndex) + nSlot ] = nType
endfunction

function AddCartSlotPowerUp takes integer nPlayerIndex, integer nSlot, integer nType returns nothing
    if ( not IsCartSlotEmpty(nPlayerIndex, nSlot) ) then
        return
    endif
    call SetCartSlotPowerUp(nPlayerIndex, nSlot, nType )
    set udg_CartItemNum[nPlayerIndex] = udg_CartItemNum[nPlayerIndex] + 1
endfunction

function RemoveCartSlotPowerUp takes integer nPlayerIndex, integer nSlot returns nothing
    if ( IsCartSlotEmpty(nPlayerIndex, nSlot) ) then
        return
    endif
    call SetCartSlotPowerUp(nPlayerIndex, nSlot, 0 )
    set udg_CartItemNum[nPlayerIndex] = udg_CartItemNum[nPlayerIndex] - 1
endfunction

function CheckItemPickFilter takes nothing returns boolean
    local integer nType = 0
    local integer nIndex = 0

    if ( IsUnitDeadBJ(GetFilterUnit()) ) then
        return false
    endif

    set nType = GetUnitTypeId( GetFilterUnit() )
    loop
        exitwhen nIndex >= udg_PowerUpUnitTypeNum
        if ( nType == udg_PowerUpUnitTypes[nIndex] ) then
            return true
        endif

        if ( nType == 'nshe' or nType == 'n00L' ) then
            return true
        endif

        set nIndex = nIndex + 1
    endloop

    return false
endfunction

function PowerUpDice takes integer nDiceType returns integer
    local integer nIndex = 0
    local integer nIndex1 = 0
    local integer nTotal = 0
    local integer nDice = 0

    set nIndex = 0
    set nIndex1 = nDiceType - 1
    set nTotal = 0
    loop
        exitwhen nIndex >= udg_PowerUpTypeNum
        set nTotal = nTotal + udg_PowerUpPickChance[nIndex1]
        set nIndex = nIndex + 1
        set nIndex1 = nIndex1 + 3
    endloop

    set nDice = GetRandomInt( 1, nTotal )

    set nIndex = 0
    set nIndex1 = nDiceType - 1
    set nTotal = 0
    loop
        exitwhen nIndex > udg_PowerUpTypeNum
        set nTotal = nTotal + udg_PowerUpPickChance[nIndex1]
        if ( udg_PowerUpPickChance[nIndex1] > 0 and nDice <= nTotal ) then
            return nIndex
        endif

        set nIndex = nIndex + 1
        set nIndex1 = nIndex1 + 3
    endloop

    return -1
endfunction

function PickItem takes integer nPlayerIndex, unit uItem returns boolean
    local integer n = 0
    local integer nIndex = 0
    local effect effPicking = null
    local location loc = null
    local integer nPlace
    local integer nDiceType = 0

    if ( udg_CartItemNum[nPlayerIndex] >= 4 ) then
        return false
    endif

    if ( udg_ItsForDebug ) then
        set n = 10
    else
        set nPlace = GetPlayerPlace( nPlayerIndex )

        if ( udg_PlaceNum <= 4 ) then
            if ( nPlace == 0 ) then
                set nDiceType = 1
            elseif ( nPlace == udg_PlaceNum - 1 ) then
                set nDiceType = 3
            else
                set nDiceType = 2
            endif
        else
            if ( nPlace <= 1 ) then
                set nDiceType = 1
            elseif ( nPlace >= udg_PlaceNum - 2 ) then
                set nDiceType = 3
            else
                set nDiceType = 2
            endif
        endif

        set n = PowerUpDice( nDiceType )
        if ( n < 0 ) then
            return false
        endif
    endif

    set nIndex = 0
    loop
        exitwhen nIndex >= 4

        if ( IsCartSlotEmpty( nPlayerIndex, nIndex ) ) then
            exitwhen true
        endif

        set nIndex = nIndex + 1
    endloop

    if ( nIndex >= 4 ) then
        return false
    endif

    call AddCartSlotPowerUp( nPlayerIndex, nIndex, GetPowerUpType( n, nIndex ) )
    call UnitAddAbility( udg_Carts[nPlayerIndex], GetPowerUpType( n, nIndex ) )
    call ShowPowerUpMsgPlayer( Player(nPlayerIndex), "You picked up " + udg_PowerUpNames[n] + "." )

    set loc = GetUnitLoc( uItem )
    set effPicking = AddSpecialEffectLoc( "Objects\\Spawnmodels\\Other\\ToonBoom\\ToonBoom.mdl", loc)
    call RemoveLocation( loc )
    call DestroyEffect( effPicking )
    set effPicking = AddSpecialEffectTarget( "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl", udg_Carts[nPlayerIndex], "origin" )
    call DestroyEffect( effPicking )

    return true
endfunction

function CreateAssistant takes integer nPlayerIndex, real rLifeLength returns unit
    local location loc = GetRectCenter( gg_rct_AssistantArea )
    local unit uAssistant = CreateUnitAtLoc( Player(nPlayerIndex), 'n005', loc, 0 )
    call SetUnitPathing( uAssistant, false )
    call UnitApplyTimedLife( uAssistant, 'BTLF', rLifeLength )
    call RemoveLocation( loc )
    return uAssistant
endfunction

function CreateAssistant1 takes integer nPlayerIndex, real rLifeLength returns unit
    local location loc = GetRectCenter( gg_rct_AssistantArea )
    local unit uAssistant = CreateUnitAtLoc( Player(nPlayerIndex), 'n00I', loc, 0 )
    call SetUnitPathing( uAssistant, false )
    call UnitApplyTimedLife( uAssistant, 'BTLF', rLifeLength )
    call RemoveLocation( loc )
    return uAssistant
endfunction

function ItemPicked takes integer nPlayerIndex, unit uItem returns nothing
    local integer nType = GetUnitTypeId( uItem )
    local unit uAssistant = null
    local boolean bInside = false
    local boolean bPicked = false
    local boolean bUsed = false
    local location loc = null
    local location locCart = null
    local real rAngle = 0
    local real rDistance = 0
    local unit uDumy = null
    local effect effSnowManDeath = null

    set loc = GetUnitLoc( uItem )
    set locCart = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set rDistance = DistanceBetweenPoints( loc, locCart )
    set rAngle = RAbsBJ( StandardAngle( AngleBetweenPoints( locCart, loc ) - udg_Angle[nPlayerIndex] ) )
    call RemoveLocation( loc )
    call RemoveLocation( locCart )

    call ShowDebugMsg( "Distance = " + R2SW(rDistance, 1, 1) )
    call ShowDebugMsg( "Angle = " + R2SW(rAngle, 1, 1) )
    call ShowDebugMsg( "DisH = " + R2SW(rDistance * SinBJ( rAngle ), 1, 1) )
    call ShowDebugMsg( "DisV = " + R2SW(rDistance * CosBJ( rAngle ), 1, 1) )

    if ( rDistance * SinBJ( rAngle ) >= 100 ) then
        return
    endif

    if ( rAngle < 90 ) then
        if ( rDistance * CosBJ( rAngle ) >= 175 ) then
            return
        endif
    endif

    if ( nType == 'n003' ) then            //mushroom
        if ( not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Buhf' ) ) then
            set uAssistant = CreateAssistant( nPlayerIndex, 2 )
            call IssueTargetOrder( uAssistant, "unholyfrenzy", udg_Carts[nPlayerIndex] )
            set bUsed = true
        endif
    elseif ( nType == 'n002' ) then        //poison smoke
        if ( not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Bslo' ) and IsCartVulnerable(udg_Carts[nPlayerIndex]) ) then
            set uAssistant = CreateAssistant( nPlayerIndex, 2 )
            call IssueTargetOrder( uAssistant, "slow", udg_Carts[nPlayerIndex] )
            set bUsed = true
        endif
    elseif ( nType == 'nshe' and udg_SheepFled ) then        //Sheep
        call KillUnit( uItem )
        if ( IsCartVulnerable(udg_Carts[nPlayerIndex]) ) then
            set uAssistant = CreateAssistant( nPlayerIndex, 2 )
            call IssueTargetOrder( uAssistant, "slow", udg_Carts[nPlayerIndex] )
        endif
    elseif ( nType == 'n00L' ) then        //Snowman
        set loc = GetUnitLoc( uItem )
        call KillUnit( uItem )
        set effSnowManDeath = AddSpecialEffectLoc( "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", loc)
        call RemoveLocation( loc )
        call DestroyEffect( effSnowManDeath )
  
        call StopCart( nPlayerIndex )
        if ( IsCartVulnerable(udg_Carts[nPlayerIndex]) ) then
            set uAssistant = CreateAssistant( nPlayerIndex, 2 )
            call IssueTargetOrder( uAssistant, "slow", udg_Carts[nPlayerIndex] )
        endif
    elseif ( nType == 'n00C' ) then        //random power up
        set bPicked = PickItem( nPlayerIndex, uItem )
    endif

    //Used to create a respawn event
    if ( bUsed or bPicked ) then
        set loc = GetUnitLoc( uItem )
        call RemoveUnit( uItem )
        set uDumy = CreateUnitAtLoc( udg_NPC, 'n00K', loc, 0 )
        call RemoveLocation( loc )
        call SetUnitUserData( uDumy, nType )
        call KillUnit( uDumy )
    endif

endfunction

function CheckItemPick takes integer nPlayerIndex returns nothing
    local location loc = null
    local group g = null
    local unit uItem = null
    local real rSpeed
    local real rRange

    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set rSpeed = RealSpeed( udg_Speed[nPlayerIndex] )
    set rRange = SquareRoot( rSpeed * rSpeed + 90 * 90 )
    set g = GetUnitsInRangeOfLocMatching( 200, loc, Condition(function CheckItemPickFilter) )
    call RemoveLocation( loc )

    loop
        set uItem = FirstOfGroup( g )
        exitwhen uItem == null
        
        call ItemPicked( nPlayerIndex, uItem )
        call GroupRemoveUnit( g, uItem )
    endloop

    call DestroyGroup( g )
endfunction

function SpinVehicle takes integer nPlayerIndex returns nothing
    local unit uAssistant = null
    set uAssistant = CreateAssistant1( nPlayerIndex, 2 )
    call IssueTargetOrder( uAssistant, "bloodlust", udg_Carts[nPlayerIndex] )
endfunction

function DoLightningHit takes integer nPlayerIndex returns nothing
    local location loc = null
    local group grp = null
    local unit uCart = null
    local boolean bHit = false

    if ( not IsCartLightened( udg_Carts[nPlayerIndex] ) or not IsCartVulnerable( udg_Carts[nPlayerIndex] ) ) then
        return
    endif

    if ( IsCartTrapped( udg_Carts[nPlayerIndex] ) or IsCartSpinning( udg_Carts[nPlayerIndex] ) or IsCartStunned( udg_Carts[nPlayerIndex] ) ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set grp = GetUnitsInRangeOfLocAll( 200, loc )
    call RemoveLocation( loc )

    loop
        set uCart = FirstOfGroup( grp )
        exitwhen uCart == null

        if ( IsItACart( GetUnitTypeId( uCart ) ) and IsUnitAliveBJ( uCart ) and IsPlayerEnemyCR( Player(nPlayerIndex), GetOwningPlayer( uCart ) ) ) then
            if ( not IsCartLightened( uCart ) and not UnitHasBuffBJ( uCart, 'Btsp' ) and not IsCartSpinning( uCart ) ) then
                set bHit = true
                exitwhen true
            endif
        endif

        call GroupRemoveUnit( grp, uCart )
    endloop

    call DestroyGroup( grp )
    
    if ( bHit ) then
        call SpinVehicle( nPlayerIndex )
    endif
endfunction

function DoLightningResize takes integer nPlayerIndex returns nothing
    local unit uCart = udg_Carts[nPlayerIndex]
    local real rResize = 0

    if ( not IsCartLightened( uCart ) ) then
        call SetUnitScale( uCart, 1, 1, 1 )
        if ( udg_LightningResize[nPlayerIndex] > 0 ) then
            set udg_LightningResize[nPlayerIndex] = 0
        endif

        return
    endif

    if ( udg_LightningResize[nPlayerIndex] < udg_LIGHTNINGRESIZE_MAX ) then
        set udg_LightningResize[nPlayerIndex] = udg_LightningResize[nPlayerIndex] + 1
    endif

    set rResize = ( 10. - udg_LightningResize[nPlayerIndex] ) / 10.
    call SetUnitScale( uCart, rResize, rResize, rResize )
endfunction

function DoLightningSingle takes integer nAttackerIndex, integer nPlayerIndex returns nothing
    local unit uAssistant = null
    local unit uCart = udg_Carts[nPlayerIndex]
    local location loc = GetUnitLoc( uCart )
    local unit uLightning = CreateUnitAtLoc( Player(nAttackerIndex), 'n000', loc, 0 )
    call RemoveLocation( loc )
    call SetUnitPathing( uLightning, false )
    call UnitApplyTimedLife( uLightning, 'BTLF', 2 )
    call IssueTargetOrder( uLightning, "attack", uCart )

    set uAssistant = CreateAssistant( nAttackerIndex, 2 )
    call IssueTargetOrder( uAssistant, "purge", uCart )
    call ShowHitMsg( Player(nPlayerIndex), nAttackerIndex, "Lightning" )
endfunction

function Lightning takes unit uCart returns nothing
    local integer nPlayerIndexUse = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local integer nPlayerIndex = 0

    if (nPlayerIndexUse < 0 ) then
        return
    endif

    call StartSound( gg_snd_MonsoonLightningHit )
    loop
        exitwhen nPlayerIndex >= 8

        if ( nPlayerIndex != nPlayerIndexUse and GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            if ( udg_Carts[nPlayerIndex] != null and IsUnitAliveBJ(udg_Carts[nPlayerIndex]) and IsCartVulnerable(udg_Carts[nPlayerIndex]) and IsCartVisible(udg_Carts[nPlayerIndex]) ) then
                call DoLightningSingle( nPlayerIndexUse, nPlayerIndex )
            endif
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function DoStarHit takes integer nPlayerIndex returns nothing
    local location loc = null
    local group grp = null
    local unit uCart = null
    local integer nIndexHit

    if ( not UnitHasBuffBJ( udg_Carts[nPlayerIndex], 'B005' ) ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set grp = GetUnitsInRangeOfLocAll( 200, loc )
    call RemoveLocation( loc )

    loop
        set uCart = FirstOfGroup( grp )
        exitwhen uCart == null

        if ( IsItACart( GetUnitTypeId( uCart ) ) and IsUnitAliveBJ( uCart ) and IsPlayerEnemyCR( Player(nPlayerIndex), GetOwningPlayer( uCart ) ) ) then
            if ( IsCartVulnerable( uCart ) ) then
                set nIndexHit = GetPlayerIndex( GetOwningPlayer( uCart ) )
                call ShowHitMsg( Player(nIndexHit), nPlayerIndex, "Cart" )
                call SpinVehicle( nIndexHit )
            endif
        endif

        call GroupRemoveUnit( grp, uCart )
    endloop

    call DestroyGroup( grp )
endfunction

function UseStar takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local unit uAssistant = null
    local integer nUseIndex = 0

    if (nPlayerIndex < 0 ) then
        return
    endif

    set udg_UseInvulnerableIndex[nPlayerIndex] = udg_UseInvulnerableIndex[nPlayerIndex] + 1
    set nUseIndex = udg_UseInvulnerableIndex[nPlayerIndex]

    set uAssistant = CreateAssistant1( nPlayerIndex, 2 )
    call IssueTargetOrder( uAssistant, "innerfire", uCart )
    call SetCartInvulnerable( uCart, true )
    call PolledWait( 6. )
    
    if ( nUseIndex == udg_UseInvulnerableIndex[nPlayerIndex] ) then
        call SetCartInvulnerable( uCart, false )
    endif
endfunction

function EatMushroom takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local unit uAssistant = null

    if (nPlayerIndex < 0 ) then
        return
    endif

    set uAssistant = CreateAssistant( nPlayerIndex, 2 )
    call IssueTargetOrder( uAssistant, "unholyfrenzy", uCart )
endfunction

function IHateTheLeadingCart takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local integer nIndex = 0
    local unit uLauncher = null
    local unit uDummyTarget = null
    local real rAngle = 0
    local location locSrc = null
    local location locTarget = null
    local location locTemp = null

    if (nPlayerIndex < 0 ) then
        return
    endif

    set nIndex = GetLeadingCart()
    if ( nIndex >= 0 ) then
        if ( udg_Carts[nIndex] == null or IsUnitDeadBJ(udg_Carts[nIndex] ) ) then
            set nIndex = -1
        elseif ( not IsCartVulnerable(udg_Carts[nIndex]) or udg_GameGoingStatus[nIndex] != udg_GAME_DRIVING ) then
            set nIndex = -1
        endif
    endif

    if ( nIndex >= 0 ) then
        call ShowWarningMsg( Player(nIndex), udg_PlayerColor[nPlayerIndex] + GetPlayerName(Player(nPlayerIndex)) + "|r is launching missile at you!" )
    endif

    set locSrc = GetUnitLoc( uCart )

    if ( nIndex < 0 ) then
        set locTarget = Location( 0, 0 )
    else
        set locTarget = GetUnitLoc( udg_Carts[nIndex] )
    endif

    set rAngle = AngleBetweenPoints( locSrc, locTarget )
    call RemoveLocation( locTarget )
    set locTemp = PolarProjectionBJ( locSrc, 600, rAngle )
    set uLauncher = CreateUnitAtLoc( Player(nPlayerIndex), 'n007', locSrc, 0 )
    call RemoveLocation( locSrc )
    call SetUnitPathing( uLauncher, false )
    call SetUnitVertexColor( uLauncher, 0, 0, 0, 0 )
    set uDummyTarget = CreateUnitAtLoc( Player(nPlayerIndex), 'n006', locTemp, 0 )
    call RemoveLocation( locTemp )
    call SetUnitPathing( uDummyTarget, false )
    call SetUnitVertexColor( uDummyTarget, 0, 0, 0, 0 )
    call IssueTargetOrder( uLauncher, "attack", uDummyTarget )
    call UnitApplyTimedLife( uLauncher, 'BTLF', 2 )
    call UnitApplyTimedLife( uDummyTarget, 'BTLF', 2 )

    if ( nIndex < 0 ) then
        return
    endif

    call StartSound( gg_snd_PError )
    call PolledWait( 4.5 )
    call StopSound( gg_snd_PError, false, true )
    if ( udg_GameGoingStatus[nIndex] != udg_GAME_DRIVING or udg_Carts[nIndex] == null or IsUnitDeadBJ(udg_Carts[nIndex]) or not IsCartVulnerable( udg_Carts[nIndex] ) or not IsCartVisible( udg_Carts[nIndex] ) ) then
        return
    endif

    set locTarget = GetUnitLoc( udg_Carts[nIndex] )
    set locTemp = PolarProjectionBJ( locTarget, 300, rAngle + 180 )
    call RemoveLocation( locTarget )
    set uLauncher = CreateUnitAtLoc( Player(nPlayerIndex), 'n004', locTemp, 0 )
    call RemoveLocation( locTemp )
    call SetUnitPathing( uLauncher, false )
    call SetUnitVertexColor( uLauncher, 0, 0, 0, 0 )
    call IssueTargetOrder( uLauncher, "thunderbolt", udg_Carts[nIndex] )
    call UnitApplyTimedLife( uLauncher, 'BTLF', 2 )

    call PolledWait( 0.2 )

    if ( udg_GameGoingStatus[nIndex] != udg_GAME_DRIVING or udg_Carts[nIndex] == null or IsUnitDeadBJ(udg_Carts[nIndex]) or not IsCartVulnerable( udg_Carts[nIndex] ) or not IsCartVisible( udg_Carts[nIndex] ) ) then
        return
    endif

    set locTarget = GetUnitLoc( udg_Carts[nIndex] )
    call PlaySoundAtPointBJ( gg_snd_BuildingDeathLargeHuman, 100, locTarget, 0 )
    call RemoveLocation( locTarget )
    call ShowHitMsg( Player(nIndex), nPlayerIndex, "Rocket" )
endfunction

function LayMine takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local location loc = null
    local location loc1 = null
    local unit uMine = null
    local unit uFake = null
    local integer nIndex

    if (nPlayerIndex < 0 ) then
        return
    endif

    set loc = GetUnitLoc( uCart )
    set loc1 = PolarProjectionBJ( loc, 100, udg_Angle[nPlayerIndex] + 180 )
    call RemoveLocation( loc )
    set uMine = CreateUnitAtLoc( Player(nPlayerIndex), 'n00G', loc1, 0 )
    set uFake = CreateUnitAtLoc( Player(nPlayerIndex), 'n001', loc1, 0 )
    call RemoveLocation( loc1 )

    set nIndex = 0
    loop
        exitwhen udg_FakePackage[nIndex] == null
        set nIndex = nIndex + 1
    endloop
    set udg_FakePackage[nIndex] = uFake
    call SetUnitUserData( uMine, nIndex )
    call SetUnitAnimation( uFake, "birth" )
endfunction

function MineExplorded takes unit uMine returns nothing
    local location loc = null
    local group grp = null
    local unit uCart = null
    local player plPlayer = GetOwningPlayer( uMine )
    local integer nPlayerIndex = GetPlayerIndex( plPlayer )
    local integer nPlayerHit

    local integer nFake = -1

    if ( nPlayerIndex < 0 ) then
         return
    endif

    set nFake = GetUnitUserData( uMine )
    if ( udg_FakePackage[nFake] != null ) then
        call KillUnit( udg_FakePackage[nFake] )
        set udg_FakePackage[nFake] = null
    endif

    set loc = GetUnitLoc( uMine )
    set grp = GetUnitsInRangeOfLocAll( 300, loc )
    call RemoveLocation( loc )
    
    loop
        set uCart = FirstOfGroup( grp )
        exitwhen uCart == null

        if ( IsItACart( GetUnitTypeId( uCart ) ) and IsUnitAliveBJ( uCart ) and IsPlayerEnemyCR(plPlayer, GetOwningPlayer( uCart ) ) ) then
            set nPlayerHit = GetPlayerIndex( GetOwningPlayer( uCart ) )
            call ShowHitMsg( Player(nPlayerHit), nPlayerIndex, "Mine" )
            call SpinVehicle( nPlayerHit )
        endif

        call GroupRemoveUnit( grp, uCart )
    endloop

    call DestroyGroup( grp )
endfunction

function DoBlaze takes integer nPlayerIndex returns nothing
    local unit uBlaze = null
    local location loc = null
    local location loc1 = null
    local location loc2 = null
    local real rAngle = 0

    if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ(udg_Carts[nPlayerIndex]) ) then
        return
    endif

    set rAngle = udg_Angle[nPlayerIndex]
    if ( udg_Speed[nPlayerIndex] >= 0 ) then
        set rAngle = rAngle + 180
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set loc1 = PolarProjectionBJ( loc, 100, rAngle )
    call RemoveLocation( loc )
    set uBlaze = CreateUnitAtLoc( Player(nPlayerIndex), 'n009', loc1, 0 )
    call SetUnitPathing( uBlaze, false )
    call UnitApplyTimedLife( uBlaze, 'BTLF', 4 )

    set loc2 = PolarProjectionBJ( loc1, 50, rAngle )
    call RemoveLocation( loc1 )
    set uBlaze = CreateUnitAtLoc( Player(nPlayerIndex), 'n009', loc2, 0 )
    call RemoveLocation( loc2 )
    call SetUnitPathing( uBlaze, false )
    call UnitApplyTimedLife( uBlaze, 'BTLF', 4 )
endfunction

function UseBlaze takes unit uCart returns nothing
    local integer nBlazeFlag = 0
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if (nPlayerIndex < 0 ) then
        return
    endif

    set udg_PlayerBlazeFlag[nPlayerIndex] = udg_PlayerBlazeFlag[nPlayerIndex] + 1
    set nBlazeFlag = udg_PlayerBlazeFlag[nPlayerIndex]
    call PolledWait( 4 )
    if ( udg_PlayerBlazeFlag[nPlayerIndex] == nBlazeFlag ) then
        set udg_PlayerBlazeFlag[nPlayerIndex] = 0
    endif
endfunction

function DoFireCoatSlow takes integer nPlayerIndex returns nothing
    local location loc = null
    local group grp = null
    local unit uCart = null
    local unit uAssistant = null

    if ( not UnitHasBuffBJ( udg_Carts[nPlayerIndex], 'B001' ) ) then
        return
    endif

    set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set grp = GetUnitsInRangeOfLocAll( 300, loc )
    call RemoveLocation( loc )

    loop
        set uCart = FirstOfGroup( grp )
        exitwhen uCart == null

        if ( IsItACart( GetUnitTypeId( uCart ) ) and IsUnitAliveBJ( uCart ) and IsPlayerEnemy( Player(nPlayerIndex), GetOwningPlayer( uCart ) ) ) then
            if ( IsCartVulnerable( uCart) and not UnitHasBuffBJ( uCart, 'B002' ) ) then
                set uAssistant = CreateAssistant1( nPlayerIndex, 2 )
                call IssueTargetOrder( uAssistant, "faeriefire", uCart )
            endif
        endif

        call GroupRemoveUnit( grp, uCart )
    endloop

    call DestroyGroup( grp )
endfunction

function Trig_Trap_Actions takes nothing returns nothing
    local integer nLoopIndex = 0
    local trigger trgTrap = GetTriggeringTrigger()
    local unit uCart = GetTriggerUnit()

    set nLoopIndex = 0
    loop
        exitwhen nLoopIndex >= udg_TrapMax
        exitwhen udg_TrapTriggers[nLoopIndex] == trgTrap
        set nLoopIndex = nLoopIndex + 1
    endloop
    
    if ( nLoopIndex >= udg_TrapMax ) then
        return
    endif

    if ( udg_Traps[nLoopIndex] == null or IsUnitDeadBJ( udg_Traps[nLoopIndex] ) ) then
        return
    endif

    if ( not IsItACart( GetUnitTypeId(uCart) ) or IsUnitDeadBJ( uCart ) ) then
        return
    endif

    if ( not IsPlayerEnemyCR( GetOwningPlayer(udg_Traps[nLoopIndex]), GetOwningPlayer( uCart ) ) ) then
        return
    endif

    call DestroyTrigger( trgTrap )
    set udg_TrapTriggers[nLoopIndex] = null

    call UnitAddAbility( udg_Traps[nLoopIndex], 'Aloc' )
    call UnitAddAbility( udg_Traps[nLoopIndex], 'A000' )
    call IssueTargetOrder( udg_Traps[nLoopIndex], "cripple", uCart )
    call UnitApplyTimedLife( udg_Traps[nLoopIndex], 'BTLF', 2 )
    call ShowHitMsg( GetOwningPlayer(uCart), GetPlayerIndex(GetOwningPlayer(udg_Traps[nLoopIndex])), "Trap" )
endfunction

function SetupTrap takes unit uCart returns nothing
    local trigger trgTrap = null
    local unit uTrap = null
    local integer nLoopIndex = 0

    local location loc = null
    local location loc1 = null
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if (nPlayerIndex < 0 ) then
        return
    endif

    set loc = GetUnitLoc( uCart ) 
    set loc1 = PolarProjectionBJ( loc, 100, udg_Angle[nPlayerIndex] + 180 )
    call RemoveLocation( loc )
    set uTrap = CreateUnitAtLoc( Player(nPlayerIndex), 'n00A', loc1, 0 )
    call UnitApplyTimedLife( uTrap, 'BTLF', 120 )
    call RemoveLocation( loc1 )
    set trgTrap = CreateTrigger()

    set nLoopIndex = 0
    loop
        exitwhen nLoopIndex >= udg_TrapMax
        exitwhen udg_Traps[nLoopIndex] == null
        set nLoopIndex = nLoopIndex + 1
    endloop

    set udg_Traps[nLoopIndex] = uTrap
    set udg_TrapTriggers[nLoopIndex] = trgTrap
    if ( nLoopIndex == udg_TrapMax ) then
        set udg_TrapMax = udg_TrapMax + 1
    endif

    call TriggerRegisterUnitInRangeSimple( trgTrap, 80.00, uTrap )
    call TriggerAddAction( trgTrap, function Trig_Trap_Actions )
endfunction

function TrapExpired takes unit uWeb returns nothing
    local integer nLoopIndex = 0
    set nLoopIndex = 0
    loop
        exitwhen nLoopIndex >= udg_TrapMax
        
        if ( udg_Traps[nLoopIndex] == uWeb ) then
            if ( udg_TrapTriggers[nLoopIndex] != null ) then
                call DestroyTrigger( udg_TrapTriggers[nLoopIndex] )
                set udg_TrapTriggers[nLoopIndex] = null
            endif
            set udg_Traps[nLoopIndex] = null
            return
        endif
        
        set nLoopIndex = nLoopIndex + 1
    endloop
endfunction

function ThrowTurtle takes unit uCart returns nothing
    local location loc = null
    local location locNext = null

    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if (nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_TurtleThrown[nPlayerIndex] != null ) then
        call PauseTimer( udg_ThrowTurtleTimer[nPlayerIndex] )
        call RemoveUnit( udg_TurtleThrown[nPlayerIndex] )
        set udg_TurtleThrown[nPlayerIndex] = null
    endif

    set udg_ThrowTurtleAngle[nPlayerIndex] = StandardAngle( GetUnitFacing(uCart) )
    set loc = GetUnitLoc( uCart )
    set locNext = PolarProjectionBJ( loc, 200, udg_ThrowTurtleAngle[nPlayerIndex] )
    call RemoveLocation( loc )
    set udg_TurtleThrown[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), 'n00J', locNext, udg_ThrowTurtleAngle[nPlayerIndex] )
    call RemoveLocation( locNext)
    call SetUnitPathing( udg_TurtleThrown[nPlayerIndex], false )
    call UnitApplyTimedLife( udg_TurtleThrown[nPlayerIndex], 'BTLF', 2 )
    call SetUnitAnimationByIndex( udg_TurtleThrown[nPlayerIndex], 8 )
    call SetUnitTimeScale( udg_TurtleThrown[nPlayerIndex], 2 )
    set udg_TurtleThrowTickle[nPlayerIndex] = 0
    call TimerStart( udg_ThrowTurtleTimer[nPlayerIndex], 0.05, true, null )
endfunction

function TurtleBump takes integer nPlayerIndex, unit uCart returns nothing
    local integer nPlayerIndexCart = 0
    local location locTurtle = null
    local location locCart = null
    local location loc = null
    local real rAngle = 0
    local real rDistance = 0
    local real rTemp = 0

    local real rHP = 0
    local effect effBite = null

    if ( not IsCartVulnerable( uCart ) or not IsCartVisible( uCart ) ) then
        return
    endif

    //If the vehicle is already spinning
    if ( IsCartSpinning( uCart ) ) then
        return
    endif

    set locTurtle = GetUnitLoc( udg_TurtleThrown[nPlayerIndex] )
    set locCart = GetUnitLoc( uCart )

    set rAngle = AngleBetweenPoints( locTurtle, locCart )
    set rDistance = DistanceBetweenPoints( locTurtle, locCart )
    call RemoveLocation( locTurtle )

    call ShowDebugMsg( "Throw Angle = " + R2S(udg_ThrowTurtleAngle[nPlayerIndex]) )
    call ShowDebugMsg( "Relat Angle = " + R2S(rAngle) )

    set rTemp = StandardAngle( rAngle - udg_ThrowTurtleAngle[nPlayerIndex] )
    if ( rTemp > 90 or rTemp < -90 ) then
        call RemoveLocation( locCart )
        return
    endif

    set rDistance = RAbsBJ( rDistance * SinBJ(rTemp) )
    if ( rDistance > 100 ) then
        call RemoveLocation( locCart )
        return
    endif

    call KillUnit( udg_TurtleThrown[nPlayerIndex] )

    set rHP = GetUnitState( uCart, UNIT_STATE_LIFE )
    if ( rHP <= 150 ) then
        call KillUnit( uCart )
        call RemoveLocation( locCart )
        return
    endif

    set rHP = rHP - 150
    call SetUnitState( uCart, UNIT_STATE_LIFE, rHP )
    set effBite = AddSpecialEffectTarget( "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl", uCart, "chest" )
    call DestroyEffect( effBite )

    //if ( rTemp < 0 ) then
    //    set rAngle = udg_ThrowTurtleAngle[nPlayerIndex] - 60
    //elseif ( rTemp > 0 ) then
    //    set rAngle = udg_ThrowTurtleAngle[nPlayerIndex] + 60
    //endif

    set nPlayerIndexCart = GetPlayerIndex( GetOwningPlayer( uCart ) )
    //set udg_Angle[nPlayerIndexCart] = rAngle
    //set loc = PolarProjectionBJ( locCart, 50, rAngle)
    //call RemoveLocation( locCart )
    //call SetUnitFacing( uCart, udg_Angle[nPlayerIndexCart] )
    //call SetUnitPositionLoc( uCart, loc )
    //call RemoveLocation( loc )

    call RemoveLocation( locCart )

    call ShowHitMsg( Player(nPlayerIndexCart), nPlayerIndex, "Sheepedo" )
    call SpinVehicle( nPlayerIndexCart )
endfunction

function LocateTurtleTarget takes location loc, real rAngle, integer nPlayerIndex returns integer
    local integer nIndex = 0
    local integer nIndexPick = -1
    local location loc1 = null
    local real rAngle1
    local boolean bContinue
    local real rDisMin = 0
    local real rDis

    loop
        exitwhen nIndex >= udg_PLAYER_MAXNUM

        set bContinue = nIndex != nPlayerIndex and udg_Carts[nIndex] != null

        if ( bContinue ) then
            if ( IsUnitDeadBJ( udg_Carts[nIndex] ) or not IsCartVulnerable( udg_Carts[nIndex] ) ) then
                set bContinue = false
            endif
        endif

        call ShowDebugMsg( "Locate Target 1" )

        if ( bContinue ) then
            set loc1 = GetUnitLoc( udg_Carts[nIndex] )
            set rAngle1 = StandardAngle( AngleBetweenPoints( loc, loc1 ) - rAngle )
        call ShowDebugMsg( "Angle = " + R2S(rAngle1) )
            if ( rAngle1 > 90 or rAngle1 < -90 ) then
                set bContinue = false
            endif
        endif

        call ShowDebugMsg( "Locate Target 2" )

        if ( bContinue ) then
            set rDis = DistanceBetweenPoints( loc, loc1 )
            if ( rDis > 6000 or rDis <= 0 ) then
                set bContinue = false
            endif

        call ShowDebugMsg( "Locate Target 3" )

            if ( bContinue ) then
                if ( nIndexPick >= 0 ) then
                    if ( rDis >= rDisMin ) then
                        set bContinue = false
                    endif
                endif
            endif

        call ShowDebugMsg( "Locate Target 4" )

            if ( bContinue ) then
                set nIndexPick = nIndex
                set rDisMin = rDis
            endif
        endif

        if ( loc1 != null ) then
            call RemoveLocation( loc1 )
        endif

        set nIndex = nIndex + 1
    endloop

    return nIndexPick
endfunction

function ThrowTurtleGoGoGo takes integer nPlayerIndex returns nothing
    local location loc = null
    local location locNext = null
    local group grp = null
    local unit uCart = null
    local integer nTarget
    local real rAngle
    local real rChange = 4.8
    local real rTemp

    if ( udg_TurtleThrown[nPlayerIndex] == null or IsUnitDeadBJ( udg_TurtleThrown[nPlayerIndex] ) ) then
        call PauseTimer( udg_ThrowTurtleTimer[nPlayerIndex] )
        set udg_TurtleThrown[nPlayerIndex] = null
        return
    endif

    set loc = GetUnitLoc( udg_TurtleThrown[nPlayerIndex] )
    set nTarget = LocateTurtleTarget( loc, udg_ThrowTurtleAngle[nPlayerIndex], nPlayerIndex )
    call ShowDebugMsg( "Target = " + I2S(nTarget) )
    if ( udg_TurtleThrowTickle[nPlayerIndex] < 6 ) then
        set rChange = udg_TurtleThrowTickle[nPlayerIndex] * 0.8
    endif

    if ( nTarget >= 0 ) then
        set locNext = GetUnitLoc( udg_Carts[nTarget] )
        set rAngle = StandardAngle( AngleBetweenPoints( loc, locNext ) )
        set rTemp = StandardAngle( rAngle - udg_ThrowTurtleAngle[nPlayerIndex] )
        if ( rTemp < 0 ) then
            if ( rTemp > -3 ) then
                set udg_ThrowTurtleAngle[nPlayerIndex] = rAngle
            else
                set udg_ThrowTurtleAngle[nPlayerIndex] = StandardAngle( udg_ThrowTurtleAngle[nPlayerIndex] - rChange )
            endif
        elseif ( rTemp > 0 ) then
            if ( rTemp < 3 ) then
                set udg_ThrowTurtleAngle[nPlayerIndex] = rAngle
            else
                set udg_ThrowTurtleAngle[nPlayerIndex] = StandardAngle( udg_ThrowTurtleAngle[nPlayerIndex] + rChange )
            endif
        endif
        
        call RemoveLocation( locNext )
    endif
    
    set locNext = PolarProjectionBJ( loc, 150, udg_ThrowTurtleAngle[nPlayerIndex] )
    call RemoveLocation( loc )
    call SetUnitPositionLoc( udg_TurtleThrown[nPlayerIndex], locNext )

    set grp = GetUnitsInRangeOfLocAll( 200, locNext )
    call RemoveLocation( locNext )

    loop
        set uCart = FirstOfGroup( grp )
        exitwhen uCart == null

        if ( IsItACart( GetUnitTypeId( uCart ) ) and IsUnitAliveBJ( uCart ) and IsPlayerEnemyCR( Player(nPlayerIndex), GetOwningPlayer( uCart ) ) ) then
            call TurtleBump( nPlayerIndex, uCart )
        endif

        call GroupRemoveUnit( grp, uCart )
    endloop

    call DestroyGroup( grp )
    set udg_TurtleThrowTickle[nPlayerIndex] = udg_TurtleThrowTickle[nPlayerIndex] + 1
endfunction

function SummonGhost takes unit uCart returns nothing
    local unit uAssistant = null
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )

    if (nPlayerIndex < 0 ) then
        return
    endif

    set uAssistant = CreateAssistant1( nPlayerIndex, 2 )
    call IssueTargetOrder( uAssistant, "invisibility", uCart )
endfunction

function UseRepairKit takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local real rHP = GetUnitState( uCart, UNIT_STATE_LIFE )
    local real rHPMax = GetUnitState( uCart, UNIT_STATE_MAX_LIFE )
    local effect effHeal = null

    if (nPlayerIndex < 0 ) then
        return
    endif

    set udg_GunAmmo[nPlayerIndex] = udg_GunAmmo[nPlayerIndex] + 25
    if ( udg_GunAmmo[nPlayerIndex] > udg_AMMO_MAX ) then
        set udg_GunAmmo[nPlayerIndex] = udg_AMMO_MAX
    endif

    set rHP = rHP + 150
    if ( rHP > rHPMax ) then
        set rHP = rHPMax
    endif

    call SetUnitState( uCart, UNIT_STATE_LIFE, rHP )
    set effHeal = AddSpecialEffectTarget( "Abilities\\Spells\\Items\\AIem\\AIemTarget.mdl", uCart, "origin" )
    call PolledWait( 0.1 )
    call DestroyEffect( effHeal )
endfunction

function BlizzardCartFilter takes nothing returns boolean
    local unit u = GetFilterUnit()
    return IsItACart( GetUnitTypeId(u) ) and IsUnitAliveBJ( u ) and IsCartVulnerable( u )
endfunction

function DoBlizzard takes integer nPlayerIndex returns nothing
    local real rRadius
    local real rAngle
    local location locCart
    local location locCenter
    local location loc
    local effect eff
    local group g
    local unit uCart
    local integer nPlayerIndexTarget
    local real rHP

    if ( udg_BlizzardingFlag[nPlayerIndex] < 0 ) then
        return
    endif

    if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) or udg_GameGoingStatus[nPlayerIndex] != udg_GAME_DRIVING ) then
        set udg_BlizzardingFlag[nPlayerIndex] = -1
        if ( udg_BlizzardSoundIsPlaying[nPlayerIndex] ) then
            set udg_BlizzardSoundIsPlaying[nPlayerIndex] = false
            call StopSound( udg_BlizzardSound[nPlayerIndex], false, true )
        endif
        return
    endif

    if ( not udg_BlizzardSoundIsPlaying[nPlayerIndex] ) then
        set udg_BlizzardSoundIsPlaying[nPlayerIndex] = true
        call PlaySoundOnUnitBJ( udg_BlizzardSound[nPlayerIndex], 100, udg_Carts[nPlayerIndex] )
    endif

    set locCart = GetUnitLoc( udg_Carts[nPlayerIndex] )
    set rRadius = udg_Speed[nPlayerIndex] * 5
    set rAngle = GetUnitFacing( udg_Carts[nPlayerIndex] )
    if ( rRadius < 0 ) then
        set rRadius = -rRadius
        set rAngle = rAngle + 180
    endif
    set locCenter = PolarProjectionBJ( locCart, rRadius, rAngle )
    call RemoveLocation( locCart )

    set rRadius = GetRandomReal( 50., 500. )
    set rAngle = GetRandomReal( 0., 359. )
    set loc = PolarProjectionBJ( locCenter, rRadius, rAngle )

    set eff = AddSpecialEffectLoc( "Abilities\\Spells\\Human\\Blizzard\\BlizzardTarget.mdl", loc )
    call DestroyEffect( eff )

    set g = GetUnitsInRangeOfLocMatching( 500, locCenter, Condition(function BlizzardCartFilter) )
    call RemoveLocation( loc )
    loop
        set uCart = FirstOfGroup( g )
        exitwhen uCart == null

        set nPlayerIndexTarget = GetPlayerIndex( GetOwningPlayer(uCart) )
        if ( nPlayerIndexTarget != nPlayerIndex ) then
            set rHP = GetUnitState( udg_Carts[nPlayerIndexTarget], UNIT_STATE_LIFE )
            if ( rHP <= 2 ) then
                call KillUnit( udg_Carts[nPlayerIndexTarget] )
            else
                call SetUnitState( udg_Carts[nPlayerIndexTarget], UNIT_STATE_LIFE, rHP - 2 )
            endif
        endif

        call GroupRemoveUnit( g, uCart )
    endloop
    call DestroyGroup( g )
    call RemoveLocation( locCenter )
endfunction

function Blizzard takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local integer nBlizzardingFlag

    if (nPlayerIndex < 0 ) then
        return
    endif

    set udg_BlizzardingFlag[nPlayerIndex] = udg_BlizzardingFlag[nPlayerIndex] + 1
    set nBlizzardingFlag = udg_BlizzardingFlag[nPlayerIndex]
    call PolledWait( 8 )
    if ( nBlizzardingFlag == udg_BlizzardingFlag[nPlayerIndex] ) then
        set udg_BlizzardingFlag[nPlayerIndex] = -1
        if ( udg_BlizzardSoundIsPlaying[nPlayerIndex] ) then
            set udg_BlizzardSoundIsPlaying[nPlayerIndex] = false
            call StopSound( udg_BlizzardSound[nPlayerIndex], false, true )
        endif
    endif
endfunction

function CarrionSwarm takes unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )

    local location loc = null
    local location locSource = null
    local location locTarget = null
    local unit uCaster = null
    local real rAngle = 0
    local real rSpeed

    if (nPlayerIndex < 0 ) then
        return
    endif

    set loc = GetUnitLoc( uCart )
    set rAngle = GetUnitFacing( uCart )
    set locSource = PolarProjectionBJ( loc, 20, rAngle + 180 )
    call RemoveLocation( loc )

    set uCaster = CreateUnit( Player(nPlayerIndex), 'n00O', GetLocationX(locSource), GetLocationY(locSource), rAngle )
    call SetUnitPathing( uCaster, false )

    set locTarget = PolarProjectionBJ( locSource, 50, rAngle )
    call RemoveLocation( locSource )
    call IssuePointOrder( uCaster, "carrionswarm", GetLocationX(locTarget), GetLocationY(locTarget) )
    call RemoveLocation( locTarget )

    call PolledWait(3)
    call RemoveUnit( uCaster )
endfunction

function UnitCatchGunFire takes location locGun, real rAngleGun, location locTarget, location locVH returns boolean
    local boolean bContinue = false
    local real rAngle = AngleBetweenPoints( locGun, locTarget )
    local real rAngleDif = RAbsBJ( StandardAngle( rAngle - rAngleGun ) )

    local real rDis
    local real rDisH
    local real rDisV

    if ( rAngleDif > -90 and rAngleDif < 90 ) then
        set rDis = DistanceBetweenPoints( locGun, locTarget )
        set rDisH = rDis * Sin(rAngleDif * bj_DEGTORAD)
        if ( rDisH < 100 ) then
            set rDisV = rDis * Cos(rAngleDif * bj_DEGTORAD)
            if ( rDisV <= 1500 ) then
                set bContinue = true
            endif
        endif
    endif

    if ( bContinue ) then
        set bContinue = false
        if ( GetLocationY( locVH ) < 0 or rDisV < GetLocationY( locVH ) ) then    //First one
            set bContinue = true
        elseif ( rDisV == GetLocationY( locVH ) and ( GetLocationX( locVH ) < 0 or rDisH < GetLocationX( locVH ) ) ) then
            set bContinue = true
        endif
    endif

    if ( bContinue ) then
        call MoveLocation( locVH, rDisH, rDisV )
    endif

    return bContinue
endfunction

function CheckSheepFilter takes nothing returns boolean
    return ( GetUnitTypeId( GetFilterUnit() ) == 'nshe' or GetUnitTypeId( GetFilterUnit() ) == 'n00H' ) and IsUnitAliveBJ( GetFilterUnit() )
endfunction

function CheckWagonFilter takes nothing returns boolean
    return ( GetUnitTypeId( GetFilterUnit() ) == 'h00K' or GetUnitTypeId( GetFilterUnit() ) == 'h003' or GetUnitTypeId( GetFilterUnit() ) == 'h005' or GetUnitTypeId( GetFilterUnit() ) == 'h006' ) and IsUnitAliveBJ( GetFilterUnit() )
endfunction

function BigGun takes unit uCart returns nothing
    local integer nPlayerIndex = 0
    local integer nPlayerSelf = -1
    local integer nPlayerTarget = -1
    local real rAngle = 0

    local boolean bContinue = false

    local location loc = null
    local location loc1 = null
    local location locVH = Location( -1, -1 )

    local group g = null
    local unit uSheep
    local unit uSheepTarget
    local unit uWagon

    local effect effShoot = null
    local real rHP = 0
    local integer nLoopIndex = 0

    set nPlayerSelf = GetPlayerIndex( GetOwningPlayer(uCart) )
    if ( nPlayerSelf < 0 ) then
        return
    endif

    if ( udg_GunAmmo[nPlayerSelf] <= 0 ) then
        if ( not udg_AmmoWarning[nPlayerSelf] ) then
            set udg_AmmoWarning[nPlayerSelf] = true
            call ShowWarningMsg( Player(nPlayerSelf), "Out of Ammo!!! Reload ammo at pit stop." )
            call PolledWait( 5 )
            set udg_AmmoWarning[nPlayerSelf] = false
        endif
        return
    endif
    set udg_GunAmmo[nPlayerSelf] = udg_GunAmmo[nPlayerSelf] - 1
    set udg_GunAttackTick[nPlayerSelf] = 0

    set loc = GetUnitLoc( uCart )
    set rAngle = GetUnitFacing( uCart )
    set nLoopIndex = 0
    call StopSound( udg_BigGunSound[nPlayerSelf], false, false )
    call PlaySoundOnUnitBJ( udg_BigGunSound[nPlayerSelf], 100, uCart )
//    loop
//        exitwhen nLoopIndex >= 4

//        set loc1 = PolarProjectionBJ( loc, 350 + RealSpeed(udg_Speed[nPlayerSelf]) * 5 + nLoopIndex * 50, rAngle )
//        set effShoot = AddSpecialEffectLoc( "Abilities\\Weapons\\GyroCopter\\GyroCopterImpact.mdl", loc1 )
//        call RemoveLocation( loc1 )
//        call DestroyEffect( effShoot )
            
//        set nLoopIndex = nLoopIndex + 1
//    endloop

    //Killing Sheep
    set g = GetUnitsInRangeOfLocMatching( 1500, loc, Condition(function CheckSheepFilter) )
    loop
        set uSheep = FirstOfGroup( g )
        exitwhen uSheep == null
        
        set loc1 = GetUnitLoc( uSheep )
        if ( UnitCatchGunFire( loc, rAngle, loc1, locVH ) ) then
            call KillUnit( uSheep )
        endif
        call RemoveLocation( loc1 )
        call GroupRemoveUnit( g, uSheep )
    endloop
    call DestroyGroup( g )

    //Killing Wagon
    set g = GetUnitsInRangeOfLocMatching( 1520, loc, Condition(function CheckWagonFilter) )
    loop
        set uWagon = FirstOfGroup( g )
        exitwhen uWagon == null
        
        set loc1 = GetUnitLoc( uWagon )
        if ( UnitCatchGunFire( loc, rAngle, loc1, locVH ) ) then
            set rHP = GetUnitState( uWagon, UNIT_STATE_LIFE )
            if ( rHP <= 25 ) then
                call KillUnit( uWagon )
            else
                call SetUnitState( uWagon, UNIT_STATE_LIFE, rHP - 25 )
                set effShoot = AddSpecialEffectTarget( "Abilities\\Weapons\\GyroCopter\\GyroCopterImpact.mdl", uWagon, "chest" )
                call DestroyEffect( effShoot )
                set effShoot = AddSpecialEffectTarget( "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl", uWagon, "chest" )
                call DestroyEffect( effShoot )
            endif
        endif
        call RemoveLocation( loc1 )
        call GroupRemoveUnit( g, uWagon )
    endloop
    call DestroyGroup( g )

    call MoveLocation( locVH, -1, -1 )

    loop
        exitwhen nPlayerIndex >= 8

        set bContinue = false
        if ( nPlayerIndex != nPlayerSelf and udg_Carts[nPlayerIndex] != null and IsUnitAliveBJ( udg_Carts[nPlayerIndex] ) ) then
            set bContinue = true
        endif

        if ( bContinue and IsCartVulnerable( udg_Carts[nPlayerIndex] ) ) then
            set bContinue = false
            set loc1 = GetUnitLoc( udg_Carts[nPlayerIndex] )
            set bContinue = UnitCatchGunFire( loc, rAngle, loc1, locVH )
            call RemoveLocation( loc1 )
            if ( bContinue ) then
                set nPlayerTarget = nPlayerIndex
            endif
        endif       

        set nPlayerIndex = nPlayerIndex + 1
    endloop

    if ( nPlayerTarget >= 0 ) then
        set rHP = GetUnitState( udg_Carts[nPlayerTarget], UNIT_STATE_LIFE )
        if ( rHP <= 25 ) then
            call KillUnit( udg_Carts[nPlayerTarget] )
        else
            call SetUnitState( udg_Carts[nPlayerTarget], UNIT_STATE_LIFE, rHP - 25 )
            set effShoot = AddSpecialEffectTarget( "Abilities\\Weapons\\GyroCopter\\GyroCopterImpact.mdl", udg_Carts[nPlayerTarget], "chest" )
            call DestroyEffect( effShoot )
            set effShoot = AddSpecialEffectTarget( "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl", udg_Carts[nPlayerTarget], "chest" )
            call DestroyEffect( effShoot )
        endif
    else
        set loc1 = PolarProjectionBJ( loc, 1450, rAngle )
        set effShoot = AddSpecialEffectLoc( "Abilities\\Weapons\\GyroCopter\\GyroCopterImpact.mdl", loc1 )
        call RemoveLocation( loc1 )
        call DestroyEffect( effShoot )
    endif

    call RemoveLocation( loc )
    call RemoveLocation( locVH )
endfunction

function CartUseSpell takes unit uCart, integer nSpellId returns nothing
    local integer nPlayerIndex = 0
    local integer nIndex = 0
    local integer nSlot = 0
    local sound sndHonk = null
    local integer nHonkIndex

    set nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( nSpellId == 'A01X' ) then     //honk
        set nHonkIndex = GetModelHonk( udg_PlayerModels[nPlayerIndex] )
        set sndHonk = CreateHonkSound( nHonkIndex )
        call PlaySoundOnUnitBJ( sndHonk, 100, udg_Carts[nPlayerIndex] )
        call KillSoundWhenDone(sndHonk)
        call PolledWait( 0.1 )
        set udg_CartAnimIndex[nPlayerIndex] = udg_ANIM_NONE
        return
    endif

    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_DRIVING ) then
        return
    endif

    set nIndex = GetPowerUpTypeIndex( nSpellId )

    if ( nIndex < 0 ) then
        if ( nSpellId == 'A003' ) then
            if ( udg_PlayerCameraIndex[nPlayerIndex] == 4 ) then
                set udg_PlayerCameraIndex[nPlayerIndex] = 0
            else
                set udg_PlayerCameraIndex[nPlayerIndex] = udg_PlayerCameraIndex[nPlayerIndex] + 1
            endif
        elseif ( nSpellId == 'A01U' ) then   //OKay, machine gun then
            call BigGun( uCart )
        endif
    endif

    call PolledWait( 0.1 )

    set udg_CartAnimIndex[nPlayerIndex] = udg_ANIM_NONE
    if ( nIndex < 0 ) then
        return
    endif

    if ( GetUnitAbilityLevel( uCart, nSpellId ) <= 0 ) then
        return
    endif

    set nSlot = GetPowerUpTypeSlot( nSpellId )
    call UnitRemoveAbility( uCart, nSpellId )
    call RemoveCartSlotPowerUp( nPlayerIndex, nSlot )
    call ShowDebugMsg( "how many left? " + I2S(udg_CartItemNum[nPlayerIndex]) )

    if ( udg_PowerUpNames[nIndex] == "|cff80ff80Engine Boost|r" ) then
        call EatMushroom( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Repair Kit|r" ) then
        call UseRepairKit( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Blaze|r" ) then
        call UseBlaze( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Ethereal Cloak|r" ) then
        call SummonGhost( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Mine|r" ) then
        call LayMine( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Sheepedo|r" ) then
        call ThrowTurtle( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Web Trap|r" ) then
        call SetupTrap( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Specklefrogg's Rocket|r" ) then
        call IHateTheLeadingCart( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Uther's Blessing|r" ) then
        call UseStar( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Electric Justice|r" ) then
        call Lightning( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Blizzard|r" ) then
        call Blizzard( uCart )
    elseif ( udg_PowerUpNames[nIndex] == "|cff80ff80Carrion Swarm|r" ) then
        call CarrionSwarm( uCart )
    endif
endfunction

//===========================================================================
function InitTrig_Abilities_Functions takes nothing returns nothing
endfunction
//===========================================================================
// Trigger: Cart Cast Spell
//===========================================================================
function Trig_Cart_Cast_Spell_Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Cart_Cast_Spell_Conditions takes nothing returns boolean
    if ( not Trig_Cart_Cast_Spell_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Cart_Cast_Spell_Actions takes nothing returns nothing
    call CartUseSpell( GetTriggerUnit(), GetSpellAbilityId() )
endfunction

//===========================================================================
function InitTrig_Cart_Cast_Spell takes nothing returns nothing
    set gg_trg_Cart_Cast_Spell = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Cart_Cast_Spell, EVENT_PLAYER_UNIT_SPELL_CAST )
    call TriggerAddCondition( gg_trg_Cart_Cast_Spell, Condition( function Trig_Cart_Cast_Spell_Conditions ) )
    call TriggerAddAction( gg_trg_Cart_Cast_Spell, function Trig_Cart_Cast_Spell_Actions )
endfunction

//===========================================================================
// Trigger: Mine Exploded
//===========================================================================
function Trig_Mine_Exploded_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Exploded_Actions takes nothing returns nothing
    call MineExplorded( GetDyingUnit() )
endfunction

//===========================================================================
function InitTrig_Mine_Exploded takes nothing returns nothing
    set gg_trg_Mine_Exploded = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Mine_Exploded, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Mine_Exploded, Condition( function Trig_Mine_Exploded_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Exploded, function Trig_Mine_Exploded_Actions )
endfunction

//===========================================================================
// Trigger: Trap Expired
//===========================================================================
function Trig_Trap_Expired_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Trap_Expired_Actions takes nothing returns nothing
    call TrapExpired( GetDyingUnit() )
endfunction

//===========================================================================
function InitTrig_Trap_Expired takes nothing returns nothing
    set gg_trg_Trap_Expired = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Trap_Expired, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Trap_Expired, Condition( function Trig_Trap_Expired_Conditions ) )
    call TriggerAddAction( gg_trg_Trap_Expired, function Trig_Trap_Expired_Actions )
endfunction

//===========================================================================
// Trigger: Throw Turtle Timer
//===========================================================================
function Trig_Throw_Turtle_Timer_Actions takes nothing returns nothing
    local integer nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= 8
        exitwhen GetExpiredTimer() == udg_ThrowTurtleTimer[nPlayerIndex]
        set nPlayerIndex = nPlayerIndex + 1
    endloop
    if ( nPlayerIndex >= 8 ) then
        return
    endif
    call ThrowTurtleGoGoGo( nPlayerIndex )
endfunction

//===========================================================================
function InitTrig_Throw_Turtle_Timer takes nothing returns nothing
    set gg_trg_Throw_Turtle_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[0] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[1] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[2] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[3] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[4] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[5] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[6] )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Throw_Turtle_Timer, udg_ThrowTurtleTimer[7] )
    call TriggerAddAction( gg_trg_Throw_Turtle_Timer, function Trig_Throw_Turtle_Timer_Actions )
endfunction

//===========================================================================
// Trigger: PowerUp Respawn
//===========================================================================
function Trig_PowerUp_Respawn_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PowerUp_Respawn_Actions takes nothing returns nothing
    local unit uDumy = GetDyingUnit()
    local integer nType = GetUnitUserData( uDumy )
    local location loc = GetUnitLoc( uDumy )
    call PolledWait( 10 )
    call CreateUnitAtLoc( udg_NPC, nType, loc, 0 )
    call RemoveLocation( loc )
endfunction

//===========================================================================
function InitTrig_PowerUp_Respawn takes nothing returns nothing
    set gg_trg_PowerUp_Respawn = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_PowerUp_Respawn, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_PowerUp_Respawn, Condition( function Trig_PowerUp_Respawn_Conditions ) )
    call TriggerAddAction( gg_trg_PowerUp_Respawn, function Trig_PowerUp_Respawn_Actions )
endfunction

//===========================================================================
// Trigger: Sheep Respawn 1
//===========================================================================
function Trig_Sheep_Respawn_1_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'nshe' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sheep_Respawn_1_Actions takes nothing returns nothing
    local location loc = GetUnitLoc( GetDyingUnit() )
    local integer nType = GetUnitTypeId( GetDyingUnit() )
    call PolledWait( 10 )
    call CreateUnitAtLoc( udg_NPC, nType, loc, I2R(GetRandomInt(0, 359)) )
    call RemoveLocation( loc )
endfunction

//===========================================================================
function InitTrig_Sheep_Respawn_1 takes nothing returns nothing
    set gg_trg_Sheep_Respawn_1 = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Sheep_Respawn_1, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Sheep_Respawn_1, Condition( function Trig_Sheep_Respawn_1_Conditions ) )
    call TriggerAddAction( gg_trg_Sheep_Respawn_1, function Trig_Sheep_Respawn_1_Actions )
endfunction

//===========================================================================
// Trigger: Sheep Respawn 2
//===========================================================================
function Trig_Sheep_Respawn_2_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sheep_Respawn_2_Actions takes nothing returns nothing
    local location loc = GetUnitLoc( GetDyingUnit() )
    local integer nType = GetUnitTypeId( GetDyingUnit() )
    call CreateUnitAtLoc( udg_NPC, nType, loc, I2R(GetRandomInt(0, 359)) )
    call RemoveLocation( loc )
endfunction

//===========================================================================
function InitTrig_Sheep_Respawn_2 takes nothing returns nothing
    set gg_trg_Sheep_Respawn_2 = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Sheep_Respawn_2, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Sheep_Respawn_2, Condition( function Trig_Sheep_Respawn_2_Conditions ) )
    call TriggerAddAction( gg_trg_Sheep_Respawn_2, function Trig_Sheep_Respawn_2_Actions )
endfunction

//===========================================================================
// Trigger: Snowman Respawn
//===========================================================================
function Trig_Snowman_Respawn_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Snowman_Respawn_Actions takes nothing returns nothing
    local location loc = GetUnitLoc( GetDyingUnit() )
    local real rDir = GetUnitFacing( GetDyingUnit() )
    call RemoveUnit( GetDyingUnit() )
    call PolledWait( 10 )
    call CreateUnitAtLoc( udg_NPC, 'n00L', loc, rDir )
    call RemoveLocation( loc )
endfunction

//===========================================================================
function InitTrig_Snowman_Respawn takes nothing returns nothing
    set gg_trg_Snowman_Respawn = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Snowman_Respawn, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Snowman_Respawn, Condition( function Trig_Snowman_Respawn_Conditions ) )
    call TriggerAddAction( gg_trg_Snowman_Respawn, function Trig_Snowman_Respawn_Actions )
endfunction

//===========================================================================
// Trigger: Ice Trunk Respawn
//===========================================================================
function Trig_Ice_Trunk_Respawn_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'n00M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Ice_Trunk_Respawn_Actions takes nothing returns nothing
    local location loc = GetUnitLoc( GetDyingUnit() )
    if ( not RectContainsLoc( gg_rct_IceTrunkArea, loc ) ) then
        call RemoveLocation( loc )
        set loc = GetRectCenter( gg_rct_IceTrunkArea )
    endif
    call RemoveUnit( GetDyingUnit() )
    call PolledWait( 10 )
    call CreateIceTrunk( loc )
    call RemoveLocation( loc )
endfunction

//===========================================================================
function InitTrig_Ice_Trunk_Respawn takes nothing returns nothing
    set gg_trg_Ice_Trunk_Respawn = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Ice_Trunk_Respawn, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Ice_Trunk_Respawn, Condition( function Trig_Ice_Trunk_Respawn_Conditions ) )
    call TriggerAddAction( gg_trg_Ice_Trunk_Respawn, function Trig_Ice_Trunk_Respawn_Actions )
endfunction

//===========================================================================
// Trigger: Ice Trunk Flee
//===========================================================================
function Trig_Ice_Trunk_Flee_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n00M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Ice_Trunk_Flee_Actions takes nothing returns nothing
    call IssuePointOrder( GetTriggerUnit(), "move", GetRectCenterX( gg_rct_IceTrunkArea ), GetRectCenterY( gg_rct_IceTrunkArea ) )
endfunction

//===========================================================================
function InitTrig_Ice_Trunk_Flee takes nothing returns nothing
    set gg_trg_Ice_Trunk_Flee = CreateTrigger(  )
    call TriggerRegisterLeaveRectSimple( gg_trg_Ice_Trunk_Flee, gg_rct_IceTrunkArea )
    call TriggerAddCondition( gg_trg_Ice_Trunk_Flee, Condition( function Trig_Ice_Trunk_Flee_Conditions ) )
    call TriggerAddAction( gg_trg_Ice_Trunk_Flee, function Trig_Ice_Trunk_Flee_Actions )
endfunction

//===========================================================================
// Trigger: Driving Functions
//===========================================================================
function CalcTurnSpeed takes integer nModel, real nCurTurnSpeed, integer nTurning, real rSpeed, integer nAcceleration returns real
    if ( rSpeed == 0 ) then
        return 0.
    endif

    if ( nTurning == udg_TURNING_LEFT ) then
        if ( rSpeed >= 0 ) then
            return GetModelTurnRate( nModel )
        else
            return -GetModelTurnRate( nModel )
        endif
    elseif ( nTurning == udg_TURNING_RIGHT ) then
        if ( rSpeed >= 0 ) then
            return -GetModelTurnRate( nModel )
        else
            return GetModelTurnRate( nModel )
        endif
    endif

    return 0.
endfunction

function CalcDirection takes real rCurAngle, real rCurTurnSpeed returns real
    return rCurAngle + rCurTurnSpeed * 3
endfunction

function CalcDrag takes integer nModel, real rSpeed, real rTurnSpeed returns real
    if ( rSpeed == 0 ) then
        return 0.0
    endif

    if ( rTurnSpeed < 0 ) then
        set rTurnSpeed = -rTurnSpeed
    endif

    if ( rSpeed < 0 ) then
        return -0.5 + rSpeed * ( GetModelMassDrag(nModel) - rTurnSpeed * 0.003 )
    else
        return 0.5 + rSpeed * ( GetModelMassDrag(nModel) + rTurnSpeed * 0.003 )
    endif
endfunction

function GetModelMaxSpeedAfterBuff takes integer nPlayerIndex, location locMax returns boolean
    local boolean bInjured = false
    local real rMaxSpeed = GetModelMaxSpeed( udg_PlayerModels[nPlayerIndex] )

    if ( UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Bspe' ) ) then   //Speed Bonus
        set rMaxSpeed = rMaxSpeed * 1.5
    endif

    if ( UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'B008' ) ) then   //Pit Stop
        set rMaxSpeed = rMaxSpeed * 1.2
    endif

    if ( UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'B005' ) ) then   //Invulnerable
        set rMaxSpeed = rMaxSpeed * 1.3
    endif

    if ( UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Bslo' ) or UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Basl' ) or UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'B004' ) ) then
        set rMaxSpeed = rMaxSpeed / 2
    endif

    if ( GetUnitLifePercent( udg_Carts[nPlayerIndex] ) <= 33 ) then
        set rMaxSpeed = rMaxSpeed * 3 / 4
        set bInjured = true
    endif

    call MoveLocation( locMax, rMaxSpeed, -rMaxSpeed / 3 )
    return bInjured
endfunction

function CalcCurSpeed takes integer nPlayerIndex returns real
    local location loc = null
    local real rSpeed = 0
    local real rAngle = 0
    local real rAngle1 = 0
    local real r
    local location locMax
    local boolean bSlide = false

    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_DRIVING ) then
        set rSpeed = udg_Speed[nPlayerIndex]
    else
        set loc = GetUnitLoc( udg_Carts[nPlayerIndex] )
        set rSpeed = FakeSpeed( DistanceBetweenPoints( loc, udg_CartPrePos[nPlayerIndex] ) )
        if ( rSpeed != 0 ) then
            set rAngle = AngleBetweenPoints( udg_CartPrePos[nPlayerIndex], loc )
            set rAngle1 = udg_Angle[nPlayerIndex]
            if ( udg_Speed[nPlayerIndex] < 0 ) then
                set rAngle1 = rAngle1 + 180
            endif
            set r = StandardAngle( rAngle1 - rAngle )
            if ( r > 2 or r < -2 ) then
                set bSlide = true
            endif

            if ( CosBJ( rAngle - udg_Angle[nPlayerIndex] ) < 0 ) then
                set rSpeed = -rSpeed
            endif
        endif
        call RemoveLocation( loc )

        set locMax = Location( 0, 0 )
        call GetModelMaxSpeedAfterBuff( nPlayerIndex, locMax )
        if ( bSlide ) then
            call MoveLocation( locMax, GetLocationX(locMax) / 3, GetLocationY(locMax) / 3 )
        endif
        if ( rSpeed > GetLocationX(locMax) ) then
            set rSpeed = GetLocationX(locMax)
        elseif ( rSpeed < GetLocationY(locMax) ) then
            set rSpeed = GetLocationY(locMax)
        endif
        call RemoveLocation( locMax )
    endif

    return rSpeed
endfunction

function CalcSpeed takes integer nPlayerIndex, real rCurSpeed, integer nAcceleration, real rCurTurnSpeed returns real
    local real rSpeed = rCurSpeed
    local integer nModel = udg_PlayerModels[nPlayerIndex]

    local location locMax

    if ( ( rSpeed < 0 and nAcceleration > 0 ) or ( rSpeed > 0 and nAcceleration < 0 ) ) then
        set nAcceleration = nAcceleration * 2
    endif
    set rSpeed = rSpeed + nAcceleration * GetModelAcceRate(nModel)

    if ( rSpeed < 0 ) then
        set rSpeed = rSpeed - CalcDrag( nModel, rCurSpeed, rCurTurnSpeed )
        if ( rSpeed > 0 ) then
            set rSpeed = 0
        endif
    elseif ( rSpeed > 0 ) then
        set rSpeed = rSpeed - CalcDrag( nModel, rCurSpeed, rCurTurnSpeed )
        if ( rSpeed < 0 ) then
            set rSpeed = 0
        endif
    endif

    set locMax = Location( 0, 0 )
    call GetModelMaxSpeedAfterBuff( nPlayerIndex, locMax )
    if ( rSpeed > GetLocationX(locMax) ) then
        set rSpeed = GetLocationX(locMax)
    elseif ( rSpeed < GetLocationY(locMax) ) then
        set rSpeed = GetLocationY(locMax)
    endif
    call RemoveLocation( locMax )

    return rSpeed
endfunction

function CalcFinishingSpeed takes integer nModel, real rCurSpeed returns real
    if ( rCurSpeed < 10 ) then
        return 0
    else
        return rCurSpeed * 19 / 20
    endif
endfunction

function IsValidLocForVehicle takes location loc returns boolean
    local boolean bValid = true
    local integer nIndex = 0

    if ( GetTerrainCliffLevel( GetLocationX( loc ), GetLocationY( loc ) ) != 4 ) then
        set bValid = false
    else
        set nIndex = 0
        loop
            exitwhen nIndex >= udg_ProhibitAreaNum

            if ( RectContainsLoc( udg_ProhibitAreas[nIndex], loc ) ) then
                set bValid = false
                exitwhen true
            endif
        
            set nIndex = nIndex + 1
        endloop
    endif

    return bValid
endfunction

function CaughtInTornado takes integer nPlayerIndex returns boolean
    if ( not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'Btsp' ) ) then
        if ( udg_CaughtInTornado[nPlayerIndex] ) then
            set udg_CaughtInTornado[nPlayerIndex] = false
            set udg_Angle[nPlayerIndex] = udg_PlaceCheckPtDir[udg_PlaceChkPtCur[nPlayerIndex]]
            call SetUnitFacing( udg_Carts[nPlayerIndex], udg_Angle[nPlayerIndex] )
            call SetUnitPosition( udg_Carts[nPlayerIndex], GetUnitX(udg_Carts[nPlayerIndex]), GetUnitY(udg_Carts[nPlayerIndex]))
        endif
        return false
    endif

    // Haha, caught in tornado
    set udg_CaughtInTornado[nPlayerIndex] = true
    set udg_Speed[nPlayerIndex] = 0
    call SetUnitTimeScale( udg_Carts[nPlayerIndex], 1 )
    set udg_Angle[nPlayerIndex] = udg_Angle[nPlayerIndex] + 28

    return true
endfunction

function FrozenByIce takes integer nPlayerIndex returns boolean
    if ( not UnitHasBuffBJ(udg_Carts[nPlayerIndex], 'B007' ) ) then
        if ( udg_Frozen[nPlayerIndex] ) then
            if ( udg_FrozenEffect[nPlayerIndex] != null ) then
                call DestroyEffect( udg_FrozenEffect[nPlayerIndex] )
                set udg_FrozenEffect[nPlayerIndex] = null
            endif
            set udg_Frozen[nPlayerIndex] = false
            call SetCartInvulnerable( udg_Carts[nPlayerIndex], false )
            set udg_IceTrunkCooldown[nPlayerIndex] = 0
        endif
        return false
    endif

    // Haha, Frozen
    set udg_Frozen[nPlayerIndex] = true
    set udg_Speed[nPlayerIndex] = 0
    call SetUnitTimeScale( udg_Carts[nPlayerIndex], 1 )
    call SetCartInvulnerable( udg_Carts[nPlayerIndex], true )

    if ( udg_FrozenEffect[nPlayerIndex] == null ) then
        call PlaySoundOnUnitBJ( gg_snd_FreezingBreathTarget1, 100, udg_Carts[nPlayerIndex] )
        set udg_FrozenEffect[nPlayerIndex] = AddSpecialEffectTarget( "Abilities\\Spells\\Undead\\FreezingBreath\\FreezingBreathTargetArt.mdl", udg_Carts[nPlayerIndex], "origin" )
    endif

    return true
endfunction

function LostControl takes integer nPlayerIndex returns boolean
    local real rAngle = 0

    local location loc = null
    local location locPre = null
    local real rSpeed = 0
    local real scale = 0

    if ( not IsCartSpinning(udg_Carts[nPlayerIndex] ) ) then
        if ( udg_LostControl[nPlayerIndex] ) then
            if ( udg_LostControlTickle[nPlayerIndex] < 20 ) then
                set udg_Angle[nPlayerIndex] = udg_PlaceCheckPtDir[udg_PlaceChkPtCur[nPlayerIndex]]
                call SetUnitPosition( udg_Carts[nPlayerIndex], GetUnitX(udg_Carts[nPlayerIndex]), GetUnitY(udg_Carts[nPlayerIndex]) )
                call SetUnitFacingTimed( udg_Carts[nPlayerIndex], udg_Angle[nPlayerIndex], 0 )
                set udg_LostControlTickle[nPlayerIndex] = udg_LostControlTickle[nPlayerIndex] + 1
                return true
            endif
            set udg_LostControl[nPlayerIndex] = false
        endif
        return false
    endif

    set udg_LostControl[nPlayerIndex] = true
    set udg_LostControlTickle[nPlayerIndex] = 0

    set locPre = GetUnitLoc(udg_Carts[nPlayerIndex])
    set udg_Speed[nPlayerIndex] = udg_Speed[nPlayerIndex] * 39 / 40
    set rSpeed = udg_Speed[nPlayerIndex] / 3

    set loc = PolarProjectionBJ( locPre, rSpeed, udg_Angle[nPlayerIndex])
    call RemoveLocation( locPre )

    if ( IsValidLocForVehicle( loc ) ) then
        call SetUnitPositionLoc( udg_Carts[nPlayerIndex], loc )
    endif
    call RemoveLocation( loc )

    set rAngle = GetUnitFacing( udg_Carts[nPlayerIndex] ) + 60
    call SetUnitFacingTimed( udg_Carts[nPlayerIndex], rAngle, 0 )
    call ShowDebugMsg( R2S(rAngle) )

    return true
endfunction

function Move takes integer nPlayerIndex returns nothing
    local location loc = null
    local real rSpeed = 0
    local real scale = 0

    if ( nPlayerIndex < 0 ) then
        return
    endif

    set rSpeed = RealSpeed( udg_Speed[nPlayerIndex] )
    set loc = PolarProjectionBJ( udg_CartPrePos[nPlayerIndex], rSpeed, udg_Angle[nPlayerIndex])

    if ( IsValidLocForVehicle( loc ) ) then
        call SetUnitPositionLoc( udg_Carts[nPlayerIndex], loc )
    else
        call StopCart( nPlayerIndex )
    endif
    call RemoveLocation( loc )

    call SetUnitFacingTimed( udg_Carts[nPlayerIndex], udg_Angle[nPlayerIndex], 0.05 )

    //Check whether the cart are near enough to an item
    if ( udg_TickSlow == 0 ) then
        call CheckItemPick( nPlayerIndex )
    endif

    if ( rSpeed > 0 ) then
        if ( udg_PlayerBlazeFlag[nPlayerIndex] > 0 ) then
            call DoBlaze( nPlayerIndex )
        endif
    endif
endfunction

function DoInjureEffect takes integer nPlayerIndex returns nothing
    if ( udg_Carts[nPlayerIndex] != null and IsUnitAliveBJ( udg_Carts[nPlayerIndex] ) and GetUnitLifePercent( udg_Carts[nPlayerIndex] ) <= 33 ) then
        if ( udg_EffectInjured[nPlayerIndex] == null ) then
            set udg_EffectInjured[nPlayerIndex] = AddSpecialEffectTarget( "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl", udg_Carts[nPlayerIndex], "chest" )
            call ShowWarningMsg( Player(nPlayerIndex), "Your cart loses speed due to damage!" )
        endif
    else
        if ( udg_EffectInjured[nPlayerIndex] != null ) then
            call DestroyEffect( udg_EffectInjured[nPlayerIndex] )
            set udg_EffectInjured[nPlayerIndex] = null
        endif
    endif
endfunction

function DoBrakeLight takes integer nPlayerIndex returns nothing
    local boolean bBrake = false
    local boolean bOn = false
    local integer nBrakeLight = 'A01Y'

    if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_PREPARING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_FINISHING ) then
        set bBrake = true
    elseif ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING ) then
        if ( udg_Accelerating[nPlayerIndex] < 0 ) then
            set bBrake = true
        endif
    endif

    set bOn = GetUnitAbilityLevel( udg_Carts[nPlayerIndex], nBrakeLight ) > 0

    if ( bBrake ) then
        if ( bOn ) then
            return
        else
            call UnitAddAbility( udg_Carts[nPlayerIndex], nBrakeLight )
        endif
    else
        if ( bOn ) then
            call UnitRemoveAbility( udg_Carts[nPlayerIndex], nBrakeLight )
        else
            return
        endif
    endif
endfunction

function RefreshCartAnim takes integer nPlayerIndex returns nothing
    local real rSpeed
    local real rScale
    local integer nAnim

    if ( udg_GameOver ) then
        return
    endif

    if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) ) then
        set udg_CartAnimIndex[nPlayerIndex] = udg_ANIM_NONE
        return
    endif

    if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_FINISHING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_OVER ) then
        if ( udg_CartAnimIndex[nPlayerIndex] != udg_ANIM_VICTORY ) then
            call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimVictoryID( udg_PlayerModels[nPlayerIndex] ) )
            call SetUnitTimeScale( udg_Carts[nPlayerIndex], 1 )
            set udg_CartAnimIndex[nPlayerIndex] = udg_ANIM_VICTORY
        endif

        return
    endif

    if ( udg_GunAttackTick[nPlayerIndex] >= 0 ) then
        set udg_GunAttackTick[nPlayerIndex] = udg_GunAttackTick[nPlayerIndex] + 1
        if ( udg_GunAttackTick[nPlayerIndex] > 5 ) then
            set udg_GunAttackTick[nPlayerIndex] = -1
        endif
    endif

    if ( udg_Speed[nPlayerIndex] == 0) then
        if ( udg_GunAttackTick[nPlayerIndex] < 0 ) then
            set nAnim = udg_ANIM_STAND
        else
            set nAnim = udg_ANIM_STANDATTACK
        endif

        if ( udg_CartAnimIndex[nPlayerIndex] == nAnim ) then
            return
        endif

        set udg_CartAnimIndex[nPlayerIndex] = nAnim
        if ( udg_CartAnimIndex[nPlayerIndex] == udg_ANIM_STAND ) then
            call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimStandID( udg_PlayerModels[nPlayerIndex] ) )
        else
            call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimStandAttackID( udg_PlayerModels[nPlayerIndex] ) )
        endif

        if ( udg_GunAttackTick[nPlayerIndex] < 0 ) then
            call SetUnitTimeScale( udg_Carts[nPlayerIndex], 1 )
        else
            call SetUnitTimeScale( udg_Carts[nPlayerIndex], 5 )
        endif
    else
        if ( udg_GunAttackTick[nPlayerIndex] < 0 ) then
            set nAnim = udg_ANIM_WALK
        else
            set nAnim = udg_ANIM_WALKATTACK
        endif

        if ( udg_CartAnimIndex[nPlayerIndex] != nAnim ) then
            set udg_CartAnimIndex[nPlayerIndex] = nAnim

            if ( udg_CartAnimIndex[nPlayerIndex] == udg_ANIM_WALK ) then
    
            call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimWalkID( udg_PlayerModels[nPlayerIndex] ) )
        
    else
            
    call SetUnitAnimationByIndex( udg_Carts[nPlayerIndex], GetModelAnimWalkAttackID( udg_PlayerModels[nPlayerIndex] ) )
            endif
        endif

        if ( udg_GunAttackTick[nPlayerIndex] < 0 ) then
            set rSpeed = udg_Speed[nPlayerIndex]
            if ( rSpeed < 0 ) then
                set rSpeed = -rSpeed
            endif
            set rScale = rSpeed * 6 / GetModelMaxSpeed(udg_PlayerModels[nPlayerIndex])
            call SetUnitTimeScale( udg_Carts[nPlayerIndex], rScale )
        else
            call SetUnitTimeScale( udg_Carts[nPlayerIndex], 5 )
        endif
    endif
endfunction

function RefreshCartSound takes integer nPlayerIndex returns nothing
    local real rSpeedMax = 0
    local real rSpeedAbs = 0

    if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ(udg_Carts[nPlayerIndex]) ) then
        call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_NONE )
        return
    endif

    set rSpeedAbs = RAbsBJ( udg_Speed[nPlayerIndex] )
    set rSpeedMax = GetModelMaxSpeed( udg_PlayerModels[nPlayerIndex] ) * 4 / 3
    if ( rSpeedAbs < rSpeedMax / 15 ) then
        call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_COAST )
    elseif ( rSpeedAbs <= rSpeedMax / 3 ) then
        call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_GOING1 )
    elseif ( rSpeedAbs <= rSpeedMax * 2 / 3 ) then
        call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_GOING2 )
    else
        call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_GOING3 )
    endif
endfunction

function TurnWheel takes player plPlayer, integer nTurning returns nothing
    local integer nPlayerIndex = -1

    set nPlayerIndex = GetPlayerIndex(plPlayer)
    if ( nPlayerIndex < 0 ) then
        return
    endif

    set udg_Turning[nPlayerIndex] = nTurning
endfunction

function ReleaseWheel takes player plPlayer, integer nTurning returns nothing
    local integer nPlayerIndex = GetPlayerIndex(plPlayer)
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Turning[nPlayerIndex] == nTurning ) then
        set udg_Turning[nPlayerIndex] = udg_TURNING_NOTURN
    endif
endfunction

function Accelerate takes player plPlayer, integer nAccelerating returns nothing
    local integer nPlayerIndex = GetPlayerIndex(plPlayer)
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Accelerating[nPlayerIndex] != udg_ACCELERATE_COAST ) then
        return
    endif

    set udg_Accelerating[nPlayerIndex] = nAccelerating
endfunction

function Coast takes player plPlayer, integer nAccelerating returns nothing
    local integer nPlayerIndex = GetPlayerIndex(plPlayer)
    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Accelerating[nPlayerIndex] != nAccelerating ) then
        return
    endif

    set udg_Accelerating[nPlayerIndex] = udg_ACCELERATE_COAST
endfunction

function GiveMeNewCart takes integer nPlayerIndex, location loc returns unit
    local location loc1 = null
    local location loc2 = null
    local unit uPlane = null
    local real rAngle = 0
    local real rDis = 0
    local unit uCartFalling = null
    local real rHeight = 400
    local real rScale = 0
    local integer nIndex = 0

    set loc1 = Location( GetLocationX(loc), GetLocationY(loc) )
    set rAngle = udg_Angle[nPlayerIndex] - 45
    set loc2 = PolarProjectionBJ( loc1, 1200, rAngle )
    set uPlane = CreateUnitAtLoc( udg_NPC, 'h00I', loc2, rAngle + 180 )
    call RemoveLocation( loc2 )
    call SetUnitPathing( uPlane, false )

    call IssuePointOrderLoc( uPlane, "move", loc1 )
    //call SetUnitFlyHeight( uPlane, 300, 5000 )
    call SetUnitFlyHeight( uPlane, 500, 60 )
    call PolledWait( 2 )
   
    loop
        set loc2 = GetUnitLoc( uPlane )
        set rDis = DistanceBetweenPoints( loc1, loc2 )
        call RemoveLocation( loc2 )
        if ( rDis < 20 ) then
            exitwhen true
        endif

        call PolledWait( 0.1 )
    endloop

    call PolledWait( 0.2 )
 
    set loc2 = PolarProjectionBJ( loc1, 1500, rAngle + 90 )

    set uCartFalling = CreateUnitAtLoc( Player(nPlayerIndex), GetModelFlyUnitType( udg_PlayerModels[nPlayerIndex] ), loc1, udg_Angle[nPlayerIndex] )
    call RemoveLocation( loc1 )
    call SetUnitPathing( uCartFalling, false )
    call SetUnitScale( uCartFalling, 0.96, 0.96, 0.96 )
    //call SetUnitFlyHeight( uCartFalling, 450, 99999 )
    call PolledWait( 0.1 )

    set nIndex = 0
    loop
        call SetUnitFlyHeight( uCartFalling, 0, (nIndex + 1 ) * ( nIndex + 1 ) * 50 )

        call PolledWait( 0.1 )
        exitwhen nIndex >= 4

        if ( nIndex == 2 ) then
            call IssuePointOrderLoc( uPlane, "move", loc2 )
            call RemoveLocation( loc2 )
        endif

        set rScale = 0.96 + nIndex * 0.01
        call SetUnitScale( uCartFalling, rScale, rScale, rScale )

        set nIndex = nIndex + 1
    endloop

    call RemoveUnit( uCartFalling )
    return uPlane
endfunction

function SheepFlee takes nothing returns nothing
    local integer nIndex1 = 0
    local integer nIndex2 = 0
    local unit uSheep = null
    local location locTarget = null

    set udg_SheepFled = true
    set nIndex1 = 0
    loop
        exitwhen nIndex1 >= 12

        set nIndex2 = 0
        loop
            exitwhen nIndex2 >= 2

            set uSheep = CreateUnit( udg_NPC, 'nshe', GetRectCenterX(gg_rct_SheepArea), GetRectCenterY(gg_rct_SheepArea), I2R(GetRandomInt(0, 359)) )

            set locTarget = GetRandomLocInRect( gg_rct_SheepMoveTarget )
            call IssuePointOrderLoc( uSheep, "move", locTarget )
            call RemoveLocation( locTarget )

            set nIndex2 = nIndex2 + 1
            call PolledWait( 0.2 )
        endloop

        set nIndex1 = nIndex1 + 1
        call PolledWait( 1 )
    endloop
endfunction

function ShipAttack takes nothing returns nothing
    local integer nIndex = 0
    local location loc = null

    loop
        exitwhen udg_Ships[nIndex] == null

        set loc = GetRandomLocInRect( gg_rct_ShipAttackArea )
        call IssuePointOrderLoc( udg_Ships[nIndex], "attackground", loc )
        call RemoveLocation( loc )

        set nIndex = nIndex + 1
    endloop
endfunction

function ShipStartMove takes nothing returns nothing
    local integer nIndex = 0
    loop
        exitwhen udg_Ships[nIndex] == null

        call PauseUnit( udg_Ships[nIndex], false )
        call IssuePointOrderLoc( udg_Ships[nIndex], "Move", udg_ShipTargetPoint[nIndex] )

        set nIndex = nIndex + 1
    endloop
endfunction

function ShipStartAttack takes nothing returns nothing
    local integer nIndex = 0
    loop
        exitwhen udg_Ships[nIndex] == null

        call SetUnitMoveSpeed( udg_Ships[nIndex], 0 )

        set nIndex = nIndex + 1
    endloop

    call TimerStart( udg_ShipAttackTimer, 3, true, null )
    call ShipAttack()
endfunction

//===========================================================================
function InitTrig_Driving_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Move Cart
//===========================================================================
function Trig_Move_Cart_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Move_Cart_Actions takes nothing returns nothing
    local integer nPlayerIndex = 0
    local boolean bContinue = true
    set udg_TickSlow = udg_TickSlow + 1
    set udg_TickMedium = udg_TickMedium + 1
    if ( udg_TickSlow >= 5 ) then
        set udg_TickSlow = 0
    endif
    if ( udg_TickMedium >= 3 ) then
        set udg_TickMedium = 0
    endif
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM
        if ( udg_IceTrunkCooldown[nPlayerIndex] >= 0 ) then
            set udg_IceTrunkCooldown[nPlayerIndex] = udg_IceTrunkCooldown[nPlayerIndex] + 1
        endif
        if ( udg_IceTrunkCooldown[nPlayerIndex] >= 60 ) then
            set udg_IceTrunkCooldown[nPlayerIndex] = -1
        endif
        set bContinue = true
        if ( udg_Carts[nPlayerIndex] == null or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) ) then
            set bContinue = false
        else
            if ( CaughtInTornado( nPlayerIndex ) or FrozenByIce( nPlayerIndex ) or LostControl( nPlayerIndex )  or IsCartTrapped( udg_Carts[nPlayerIndex] ) or IsCartStunned( udg_Carts[nPlayerIndex] ) ) then
                set bContinue = false
            endif
            set udg_Speed[nPlayerIndex] = CalcCurSpeed( nPlayerIndex )
            if ( udg_CartPrePos[nPlayerIndex] != null ) then
                call RemoveLocation( udg_CartPrePos[nPlayerIndex] )
            endif
            set udg_CartPrePos[nPlayerIndex] = GetUnitLoc(udg_Carts[nPlayerIndex])
        endif
        if ( bContinue ) then
            set udg_TurnSpeed[nPlayerIndex] = CalcTurnSpeed( udg_PlayerModels[nPlayerIndex], udg_TurnSpeed[nPlayerIndex], udg_Turning[nPlayerIndex], udg_Speed[nPlayerIndex], udg_Accelerating[nPlayerIndex] )
            if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_FINISHING ) then
                set udg_Speed[nPlayerIndex] = CalcFinishingSpeed( udg_PlayerModels[nPlayerIndex], udg_Speed[nPlayerIndex] )
            elseif ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_PREPARING ) then
                set udg_Speed[nPlayerIndex] = CalcSpeed( nPlayerIndex, udg_Speed[nPlayerIndex], udg_Accelerating[nPlayerIndex], udg_TurnSpeed[nPlayerIndex] )
            endif
            if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_FINISHING ) then
                if ( udg_Speed[nPlayerIndex] == 0 ) then
                    call StopCart( nPlayerIndex )
                    if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_FINISHING ) then
                        call GameOverPlayer( nPlayerIndex )
                    endif
                else
                    set udg_Angle[nPlayerIndex] = CalcDirection( GetUnitFacing(udg_Carts[nPlayerIndex]), udg_TurnSpeed[nPlayerIndex] )
                    call Move( nPlayerIndex )
                endif
            endif
        endif
        call ResetCamera( nPlayerIndex )
        call RefreshCartAnim( nPlayerIndex )
        call DoBlizzard( nPlayerIndex )
        if ( udg_TickSlow == 0 ) then
            call RefreshCartSound( nPlayerIndex )
            call DoInjureEffect( nPlayerIndex )
            if ( udg_Carts[nPlayerIndex] != null and IsUnitAliveBJ( udg_Carts[nPlayerIndex] ) ) then
                call DoBrakeLight( nPlayerIndex )
                if ( true ) then
                    call DoLightningResize( nPlayerIndex )
                endif
            endif
        endif
        set nPlayerIndex = nPlayerIndex + 1
    endloop
    if ( udg_TickSlow == 0 ) then
        call RefreshPlayerCheckPoints()
    endif
    return
    // Debug
    call ClearTextMessages()
    call DisplayTextToPlayer( Player(0), 0, 0, "Speed: |cffffcc00" + R2S(udg_Speed[0]) + "|r" )
    call DisplayTextToPlayer( Player(0), 0, 0, "Angle: |cffffcc00" + R2S(udg_Angle[0]) + "|r" )
endfunction

//===========================================================================
function InitTrig_Move_Cart takes nothing returns nothing
    set gg_trg_Move_Cart = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Move_Cart, udg_DrivingTimer )
    call TriggerAddCondition( gg_trg_Move_Cart, Condition( function Trig_Move_Cart_Conditions ) )
    call TriggerAddAction( gg_trg_Move_Cart, function Trig_Move_Cart_Actions )
endfunction

//===========================================================================
// Trigger: Turning Left
//===========================================================================
function Trig_Turning_Left_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Turning_Left_Actions takes nothing returns nothing
    call TurnWheel( GetTriggerPlayer(), udg_TURNING_LEFT )
endfunction

//===========================================================================
function InitTrig_Turning_Left takes nothing returns nothing
    set gg_trg_Turning_Left = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(0), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(1), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(2), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(3), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(4), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(5), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(6), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left, Player(7), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_LEFT )
    call TriggerAddCondition( gg_trg_Turning_Left, Condition( function Trig_Turning_Left_Conditions ) )
    call TriggerAddAction( gg_trg_Turning_Left, function Trig_Turning_Left_Actions )
endfunction

//===========================================================================
// Trigger: Turning Left Released
//===========================================================================
function Trig_Turning_Left_Released_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Turning_Left_Released_Actions takes nothing returns nothing
    call ReleaseWheel( GetTriggerPlayer(), udg_TURNING_LEFT )
endfunction

//===========================================================================
function InitTrig_Turning_Left_Released takes nothing returns nothing
    set gg_trg_Turning_Left_Released = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(0), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(1), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(2), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(3), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(4), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(5), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(6), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Left_Released, Player(7), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_LEFT )
    call TriggerAddCondition( gg_trg_Turning_Left_Released, Condition( function Trig_Turning_Left_Released_Conditions ) )
    call TriggerAddAction( gg_trg_Turning_Left_Released, function Trig_Turning_Left_Released_Actions )
endfunction

//===========================================================================
// Trigger: Turning Right
//===========================================================================
function Trig_Turning_Right_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Turning_Right_Actions takes nothing returns nothing
    call TurnWheel( GetTriggerPlayer(), udg_TURNING_RIGHT )
endfunction

//===========================================================================
function InitTrig_Turning_Right takes nothing returns nothing
    set gg_trg_Turning_Right = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(0), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(1), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(2), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(3), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(4), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(5), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(6), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right, Player(7), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_RIGHT )
    call TriggerAddCondition( gg_trg_Turning_Right, Condition( function Trig_Turning_Right_Conditions ) )
    call TriggerAddAction( gg_trg_Turning_Right, function Trig_Turning_Right_Actions )
endfunction

//===========================================================================
// Trigger: Turning Right Released
//===========================================================================
function Trig_Turning_Right_Released_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Turning_Right_Released_Actions takes nothing returns nothing
    call ReleaseWheel( GetTriggerPlayer(), udg_TURNING_RIGHT )
endfunction

//===========================================================================
function InitTrig_Turning_Right_Released takes nothing returns nothing
    set gg_trg_Turning_Right_Released = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(0), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(1), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(2), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(3), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(4), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(5), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(6), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Turning_Right_Released, Player(7), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_RIGHT )
    call TriggerAddCondition( gg_trg_Turning_Right_Released, Condition( function Trig_Turning_Right_Released_Conditions ) )
    call TriggerAddAction( gg_trg_Turning_Right_Released, function Trig_Turning_Right_Released_Actions )
endfunction

//===========================================================================
// Trigger: Acceleration
//===========================================================================
function Trig_Acceleration_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Acceleration_Actions takes nothing returns nothing
    call Accelerate( GetTriggerPlayer(), udg_ACCELERATE_FORWARD )
endfunction

//===========================================================================
function InitTrig_Acceleration takes nothing returns nothing
    set gg_trg_Acceleration = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(0), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(1), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(2), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(3), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(4), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(5), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(6), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration, Player(7), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_UP )
    call TriggerAddCondition( gg_trg_Acceleration, Condition( function Trig_Acceleration_Conditions ) )
    call TriggerAddAction( gg_trg_Acceleration, function Trig_Acceleration_Actions )
endfunction

//===========================================================================
// Trigger: Acceleration Released
//===========================================================================
function Trig_Acceleration_Released_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Acceleration_Released_Actions takes nothing returns nothing
    call Coast( GetTriggerPlayer(), udg_ACCELERATE_FORWARD )
endfunction

//===========================================================================
function InitTrig_Acceleration_Released takes nothing returns nothing
    set gg_trg_Acceleration_Released = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(0), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(1), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(2), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(3), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(4), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(5), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(6), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Acceleration_Released, Player(7), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_UP )
    call TriggerAddCondition( gg_trg_Acceleration_Released, Condition( function Trig_Acceleration_Released_Conditions ) )
    call TriggerAddAction( gg_trg_Acceleration_Released, function Trig_Acceleration_Released_Actions )
endfunction

//===========================================================================
// Trigger: Deceleration
//===========================================================================
function Trig_Deceleration_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deceleration_Actions takes nothing returns nothing
    call Accelerate( GetTriggerPlayer(), udg_ACCELERATE_BACKWARD )
endfunction

//===========================================================================
function InitTrig_Deceleration takes nothing returns nothing
    set gg_trg_Deceleration = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(0), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(1), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(2), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(3), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(4), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(5), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(6), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration, Player(7), bj_KEYEVENTTYPE_DEPRESS, bj_KEYEVENTKEY_DOWN )
    call TriggerAddCondition( gg_trg_Deceleration, Condition( function Trig_Deceleration_Conditions ) )
    call TriggerAddAction( gg_trg_Deceleration, function Trig_Deceleration_Actions )
endfunction

//===========================================================================
// Trigger: Deceleration Stop
//===========================================================================
function Trig_Deceleration_Stop_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deceleration_Stop_Actions takes nothing returns nothing
    call Coast( GetTriggerPlayer(), udg_ACCELERATE_BACKWARD )
endfunction

//===========================================================================
function InitTrig_Deceleration_Stop takes nothing returns nothing
    set gg_trg_Deceleration_Stop = CreateTrigger(  )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(0), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(1), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(2), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(3), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(4), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(5), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(6), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerRegisterPlayerKeyEventBJ( gg_trg_Deceleration_Stop, Player(7), bj_KEYEVENTTYPE_RELEASE, bj_KEYEVENTKEY_DOWN )
    call TriggerAddCondition( gg_trg_Deceleration_Stop, Condition( function Trig_Deceleration_Stop_Conditions ) )
    call TriggerAddAction( gg_trg_Deceleration_Stop, function Trig_Deceleration_Stop_Actions )
endfunction

//===========================================================================
// Trigger: Sheep Flee
//===========================================================================
function Trig_Sheep_Flee_Actions takes nothing returns nothing
    call ShipStartMove()
    call RemoveDestructable( gg_dest_B000_8421 )
    call SheepFlee()
endfunction

//===========================================================================
function InitTrig_Sheep_Flee takes nothing returns nothing
    set gg_trg_Sheep_Flee = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Sheep_Flee, udg_SheepTimer )
    call TriggerAddAction( gg_trg_Sheep_Flee, function Trig_Sheep_Flee_Actions )
endfunction

//===========================================================================
// Trigger: Ship Attack
//===========================================================================
function Trig_Ship_Attack_Actions takes nothing returns nothing
    call ShipAttack()
endfunction

//===========================================================================
function InitTrig_Ship_Attack takes nothing returns nothing
    set gg_trg_Ship_Attack = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Ship_Attack, udg_ShipAttackTimer )
    call TriggerAddAction( gg_trg_Ship_Attack, function Trig_Ship_Attack_Actions )
endfunction

//===========================================================================
// Trigger: Ship Start Attack
//===========================================================================
function Trig_Ship_Start_Attack_Actions takes nothing returns nothing
    call DisableTrigger( GetTriggeringTrigger() )
    call ShipStartAttack()
endfunction

//===========================================================================
function InitTrig_Ship_Start_Attack takes nothing returns nothing
    set gg_trg_Ship_Start_Attack = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Ship_Start_Attack, gg_rct_ShipTarget1 )
    call TriggerRegisterEnterRectSimple( gg_trg_Ship_Start_Attack, gg_rct_ShipTarget2 )
    call TriggerAddAction( gg_trg_Ship_Start_Attack, function Trig_Ship_Start_Attack_Actions )
endfunction

//===========================================================================
// Trigger: Killed
//===========================================================================
function Trig_Killed_Func043C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Killed_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Killed_Func043C() ) then
        return false
    endif
    return true
endfunction

function Trig_Killed_Actions takes nothing returns nothing
    local unit uCart = GetDyingUnit()
    local unit uDummy = null
    local unit uHelicopter = null
    local integer nPlayerIndex = GetPlayerIndex( GetOwningPlayer( uCart ) )
    local location loc = GetUnitLoc( uCart )
    local effect effDeath = null
    call StopCart( nPlayerIndex )
    call ChangeCartSound( nPlayerIndex, udg_SNDINDEX_NONE )
    set uDummy = CreateUnitAtLoc( Player(nPlayerIndex), 'n00K', loc, udg_Angle[nPlayerIndex] )
    call SetUnitPathing( uDummy, false )
    call SetUnitVertexColor( uDummy, 0, 0, 0, 0 )
    call ResetCameraTarget( nPlayerIndex, uDummy )
    set effDeath = AddSpecialEffectLoc( "Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl", loc )
    call DestroyEffect( effDeath )
    call RemoveUnit( uCart )
    set udg_Carts[nPlayerIndex] = null
    set udg_CartItemNum[nPlayerIndex] = 0
    set udg_Speed[nPlayerIndex] = 0
    set udg_TurnSpeed[nPlayerIndex] = 0
    call RemoveCartSlotPowerUp( nPlayerIndex, 0 )
    call RemoveCartSlotPowerUp( nPlayerIndex, 1 )
    call RemoveCartSlotPowerUp( nPlayerIndex, 2 )
    call RemoveCartSlotPowerUp( nPlayerIndex, 3 )
    call PolledWait( 3 )
    set uHelicopter = GiveMeNewCart( nPlayerIndex, loc )
    set udg_Carts[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), GetModelUnitType( udg_PlayerModels[nPlayerIndex] ), loc, udg_Angle[nPlayerIndex] )
    call SetUnitPositionLoc( udg_Carts[nPlayerIndex], loc )
    call RemoveLocation( loc )
    call ChargeBigGunSingle( nPlayerIndex )
    call ResetCameraTarget( nPlayerIndex, udg_Carts[nPlayerIndex] )
    call RemoveUnit( uCart )
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_Carts[nPlayerIndex], Player(nPlayerIndex) )
    call RemoveUnit( uDummy )
    call PolledWait( 3 )
    call RemoveUnit( uHelicopter )
    // =================================================================================================
    if ( GetPlayerSlotState(Player(nPlayerIndex)) != PLAYER_SLOT_STATE_PLAYING ) then
        call RemoveUnit( udg_Carts[nPlayerIndex] )
        set udg_Carts[nPlayerIndex] = null
    endif
endfunction

//===========================================================================
function InitTrig_Killed takes nothing returns nothing
    set gg_trg_Killed = CreateTrigger(  )
    call TriggerRegisterAnyUnitEventBJ( gg_trg_Killed, EVENT_PLAYER_UNIT_DEATH )
    call TriggerAddCondition( gg_trg_Killed, Condition( function Trig_Killed_Conditions ) )
    call TriggerAddAction( gg_trg_Killed, function Trig_Killed_Actions )
endfunction

//===========================================================================
// Trigger: Multi Board Functions
//===========================================================================

function GetTimeElapsed takes nothing returns string
    local integer nSeconds = R2I( TimerGetElapsed( udg_GameTimer ) )
    return Second2String( nSeconds, true )
endfunction

function Integer2Meter takes integer n returns string
    local string str = ""

    if ( n >= 30 ) then
        set str = str + "IIIIIIIIIIIIIIIIIIIIIIIIIIIIII"
        set n = n - 30
    endif
    
    if ( n >= 20 ) then
        set str = str + "IIIIIIIIIIIIIIIIIIII"
        set n = n - 20
    endif

    if ( n >= 10 ) then
        set str = str + "IIIIIIIIII"
        set n = n - 10
    endif

    if ( n >= 5 ) then
        set str = str + "IIIII"
        set n = n - 5
    endif

    loop
        exitwhen n <= 0
        set str = str + "I"
        set n = n - 1
    endloop

    return str
endfunction

function LifeMeter takes unit uCart returns string
    local string str = null
    local real rLifePercent = 0
    local integer nLife = 0

    if ( uCart != null and IsUnitAliveBJ( uCart ) ) then
        set rLifePercent = GetUnitLifePercent( uCart )
    endif

    set nLife = R2I(rLifePercent * 24 / 100)
    set str = Integer2Meter( nLife )
    if ( nLife > 16 ) then
        set str = "|cff00c800" + str + "|r"
    elseif ( nLife > 8 ) then
        set str = "|cffc8c800" + str + "|r"
    else
        set str = "|cffc80000" + str + "|r"
    endif
  
    if ( nLife < 24 ) then
        set str = str + "|cff969696" + Integer2Meter( 24 - nLife ) + "|r"
    endif

    return str
endfunction

function SpeedMeter takes integer nSpeed, real rMaxSpeed, integer nFlashType, boolean bFlash returns string
    local string str = null
    local integer n = 0
    local integer nStage = 0
    local integer nLen = 30
    local integer nLenUnit = nLen / 3
    set nSpeed = IAbsBJ(nSpeed) * nLen / R2I(rMaxSpeed * 4 / 3)

    if ( nFlashType > 0 ) then
        set str = Integer2Meter( nSpeed )
        if ( bFlash ) then
            set str = "|cffff0000" + str + "|r"
        else
            set str = "|cffffffff" + str + "|r"
        endif
        set nLen = nLen - nSpeed
    elseif ( nFlashType < 0 ) then
        set str = Integer2Meter( nSpeed )
        if ( bFlash ) then
            set str = "|cff00ff00" + str + "|r"
        else
            set str = "|cffffffff" + str + "|r"
        endif
        set nLen = nLen - nSpeed
    else
        set str = ""
        set nStage = 0
        loop
            exitwhen nSpeed <= 0
            
            if ( nSpeed >= nLenUnit ) then
                set n = nLenUnit
            else
                set n = nSpeed
            endif
            set nLen = nLen - n

            if ( nStage == 0 ) then
                set str = str + "|cff00c800" + Integer2Meter( n ) + "|r"
            elseif ( nStage == 1 ) then
                set str = str + "|cffc8c800" + Integer2Meter( n ) + "|r"
            elseif ( nStage == 2 ) then
                set str = str + "|cffc80000" + Integer2Meter( n ) + "|r"
            endif

            set nSpeed = nSpeed - n
            set nStage = nStage + 1
        endloop
    endif


    if ( nLen > 0 ) then
        set str = str + "|cff969696" + Integer2Meter( nLen ) + "|r"
    endif
    return str
endfunction

function AmmoMeter takes integer nPlayerIndex returns string
    local string str = null
    local integer nAmmo

    set nAmmo = udg_GunAmmo[nPlayerIndex] * 30 / udg_AMMO_MAX
    set str = "|cffdaa520" + Integer2Meter( nAmmo ) + "|r"
  
    if ( nAmmo < 30 ) then
        set str = str + "|cff969696" + Integer2Meter( 30 - nAmmo ) + "|r"
    endif

    return str
endfunction

function RefreshBoard takes integer nPlayer returns nothing
    local integer nPlayerIndex = 0
    local multiboarditem mbitem = null
    local integer nRow
    local real array rWidth
    local integer nSeconds

    set rWidth[0] = 0.01
    set rWidth[1] = 0.08
    set rWidth[2] = 0.03
    set rWidth[3] = 0.07

    if ( udg_GameGoingStatus[nPlayer] != udg_GAME_FINISHING and udg_GameGoingStatus[nPlayer] != udg_GAME_OVER ) then
        call MultiboardSetTitleText( udg_mb[nPlayer], "TOTAL LAPs = " + I2S(udg_LapNumber) + "    " + GetTimeElapsed( ) )
    else
        set nSeconds = R2I( udg_TimeUsed[ nPlayerIndex ] )
        call MultiboardSetTitleText( udg_mb[nPlayer], "TOTAL LAPs = " + I2S(udg_LapNumber) + "    " + Second2String( nSeconds, true ) )
    endif
    call MultiboardSetRowCount( udg_mb[nPlayer], udg_PlaceNum + 1 + 3 )

    set nRow = 1
    loop
        exitwhen nRow > udg_PlaceNum

        set nPlayerIndex = udg_Places[nRow - 1]

        //Place
        set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 0 )
        call MultiboardSetItemStyle( mbitem, true, false )
        call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
        call MultiboardSetItemWidth( mbitem, rWidth[0] )
        call MultiboardSetItemValue( mbitem, I2S(nRow) )
        call MultiboardReleaseItem( mbitem )

        //Player Name
        set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 1 )
        call MultiboardSetItemStyle( mbitem, true, true )
        call MultiboardSetItemValue( mbitem, GetPlayerName( Player(nPlayerIndex) ) )
        call MultiboardSetItemValueColor( mbitem, udg_PlayerColorRed[nPlayerIndex], udg_PlayerColorGreen[nPlayerIndex], udg_PlayerColorBlue[nPlayerIndex], 255 )
        call MultiboardSetItemIcon( mbitem, udg_ModelIcons[udg_PlayerModels[nPlayerIndex]] )
        call MultiboardSetItemWidth( mbitem, rWidth[1] )
        call MultiboardReleaseItem( mbitem )

        //Lap
        set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 2)
        call MultiboardSetItemStyle( mbitem, true, false )
        call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
        call MultiboardSetItemWidth( mbitem, rWidth[2] )
        if ( udg_GameGoingStatus[nPlayerIndex] == udg_GAME_DRIVING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_REPAIRING or udg_GameGoingStatus[nPlayerIndex] == udg_GAME_PREPARING ) then
            call MultiboardSetItemValue( mbitem, I2S( udg_PlaceChkPtLap[nPlayerIndex] + 1 ) )
        else
            call MultiboardSetItemValue( mbitem, I2S( udg_PlaceChkPtLap[nPlayerIndex] ) )
        endif
        call MultiboardReleaseItem( mbitem )

        //HP

        set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 3)
        call MultiboardSetItemStyle( mbitem, true, false )
        call MultiboardSetItemWidth( mbitem, rWidth[3] )
        call MultiboardSetItemValue( mbitem, LifeMeter( udg_Carts[nPlayerIndex] ) )
        call MultiboardReleaseItem( mbitem )

        set nRow = nRow + 1
    endloop

    //======== Empty Line =====================
    //Place
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 0 )
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, rWidth[0] + rWidth[1] + rWidth[2] + rWidth[3] )
    //call MultiboardSetItemValue( mbitem, "" )
    call MultiboardReleaseItem( mbitem )

    //Player Name
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 1 )
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Lap
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 2)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Speed
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 3)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    set nRow = nRow + 1

    //======== Speed Meter =====================
    //Place
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 0 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemWidth( mbitem, rWidth[0] + rWidth[1] + rWidth[2] + rWidth[3] )
    call MultiboardSetItemValue( mbitem, "Speed:  " + SpeedMeter( R2I( udg_Speed[nPlayer] ), GetModelMaxSpeed(udg_PlayerModels[nPlayer]), 0, false ) )
    call MultiboardReleaseItem( mbitem )

    //Player Name
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 1 )
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Lap
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 2)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Speed
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 3)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    set nRow = nRow + 1

    //======== Ammo Meter =====================
    //Place
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 0 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemWidth( mbitem, rWidth[0] + rWidth[1] + rWidth[2] + rWidth[3] )
    call MultiboardSetItemValue( mbitem, "Ammo: " + AmmoMeter (nPlayer) )
    call MultiboardReleaseItem( mbitem )

    //Player Name
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 1 )
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Lap
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 2)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

    //Speed
    set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 3)
    call MultiboardSetItemStyle( mbitem, false, false )
    call MultiboardSetItemWidth( mbitem, 0 )
    call MultiboardReleaseItem( mbitem )

endfunction

function RefreshBoards takes nothing returns nothing
    local integer nPlayerIndex = 0
    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            call RefreshBoard( nPlayerIndex )
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function CreateBoard takes integer nPlayer returns nothing
    local integer nPlayerIndex = 0
    local multiboarditem mbitem = null
    local integer nRow = 1
    local real array rWidth

    set rWidth[0] = 0.01
    set rWidth[1] = 0.08
    set rWidth[2] = 0.03
    set rWidth[3] = 0.07

    set udg_mb[nPlayer] = CreateMultiboard()
    call MultiboardSetColumnCount( udg_mb[nPlayer], 4 )
    call MultiboardSetRowCount( udg_mb[nPlayer], 1 )

    set mbitem = MultiboardGetItem( udg_mb[nPlayer], 0, 0 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemValue( mbitem, " " )
    call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
    call MultiboardSetItemWidth( mbitem, rWidth[0] )
    call MultiboardReleaseItem( mbitem )

    set mbitem = MultiboardGetItem( udg_mb[nPlayer], 0, 1 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemValue( mbitem, "Player" )
    call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
    call MultiboardSetItemWidth( mbitem, rWidth[1] )
    call MultiboardReleaseItem( mbitem )

    set mbitem = MultiboardGetItem( udg_mb[nPlayer], 0, 2 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemValue( mbitem, "Lap" )
    call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
    call MultiboardSetItemWidth( mbitem, rWidth[2] )
    call MultiboardReleaseItem( mbitem )

    set mbitem = MultiboardGetItem( udg_mb[nPlayer], 0, 3 )
    call MultiboardSetItemStyle( mbitem, true, false )
    call MultiboardSetItemValue( mbitem, "HP" )
    call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
    call MultiboardSetItemWidth( mbitem, rWidth[3] )
    call MultiboardReleaseItem( mbitem )

    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
           set udg_BoardPlayerIndexes[nRow - 1] = nPlayerIndex

           set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 0 )
           call MultiboardSetItemStyle( mbitem, true, false )
           call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
           call MultiboardSetItemWidth( mbitem, rWidth[0] )
           call MultiboardReleaseItem( mbitem )

           set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 1 )
           call MultiboardSetItemStyle( mbitem, true, true )
           call MultiboardSetItemValue( mbitem, GetPlayerName( Player(nPlayerIndex) ) )
           call MultiboardSetItemValueColor( mbitem, udg_PlayerColorRed[nPlayerIndex], udg_PlayerColorGreen[nPlayerIndex], udg_PlayerColorBlue[nPlayerIndex], 255 )
           call MultiboardSetItemIcon( mbitem, udg_ModelIcons[udg_PlayerModels[nPlayerIndex]] )
           call MultiboardSetItemWidth( mbitem, rWidth[1] )
           call MultiboardReleaseItem( mbitem )

           set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 2)
           call MultiboardSetItemStyle( mbitem, true, false )
           call MultiboardSetItemValueColor( mbitem, 255, 255, 255, 255 )
           call MultiboardSetItemWidth( mbitem, rWidth[2] )
           call MultiboardReleaseItem( mbitem )

           set mbitem = MultiboardGetItem( udg_mb[nPlayer], nRow, 3)
           call MultiboardSetItemStyle( mbitem, true, false )
           call MultiboardSetItemWidth( mbitem, rWidth[3] )
           call MultiboardReleaseItem( mbitem )

           set nRow = nRow + 1
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop
endfunction

function DisplayBoards takes nothing returns nothing
    local integer nPlayer = 0

    loop
        exitwhen nPlayer >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayer)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayer)) == PLAYER_SLOT_STATE_PLAYING ) then
            if ( GetLocalPlayer() == Player(nPlayer) ) then
                call MultiboardDisplay( udg_mb[nPlayer], true )
                call MultiboardMinimize( udg_mb[nPlayer], false )
            endif
        endif

        set nPlayer = nPlayer + 1
    endloop
endfunction

function CreateBoards takes nothing returns nothing
    local integer nPlayerIndex = 0

    loop
        exitwhen nPlayerIndex >= udg_PLAYER_MAXNUM

        if ( GetPlayerController(Player(nPlayerIndex)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(nPlayerIndex)) == PLAYER_SLOT_STATE_PLAYING ) then
            call CreateBoard( nPlayerIndex )
        endif

        set nPlayerIndex = nPlayerIndex + 1
    endloop

    call TimerStart( udg_BoardTimer, 1.00, true, null )

    call RefreshBoards()

    call DisplayBoards()
endfunction

//===========================================================================
function InitTrig_Multi_Board_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Create Board
//===========================================================================
function Trig_Create_Board_Actions takes nothing returns nothing
    call CreateBoards( )
endfunction

//===========================================================================
function InitTrig_Create_Board takes nothing returns nothing
    set gg_trg_Create_Board = CreateTrigger(  )
    call DisableTrigger( gg_trg_Create_Board )
    call TriggerAddAction( gg_trg_Create_Board, function Trig_Create_Board_Actions )
endfunction

//===========================================================================
// Trigger: Refresh MultiBoard
//===========================================================================
function Trig_Refresh_MultiBoard_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Refresh_MultiBoard_Actions takes nothing returns nothing
    call RefreshBoards( )
endfunction

//===========================================================================
function InitTrig_Refresh_MultiBoard takes nothing returns nothing
    set gg_trg_Refresh_MultiBoard = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Refresh_MultiBoard, udg_BoardTimer )
    call TriggerAddCondition( gg_trg_Refresh_MultiBoard, Condition( function Trig_Refresh_MultiBoard_Conditions ) )
    call TriggerAddAction( gg_trg_Refresh_MultiBoard, function Trig_Refresh_MultiBoard_Actions )
endfunction

//===========================================================================
// Trigger: Select Cart Functions
//===========================================================================
function DeselectCart takes player plPlayer, unit uCart returns nothing
    local integer nPlayerIndex = GetPlayerIndex(plPlayer)

    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Carts[nPlayerIndex] == null or uCart != udg_Carts[nPlayerIndex] or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) ) then
        return
    endif

    call ClearSelectionForPlayer( plPlayer )
    call SelectUnitForPlayerSingle( udg_Carts[nPlayerIndex], plPlayer )
endfunction

function SelectSomethingElse takes player plPlayer, unit uSelected returns nothing
    local integer nPlayerIndex = GetPlayerIndex(plPlayer)

    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_Carts[nPlayerIndex] == null or uSelected == udg_Carts[nPlayerIndex] or IsUnitDeadBJ( udg_Carts[nPlayerIndex] ) ) then
        return
    endif

    call ClearSelectionForPlayer( plPlayer )
    call SelectUnitForPlayerSingle( udg_Carts[nPlayerIndex], plPlayer )
endfunction

//===========================================================================
function InitTrig_Select_Cart_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Select something else
//===========================================================================
function Trig_Select_something_else_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not ( udg_ItsForDebug == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Select_something_else_Actions takes nothing returns nothing
    call SelectSomethingElse( GetTriggerPlayer(), GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Select_something_else takes nothing returns nothing
    set gg_trg_Select_something_else = CreateTrigger(  )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(0), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(1), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(2), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(3), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(4), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(5), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(6), true )
    call TriggerRegisterPlayerSelectionEventBJ( gg_trg_Select_something_else, Player(7), true )
    call TriggerAddCondition( gg_trg_Select_something_else, Condition( function Trig_Select_something_else_Conditions ) )
    call TriggerAddAction( gg_trg_Select_something_else, function Trig_Select_something_else_Actions )
endfunction

//===========================================================================
// Trigger: Repairing Functions
//===========================================================================
function Repair takes unit uCart, integer nSpot, real rFace returns nothing
    local player plPlayer = GetOwningPlayer( uCart )
    local integer nPlayerIndex = GetPlayerIndex( plPlayer )
    local location locGarage = null
    local real rHPCur = 0
    local real rHPMax = 0
    local real rTimePassed = 0
    local unit uAssistant = null

    local integer array nPowerUps

    if ( nPlayerIndex < 0 ) then
        return
    endif

    if ( udg_PitGarageOccupied[nSpot] ) then
        return
    endif

    if ( udg_GameGoingStatus[nPlayerIndex] != udg_GAME_DRIVING ) then
        return
    endif

    if ( GetUnitState( udg_Carts[nPlayerIndex], UNIT_STATE_LIFE ) >= GetUnitState( udg_Carts[nPlayerIndex], UNIT_STATE_MAX_LIFE ) and udg_GunAmmo[nPlayerIndex] >= udg_AMMO_MAX ) then
        return
    endif

    set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_REPAIRING
    set udg_PitGarageOccupied[nSpot] = true
    
    call StopCart( nPlayerIndex )

    set locGarage = GetUnitLoc( udg_PitGarages[nSpot] )

    if ( udg_ItsForDebug ) then
        call SetUnitLifeBJ(uCart, 10)
    endif

    set rFace = rFace + 40
    set rHPCur = GetUnitState( udg_Carts[nPlayerIndex], UNIT_STATE_LIFE)
    set nPowerUps[0] = GetCartSlotPowerUp( nPlayerIndex, 0 )
    set nPowerUps[1] = GetCartSlotPowerUp( nPlayerIndex, 1 )
    set nPowerUps[2] = GetCartSlotPowerUp( nPlayerIndex, 2 )
    set nPowerUps[3] = GetCartSlotPowerUp( nPlayerIndex, 3 )
    call RemoveUnit( udg_Carts[nPlayerIndex] )
    set udg_Carts[nPlayerIndex] = CreateUnitAtLoc( Player(nPlayerIndex), GetModelUnitType( udg_PlayerModels[nPlayerIndex] ), locGarage, rFace )
    call SetUnitLifeBJ( udg_Carts[nPlayerIndex], rHPCur )
    if ( nPowerUps[0] != 0 ) then
        call UnitAddAbility( udg_Carts[nPlayerIndex], nPowerUps[0] )
    endif
    if ( nPowerUps[1] != 0 ) then
        call UnitAddAbility( udg_Carts[nPlayerIndex], nPowerUps[1] )
    endif
    if ( nPowerUps[2] != 0 ) then
        call UnitAddAbility( udg_Carts[nPlayerIndex], nPowerUps[2] )
    endif
    if ( nPowerUps[3] != 0 ) then
        call UnitAddAbility( udg_Carts[nPlayerIndex], nPowerUps[3] )
    endif
    set udg_Angle[nPlayerIndex] = rFace
    call ClearSelectionForPlayer( Player(nPlayerIndex) )
    call SelectUnitForPlayerSingle( udg_Carts[nPlayerIndex], Player(nPlayerIndex) )
    call ChargeBigGunSingle( nPlayerIndex )
    call ResetCameraTarget( nPlayerIndex, udg_Carts[nPlayerIndex] )
    call ResetCamera( nPlayerIndex )

    call PolledWait( 0.2 )

    set rHPMax = GetUnitState( udg_Carts[nPlayerIndex], UNIT_STATE_MAX_LIFE)
    loop

        set rHPCur = rHPCur + 80
        if ( rHPCur > rHPMax ) then
            set rHPCur = rHPMax
        endif
        call SetUnitLifeBJ( udg_Carts[nPlayerIndex], rHPCur )

        if ( rHPCur >= rHPMax ) then
            call SetUnitAnimationByIndex( udg_PitCrews[nSpot], 2 )
            exitwhen true
        endif

        if ( rTimePassed >= 0.5 ) then
           call SetUnitAnimationByIndex( udg_PitCrews[nSpot], 7 )
           set rTimePassed = 0
        endif

        call PolledWait(0.1)
        set rTimePassed = rTimePassed + 0.1
    endloop

    call PlaySoundPlayer( Player(nPlayerIndex), gg_snd_HeroTinkerWhat4 )
    call DisplayTextToPlayer( Player(nPlayerIndex), 0, 0, "Repairing is done. Now get out of here." )    
    set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_DRIVING
    set udg_PitGarageOccupied[nSpot] = false

    call RemoveLocation( locGarage )

    set uAssistant = CreateAssistant1( nPlayerIndex, 2 )
    call IssueTargetOrder( uAssistant, "unholyfrenzy", udg_Carts[nPlayerIndex] )
endfunction

//===========================================================================
function InitTrig_Repairing_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Enter Repair Area
//===========================================================================
function Trig_Enter_Repair_Area_Func006C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Enter_Repair_Area_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Enter_Repair_Area_Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_Enter_Repair_Area_Actions takes nothing returns nothing
    local unit uCart = GetTriggerUnit()
    call UnitRemoveBuffsBJ( bj_REMOVEBUFFS_ALL, uCart )
    call SetCartInvulnerable( uCart, true )
endfunction

//===========================================================================
function InitTrig_Enter_Repair_Area takes nothing returns nothing
    set gg_trg_Enter_Repair_Area = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Enter_Repair_Area, gg_rct_Repairing_Area )
    call TriggerAddCondition( gg_trg_Enter_Repair_Area, Condition( function Trig_Enter_Repair_Area_Conditions ) )
    call TriggerAddAction( gg_trg_Enter_Repair_Area, function Trig_Enter_Repair_Area_Actions )
endfunction

//===========================================================================
// Trigger: Leave Repair Area
//===========================================================================
function Trig_Leave_Repair_Area_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Leave_Repair_Area_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Leave_Repair_Area_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Leave_Repair_Area_Actions takes nothing returns nothing
    local unit uCart = GetTriggerUnit()
    call SetCartInvulnerable( uCart, false )
endfunction

//===========================================================================
function InitTrig_Leave_Repair_Area takes nothing returns nothing
    set gg_trg_Leave_Repair_Area = CreateTrigger(  )
    call TriggerRegisterLeaveRectSimple( gg_trg_Leave_Repair_Area, gg_rct_Repairing_Area )
    call TriggerAddCondition( gg_trg_Leave_Repair_Area, Condition( function Trig_Leave_Repair_Area_Conditions ) )
    call TriggerAddAction( gg_trg_Leave_Repair_Area, function Trig_Leave_Repair_Area_Actions )
endfunction

//===========================================================================
// Trigger: Enter Repair Spot 1
//===========================================================================
function Trig_Enter_Repair_Spot_1_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Enter_Repair_Spot_1_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Enter_Repair_Spot_1_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Enter_Repair_Spot_1_Actions takes nothing returns nothing
    call Repair( GetTriggerUnit(), 0, 90 )
endfunction

//===========================================================================
function InitTrig_Enter_Repair_Spot_1 takes nothing returns nothing
    set gg_trg_Enter_Repair_Spot_1 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Enter_Repair_Spot_1, gg_rct_PitGarage_1 )
    call TriggerAddCondition( gg_trg_Enter_Repair_Spot_1, Condition( function Trig_Enter_Repair_Spot_1_Conditions ) )
    call TriggerAddAction( gg_trg_Enter_Repair_Spot_1, function Trig_Enter_Repair_Spot_1_Actions )
endfunction

//===========================================================================
// Trigger: Enter Repair Spot 2
//===========================================================================
function Trig_Enter_Repair_Spot_2_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Enter_Repair_Spot_2_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Enter_Repair_Spot_2_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Enter_Repair_Spot_2_Actions takes nothing returns nothing
    call Repair( GetTriggerUnit(), 1, 90 )
endfunction

//===========================================================================
function InitTrig_Enter_Repair_Spot_2 takes nothing returns nothing
    set gg_trg_Enter_Repair_Spot_2 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Enter_Repair_Spot_2, gg_rct_PitGarage_2 )
    call TriggerAddCondition( gg_trg_Enter_Repair_Spot_2, Condition( function Trig_Enter_Repair_Spot_2_Conditions ) )
    call TriggerAddAction( gg_trg_Enter_Repair_Spot_2, function Trig_Enter_Repair_Spot_2_Actions )
endfunction

//===========================================================================
// Trigger: Enter Repair Spot 3
//===========================================================================
function Trig_Enter_Repair_Spot_3_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Enter_Repair_Spot_3_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Enter_Repair_Spot_3_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Enter_Repair_Spot_3_Actions takes nothing returns nothing
    call Repair( GetTriggerUnit(), 2, 90 )
endfunction

//===========================================================================
function InitTrig_Enter_Repair_Spot_3 takes nothing returns nothing
    set gg_trg_Enter_Repair_Spot_3 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Enter_Repair_Spot_3, gg_rct_PitGarage_3 )
    call TriggerAddCondition( gg_trg_Enter_Repair_Spot_3, Condition( function Trig_Enter_Repair_Spot_3_Conditions ) )
    call TriggerAddAction( gg_trg_Enter_Repair_Spot_3, function Trig_Enter_Repair_Spot_3_Actions )
endfunction

//===========================================================================
// Trigger: Enter Repair Spot 4
//===========================================================================
function Trig_Enter_Repair_Spot_4_Func004C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h004' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Enter_Repair_Spot_4_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Enter_Repair_Spot_4_Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_Enter_Repair_Spot_4_Actions takes nothing returns nothing
    call Repair( GetTriggerUnit(), 3, 90 )
endfunction

//===========================================================================
function InitTrig_Enter_Repair_Spot_4 takes nothing returns nothing
    set gg_trg_Enter_Repair_Spot_4 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Enter_Repair_Spot_4, gg_rct_PitGarage_4 )
    call TriggerAddCondition( gg_trg_Enter_Repair_Spot_4, Condition( function Trig_Enter_Repair_Spot_4_Conditions ) )
    call TriggerAddAction( gg_trg_Enter_Repair_Spot_4, function Trig_Enter_Repair_Spot_4_Actions )
endfunction

//===========================================================================
// Trigger: Player Left
//===========================================================================
function Trig_Player_Left_Actions takes nothing returns nothing
    local integer nPlayerIndex = GetPlayerIndex( GetTriggerPlayer() )
    if ( nPlayerIndex < 0 ) then
        return
    endif
    set udg_GameGoingStatus[nPlayerIndex] = udg_GAME_LEFT
    set udg_NormalCamera[nPlayerIndex] = true
    if ( udg_Carts[nPlayerIndex] != null ) then
        call RemoveUnit( udg_Carts[nPlayerIndex] )
        set udg_Carts[nPlayerIndex] = null
    endif
endfunction

//===========================================================================
function InitTrig_Player_Left takes nothing returns nothing
    set gg_trg_Player_Left = CreateTrigger(  )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(0) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(1) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(2) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(3) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(4) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(5) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(6) )
    call TriggerRegisterPlayerEventLeave( gg_trg_Player_Left, Player(7) )
    call TriggerAddAction( gg_trg_Player_Left, function Trig_Player_Left_Actions )
endfunction

//===========================================================================
// Trigger: Cross Road Functions
//===========================================================================
function MineCartReachStop takes unit uWagon, rect rcStart, rect rcTarget returns nothing
    //local effect eff
    //local location loc = Location( GetRectCenterX(rcStart), GetRectCenterY(rcTarget) )
    //set eff = AddSpecialEffectLoc( "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", loc)
    //call DestroyEffect( eff )

    call IssuePointOrder( uWagon, "move", GetRectCenterX(rcStart), GetRectCenterY(rcTarget) )
endfunction

function CreateMineCart takes rect rectStart, rect rectEnd, integer nCartId, real rSpeed, real rFace returns unit
    local location loc1 = GetRectCenter( rectStart )
    local unit uCart = CreateUnitAtLoc( udg_NPC, nCartId, loc1, rFace )
    //call ShowGeneralMsg( "mine cart", false )
    call RemoveLocation( loc1 )
    call SetUnitPathing( uCart, false )
    call SetUnitMoveSpeed( uCart, rSpeed )
    call MineCartReachStop( uCart, rectStart, rectEnd )
    return uCart
endfunction

function FirstStop takes unit uWagon returns nothing
    local integer nTypeId = GetUnitTypeId( uWagon )

    if ( nTypeId == 'h00K' ) then        //11
        call MineCartReachStop( uWagon, gg_rct_MineCartStart11, gg_rct_MineCartEnd1 )
    elseif ( nTypeId == 'h003' ) then    //21
        call MineCartReachStop( uWagon, gg_rct_MineCartStart21, gg_rct_MineCartPath2 )
    elseif ( nTypeId == 'h005' ) then    //12
        call MineCartReachStop( uWagon, gg_rct_MineCartStart12, gg_rct_MineCartEnd1 )
    elseif ( nTypeId == 'h006' ) then    //22
        call MineCartReachStop( uWagon, gg_rct_MineCartStart22, gg_rct_MineCartPath2 )
    endif
endfunction

function SecondStop takes unit uWagon returns nothing
    local integer nTypeId = GetUnitTypeId( uWagon )

    if ( nTypeId == 'h00K' ) then        //11
        call MineCartReachStop( uWagon, gg_rct_MineCartStart11, gg_rct_MineCartPath1 )
    elseif ( nTypeId == 'h003' ) then    //21
        call MineCartReachStop( uWagon, gg_rct_MineCartStart21, gg_rct_MineCartPath3 )
    elseif ( nTypeId == 'h005' ) then    //12
        call MineCartReachStop( uWagon, gg_rct_MineCartStart12, gg_rct_MineCartPath1 )
    elseif ( nTypeId == 'h006' ) then    //22
        call MineCartReachStop( uWagon, gg_rct_MineCartStart22, gg_rct_MineCartPath3 )
    endif
endfunction

function ThirdStop takes unit uWagon returns nothing
    local integer nTypeId = GetUnitTypeId( uWagon )

    if ( nTypeId == 'h00K' ) then        //11
        call MineCartReachStop( uWagon, gg_rct_MineCartStart11, gg_rct_MineCartPath2 )
    elseif ( nTypeId == 'h003' ) then    //21
        call MineCartReachStop( uWagon, gg_rct_MineCartStart21, gg_rct_MineCartPath4 )
    elseif ( nTypeId == 'h005' ) then    //12
        call MineCartReachStop( uWagon, gg_rct_MineCartStart12, gg_rct_MineCartPath2 )
    elseif ( nTypeId == 'h006' ) then    //22
        call MineCartReachStop( uWagon, gg_rct_MineCartStart22, gg_rct_MineCartPath4 )
    endif
endfunction

function ForthStop takes unit uWagon returns nothing
    local integer nTypeId = GetUnitTypeId( uWagon )

    if ( nTypeId == 'h00K' ) then        //11
        call MineCartReachStop( uWagon, gg_rct_MineCartStart11, gg_rct_MineCartPath3 )
    elseif ( nTypeId == 'h003' ) then    //21
        call MineCartReachStop( uWagon, gg_rct_MineCartStart21, gg_rct_MineCartEnd2 )
    elseif ( nTypeId == 'h005' ) then    //12
        call MineCartReachStop( uWagon, gg_rct_MineCartStart12, gg_rct_MineCartPath3 )
    elseif ( nTypeId == 'h006' ) then    //22
        call MineCartReachStop( uWagon, gg_rct_MineCartStart22, gg_rct_MineCartEnd2 )
    endif
endfunction

function MineCartControl takes nothing returns nothing
    if ( ModuloInteger( udg_MineCartTimerCount, 4 ) == 0 ) then
        //call CreateMineCart( gg_rct_MineCartStart11, gg_rct_MineCartPath4, 'h00K', 300, 270 )
        call CreateMineCart( gg_rct_MineCartStart21, gg_rct_MineCartPath1, 'h003', 300, 90 )
    endif

    if ( ModuloInteger( udg_MineCartTimerCount, 3 ) == 0 ) then
        call CreateMineCart( gg_rct_MineCartStart12, gg_rct_MineCartPath4, 'h005', 400, 270 )
        call CreateMineCart( gg_rct_MineCartStart22, gg_rct_MineCartPath1, 'h006', 400, 90 )
    endif

    set udg_MineCartTimerCount = udg_MineCartTimerCount + 1
    if ( udg_MineCartTimerCount == 12 ) then
        set udg_MineCartTimerCount = 0
    endif
endfunction

//===========================================================================
function InitTrig_Cross_Road_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Mine Carts Timer
//===========================================================================
function Trig_Mine_Carts_Timer_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Carts_Timer_Actions takes nothing returns nothing
    call MineCartControl()
endfunction

//===========================================================================
function InitTrig_Mine_Carts_Timer takes nothing returns nothing
    set gg_trg_Mine_Carts_Timer = CreateTrigger(  )
    call TriggerRegisterTimerExpireEventBJ( gg_trg_Mine_Carts_Timer, udg_MineCartTimer )
    call TriggerAddCondition( gg_trg_Mine_Carts_Timer, Condition( function Trig_Mine_Carts_Timer_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Carts_Timer, function Trig_Mine_Carts_Timer_Actions )
endfunction

//===========================================================================
// Trigger: Mine Carts Region 1
//===========================================================================
function Trig_Mine_Carts_Region_1_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h005' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h006' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mine_Carts_Region_1_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Mine_Carts_Region_1_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Carts_Region_1_Actions takes nothing returns nothing
    call FirstStop( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Mine_Carts_Region_1 takes nothing returns nothing
    set gg_trg_Mine_Carts_Region_1 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Mine_Carts_Region_1, gg_rct_MineCartPath1 )
    call TriggerAddCondition( gg_trg_Mine_Carts_Region_1, Condition( function Trig_Mine_Carts_Region_1_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Carts_Region_1, function Trig_Mine_Carts_Region_1_Actions )
endfunction

//===========================================================================
// Trigger: Mine Carts Region 2
//===========================================================================
function Trig_Mine_Carts_Region_2_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h005' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h006' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mine_Carts_Region_2_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Mine_Carts_Region_2_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Carts_Region_2_Actions takes nothing returns nothing
    call SecondStop( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Mine_Carts_Region_2 takes nothing returns nothing
    set gg_trg_Mine_Carts_Region_2 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Mine_Carts_Region_2, gg_rct_MineCartPath2 )
    call TriggerAddCondition( gg_trg_Mine_Carts_Region_2, Condition( function Trig_Mine_Carts_Region_2_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Carts_Region_2, function Trig_Mine_Carts_Region_2_Actions )
endfunction

//===========================================================================
// Trigger: Mine Carts Region 3
//===========================================================================
function Trig_Mine_Carts_Region_3_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h005' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h006' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mine_Carts_Region_3_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Mine_Carts_Region_3_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Carts_Region_3_Actions takes nothing returns nothing
    call ThirdStop( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Mine_Carts_Region_3 takes nothing returns nothing
    set gg_trg_Mine_Carts_Region_3 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Mine_Carts_Region_3, gg_rct_MineCartPath3 )
    call TriggerAddCondition( gg_trg_Mine_Carts_Region_3, Condition( function Trig_Mine_Carts_Region_3_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Carts_Region_3, function Trig_Mine_Carts_Region_3_Actions )
endfunction

//===========================================================================
// Trigger: Mine Carts Region 4
//===========================================================================
function Trig_Mine_Carts_Region_4_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h005' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h006' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mine_Carts_Region_4_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Mine_Carts_Region_4_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mine_Carts_Region_4_Actions takes nothing returns nothing
    call ForthStop( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Mine_Carts_Region_4 takes nothing returns nothing
    set gg_trg_Mine_Carts_Region_4 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Mine_Carts_Region_4, gg_rct_MineCartPath4 )
    call TriggerAddCondition( gg_trg_Mine_Carts_Region_4, Condition( function Trig_Mine_Carts_Region_4_Conditions ) )
    call TriggerAddAction( gg_trg_Mine_Carts_Region_4, function Trig_Mine_Carts_Region_4_Actions )
endfunction

//===========================================================================
// Trigger: Remove Mine Cart 1
//===========================================================================
function Trig_Remove_Mine_Cart_1_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h00K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h005' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Remove_Mine_Cart_1_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Remove_Mine_Cart_1_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Remove_Mine_Cart_1_Actions takes nothing returns nothing
    call RemoveUnit( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Remove_Mine_Cart_1 takes nothing returns nothing
    set gg_trg_Remove_Mine_Cart_1 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Remove_Mine_Cart_1, gg_rct_MineCartEnd1 )
    call TriggerAddCondition( gg_trg_Remove_Mine_Cart_1, Condition( function Trig_Remove_Mine_Cart_1_Conditions ) )
    call TriggerAddAction( gg_trg_Remove_Mine_Cart_1, function Trig_Remove_Mine_Cart_1_Actions )
endfunction

//===========================================================================
// Trigger: Remove Mine Cart 2
//===========================================================================
function Trig_Remove_Mine_Cart_2_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h006' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Remove_Mine_Cart_2_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    if ( not Trig_Remove_Mine_Cart_2_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Remove_Mine_Cart_2_Actions takes nothing returns nothing
    call RemoveUnit( GetTriggerUnit() )
endfunction

//===========================================================================
function InitTrig_Remove_Mine_Cart_2 takes nothing returns nothing
    set gg_trg_Remove_Mine_Cart_2 = CreateTrigger(  )
    call TriggerRegisterEnterRectSimple( gg_trg_Remove_Mine_Cart_2, gg_rct_MineCartEnd2 )
    call TriggerAddCondition( gg_trg_Remove_Mine_Cart_2, Condition( function Trig_Remove_Mine_Cart_2_Conditions ) )
    call TriggerAddAction( gg_trg_Remove_Mine_Cart_2, function Trig_Remove_Mine_Cart_2_Actions )
endfunction

//===========================================================================
// Trigger: Periodic Volcano Spew
//===========================================================================
function Trig_Periodic_Volcano_Spew_Conditions takes nothing returns boolean
    if ( not ( udg_GameOver == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Periodic_Volcano_Spew_Actions takes nothing returns nothing
    set udg_TempVolcanoPoint = GetRandomLocInRect(udg_VolcanoRegion[GetRandomInt(1, 7)])
    call IssuePointOrderLocBJ( gg_unit_o001_0131, "attackground", udg_TempVolcanoPoint )
    call RemoveLocation( udg_TempVolcanoPoint )
    call TriggerSleepAction( 0.45 )
    call ConditionalTriggerExecute( GetTriggeringTrigger() )
endfunction

//===========================================================================
function InitTrig_Periodic_Volcano_Spew takes nothing returns nothing
    set gg_trg_Periodic_Volcano_Spew = CreateTrigger(  )
    call TriggerAddCondition( gg_trg_Periodic_Volcano_Spew, Condition( function Trig_Periodic_Volcano_Spew_Conditions ) )
    call TriggerAddAction( gg_trg_Periodic_Volcano_Spew, function Trig_Periodic_Volcano_Spew_Actions )
endfunction

//===========================================================================
// Trigger: Ending Cinematic Functions
//===========================================================================
function CreateCinematicDriverSingle takes integer nPlace returns unit
    local integer nPlayerIndex = udg_Places[nPlace]
    local integer nModelIndex = udg_PlayerModels[nPlayerIndex]

    local integer nDriverType = GetModelDriverUnitType( nModelIndex )
    local rect rct = null
    local real rAngle = 0
    local unit u

    if ( nPlace == 0 ) then
        set rct = gg_rct_PlaceArea1
        set rAngle = 290
    elseif ( nPlace == 1 ) then
        set rct = gg_rct_PlaceArea2
        set rAngle = 250
    elseif ( nPlace == 2 ) then
        set rct = gg_rct_PlaceArea3
        set rAngle = 270
    else
        return null
    endif

    if ( nPlace == 0 ) then
        set udg_ChampionDriverAnim = udg_DriverAnimName[GetModelDriverAnimID( nModelIndex )]
        set udg_ChampionDriverSound = udg_DriverSound[GetModelDriverSound( nModelIndex )]
        set udg_VictoryString = GetPlayerName( Player(nPlayerIndex) ) + " has raced to victory at a stunning time of: " + Second2String( R2I(udg_TimeUsed[nPlayerIndex]), false )
    endif
    set u = CreateUnit( Player(nPlayerIndex), nDriverType, GetRectCenterX(rct), GetRectCenterY(rct), rAngle )
    call SetUnitAnimationByIndex( u, GetModelAnimVictoryID(nModelIndex) )
    return u
endfunction

function CreateCinematicDrivers takes nothing returns unit
    local integer nPlace = 0
    local integer nNum = udg_PlaceNum

    local unit uFirst = null

    if ( nNum > 3 ) then
        set nNum = 3
    endif

    loop
        exitwhen nPlace >= nNum
        if ( nPlace == 0 ) then
            set uFirst = CreateCinematicDriverSingle( nPlace )
        else
            call CreateCinematicDriverSingle( nPlace )
        endif
        set nPlace = nPlace + 1
    endloop
    
    return uFirst
endfunction

//===========================================================================
function InitTrig_Ending_Cinematic_Functions takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Ending
//===========================================================================
function Trig_Ending_Func011002 takes nothing returns nothing
    call ShowUnitHide( GetEnumUnit() )
endfunction

function Trig_Ending_Func012002 takes nothing returns nothing
    call ShowUnitShow( GetEnumUnit() )
endfunction

function Trig_Ending_Func024A takes nothing returns nothing
    call CameraSetupApplyForPlayer( true, gg_cam_EndingA, GetEnumPlayer(), 0 )
endfunction

function Trig_Ending_Func032A takes nothing returns nothing
    call CameraSetupApplyForPlayer( true, gg_cam_EndingB, GetEnumPlayer(), 4.00 )
endfunction

function Trig_Ending_Func047A takes nothing returns nothing
    call CameraSetupApplyForPlayer( true, gg_cam_EndingC, GetEnumPlayer(), 4.00 )
endfunction

function Trig_Ending_Func061A takes nothing returns nothing
    call CustomVictoryBJ( GetEnumPlayer(), true, true )
endfunction

function Trig_Ending_Actions takes nothing returns nothing
    set udg_ChampionDriver = CreateCinematicDrivers()
    // ----------------------------------- Transition -----------------------------------
    call StopMusicBJ( true )
    call PlayThematicMusicBJ( "Sound\\Music\\mp3Music\\Credits.mp3" )
    call AddWeatherEffectSaveLast( gg_rct_Celebration_Flares, 'LRaa' )
    call EnableWeatherEffect( GetLastCreatedWeatherEffect(), true )
    call ClearTextMessagesBJ( GetPlayersAll() )
    call CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 )
    call SetUserControlForceOff( GetPlayersByMapControl(MAP_CONTROL_USER) )
    call ShowInterfaceForceOff( GetPlayersAll(), 2 )
    call ForGroupBJ( GetUnitsInRectAll(GetPlayableMapRect()), function Trig_Ending_Func011002 )
    call ForGroupBJ( udg_CinematicUnitGrp, function Trig_Ending_Func012002 )
    call TriggerSleepAction( 2.10 )
    call TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(PLAYER_NEUTRAL_PASSIVE), 'Nbrn', "TRIGSTR_810", GetRectCenter(GetPlayableMapRect()), null, "TRIGSTR_811", bj_TIMETYPE_ADD, 3.00, false )
    call CreateTextTagLocBJ( "TRIGSTR_815", GetUnitLoc(gg_unit_nhef_0292), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_nhef_0292, 100, 100, 100, 0 )
    call SetUnitAnimation( gg_unit_odoc_0187, "stand victory" )
    call SetUnitAnimation( gg_unit_earc_0190, "stand victory" )
    call SetUnitAnimation( gg_unit_earc_0189, "stand victory" )
    call SetUnitAnimation( gg_unit_earc_0216, "stand victory" )
    call SetUnitAnimation( gg_unit_Hvwd_0141, "stand victory" )
    call SetUnitAnimation( gg_unit_hcth_0191, "stand victory" )
    call SetUnitAnimation( gg_unit_Hart_0188, "stand victory" )
    call ForForce( GetPlayersAll(), function Trig_Ending_Func024A )
    call CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0.00 )
    call TriggerSleepAction( 2.10 )
    call TriggerSleepAction( 2.50 )
    call IssueTargetOrderBJ( gg_unit_hsor_0186, "hex", gg_unit_Hart_0188 )
    call CreateTextTagLocBJ( "TRIGSTR_814", GetUnitLoc(gg_unit_hsor_0186), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_hsor_0186, 100, 100, 100, 0 )
    // ----------------------------------- Pan -----------------------------------
    call ForForce( GetPlayersAll(), function Trig_Ending_Func032A )
    call TriggerSleepAction( 1.00 )
    call CreateTextTagLocBJ( "TRIGSTR_816", GetUnitLoc(gg_unit_opeo_0210), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_opeo_0210, 100, 100, 100, 0 )
    call TriggerSleepAction( 3.10 )
    call CreateTextTagLocBJ( "TRIGSTR_817", GetUnitLoc(gg_unit_Hvwd_0141), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_Hvwd_0141, 100, 100, 100, 0 )
    call TriggerSleepAction( 1.00 )
    call CreateTextTagLocBJ( "TRIGSTR_818", GetUnitLoc(gg_unit_hcth_0191), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_hcth_0191, 100, 100, 100, 0 )
    call TriggerSleepAction( 0.75 )
    call CreateTextTagLocBJ( "TRIGSTR_821", GetUnitLoc(gg_unit_earc_0216), 100.00, 8.00, 100, 100, 100, 0 )
    call UnitAddIndicatorBJ( gg_unit_earc_0216, 100, 100, 100, 0 )
    call TriggerSleepAction( 0.75 )
    // ----------------------------------- Final Zoom In -----------------------------------
    call ForForce( GetPlayersAll(), function Trig_Ending_Func047A )
    call TriggerSleepAction( 4.10 )
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------- Fix Me Meng! -----------------------------------
    // ----------------------------------------------------------------------------------------------
    call SetUnitAnimation( udg_ChampionDriver, udg_ChampionDriverAnim )
    call QueueUnitAnimationBJ( udg_ChampionDriver, "stand" )
    call PlaySoundBJ( udg_ChampionDriverSound )
    call DisplayTextToForce( GetPlayersAll(), udg_VictoryString )
    call CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 1.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.tga", 45.00, 45.00, 45.00, 15.00 )
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------- Fix Me Meng! -----------------------------------
    // ----------------------------------------------------------------------------------------------
    call TriggerSleepAction( 6.00 )
    call ForForce( GetPlayersAll(), function Trig_Ending_Func061A )
endfunction

//===========================================================================
function InitTrig_Ending takes nothing returns nothing
    set gg_trg_Ending = CreateTrigger(  )
    call TriggerAddAction( gg_trg_Ending, function Trig_Ending_Actions )
endfunction

//===========================================================================
// Trigger: Ending Flares
//===========================================================================
function Trig_Ending_Flares_Conditions takes nothing returns boolean
    if ( not ( udg_StopFlares == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Ending_Flares_Actions takes nothing returns nothing
    set udg_TempFlarePoint = GetRandomLocInRect(gg_rct_Celebration_Flares)
    call IssuePointOrderLocBJ( gg_unit_hmtm_0196, "flare", udg_TempFlarePoint )
    call PlaySoundAtPointBJ( udg_FlareSound[GetRandomInt(1, 3)], 100, udg_TempFlarePoint, 0 )
    call RemoveLocation( udg_TempFlarePoint )
    call TriggerSleepAction( 2.00 )
    call UnitRemoveAbilityBJ( 'Afla', gg_unit_hmtm_0196 )
    call UnitRemoveAbilityBJ( 'Afla', gg_unit_hmtm_0197 )
    call UnitAddAbilityBJ( 'Afla', gg_unit_hmtm_0196 )
    call UnitAddAbilityBJ( 'Afla', gg_unit_hmtm_0197 )
    call ConditionalTriggerExecute( GetTriggeringTrigger() )
endfunction

//===========================================================================
function InitTrig_Ending_Flares takes nothing returns nothing
    set gg_trg_Ending_Flares = CreateTrigger(  )
    call TriggerAddCondition( gg_trg_Ending_Flares, Condition( function Trig_Ending_Flares_Conditions ) )
    call TriggerAddAction( gg_trg_Ending_Flares, function Trig_Ending_Flares_Actions )
endfunction

//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    call InitTrig_Sound_Functions(  )
    call InitTrig_Initialization_Functions(  )
    call InitTrig_Init_PowerUps(  )
    call InitTrig_Init_Place_Check_Points(  )
    call InitTrig_Initialization(  )
    call InitTrig_Pick_Cart_Functions(  )
    call InitTrig_Start_Picking_Cart(  )
    call InitTrig_Picking_Cart_Player_Timer(  )
    call InitTrig_Select_Other_Unit_Than_Picking_Cart(  )
    call InitTrig_Deselect_Picking_Cart(  )
    call InitTrig_View_Previous_Cart(  )
    call InitTrig_View_Next_Cart(  )
    call InitTrig_Pick_Cart(  )
    call InitTrig_Game_Start_Functions(  )
    call InitTrig_Prepare_for_Game(  )
    call InitTrig_Number_of_Laps_Selected(  )
    call InitTrig_Picking_Cart_Timer(  )
    call InitTrig_Game_Start_Timer(  )
    call InitTrig_Big_Gun_Timer(  )
    call InitTrig_Place_Functions(  )
    call InitTrig_Pass_End_Point(  )
    call InitTrig_Abilities_Functions(  )
    call InitTrig_Cart_Cast_Spell(  )
    call InitTrig_Mine_Exploded(  )
    call InitTrig_Trap_Expired(  )
    call InitTrig_Throw_Turtle_Timer(  )
    call InitTrig_PowerUp_Respawn(  )
    call InitTrig_Sheep_Respawn_1(  )
    call InitTrig_Sheep_Respawn_2(  )
    call InitTrig_Snowman_Respawn(  )
    call InitTrig_Ice_Trunk_Respawn(  )
    call InitTrig_Ice_Trunk_Flee(  )
    call InitTrig_Driving_Functions(  )
    call InitTrig_Move_Cart(  )
    call InitTrig_Turning_Left(  )
    call InitTrig_Turning_Left_Released(  )
    call InitTrig_Turning_Right(  )
    call InitTrig_Turning_Right_Released(  )
    call InitTrig_Acceleration(  )
    call InitTrig_Acceleration_Released(  )
    call InitTrig_Deceleration(  )
    call InitTrig_Deceleration_Stop(  )
    call InitTrig_Sheep_Flee(  )
    call InitTrig_Ship_Attack(  )
    call InitTrig_Ship_Start_Attack(  )
    call InitTrig_Killed(  )
    call InitTrig_Multi_Board_Functions(  )
    call InitTrig_Create_Board(  )
    call InitTrig_Refresh_MultiBoard(  )
    call InitTrig_Select_Cart_Functions(  )
    call InitTrig_Select_something_else(  )
    call InitTrig_Repairing_Functions(  )
    call InitTrig_Enter_Repair_Area(  )
    call InitTrig_Leave_Repair_Area(  )
    call InitTrig_Enter_Repair_Spot_1(  )
    call InitTrig_Enter_Repair_Spot_2(  )
    call InitTrig_Enter_Repair_Spot_3(  )
    call InitTrig_Enter_Repair_Spot_4(  )
    call InitTrig_Player_Left(  )
    call InitTrig_Cross_Road_Functions(  )
    call InitTrig_Mine_Carts_Timer(  )
    call InitTrig_Mine_Carts_Region_1(  )
    call InitTrig_Mine_Carts_Region_2(  )
    call InitTrig_Mine_Carts_Region_3(  )
    call InitTrig_Mine_Carts_Region_4(  )
    call InitTrig_Remove_Mine_Cart_1(  )
    call InitTrig_Remove_Mine_Cart_2(  )
    call InitTrig_Periodic_Volcano_Spew(  )
    call InitTrig_Ending_Cinematic_Functions(  )
    call InitTrig_Ending(  )
    call InitTrig_Ending_Flares(  )
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute( gg_trg_Initialization )
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation( Player(0), 0 )
    call ForcePlayerStartLocation( Player(0), 0 )
    call SetPlayerColor( Player(0), ConvertPlayerColor(0) )
    call SetPlayerRacePreference( Player(0), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(0), false )
    call SetPlayerController( Player(0), MAP_CONTROL_USER )

    // Player 1
    call SetPlayerStartLocation( Player(1), 1 )
    call ForcePlayerStartLocation( Player(1), 1 )
    call SetPlayerColor( Player(1), ConvertPlayerColor(1) )
    call SetPlayerRacePreference( Player(1), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(1), false )
    call SetPlayerController( Player(1), MAP_CONTROL_USER )

    // Player 2
    call SetPlayerStartLocation( Player(2), 2 )
    call ForcePlayerStartLocation( Player(2), 2 )
    call SetPlayerColor( Player(2), ConvertPlayerColor(2) )
    call SetPlayerRacePreference( Player(2), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(2), false )
    call SetPlayerController( Player(2), MAP_CONTROL_USER )

    // Player 3
    call SetPlayerStartLocation( Player(3), 3 )
    call ForcePlayerStartLocation( Player(3), 3 )
    call SetPlayerColor( Player(3), ConvertPlayerColor(3) )
    call SetPlayerRacePreference( Player(3), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(3), false )
    call SetPlayerController( Player(3), MAP_CONTROL_USER )

    // Player 4
    call SetPlayerStartLocation( Player(4), 4 )
    call ForcePlayerStartLocation( Player(4), 4 )
    call SetPlayerColor( Player(4), ConvertPlayerColor(4) )
    call SetPlayerRacePreference( Player(4), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(4), false )
    call SetPlayerController( Player(4), MAP_CONTROL_USER )

    // Player 5
    call SetPlayerStartLocation( Player(5), 5 )
    call ForcePlayerStartLocation( Player(5), 5 )
    call SetPlayerColor( Player(5), ConvertPlayerColor(5) )
    call SetPlayerRacePreference( Player(5), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(5), false )
    call SetPlayerController( Player(5), MAP_CONTROL_USER )

    // Player 6
    call SetPlayerStartLocation( Player(6), 6 )
    call ForcePlayerStartLocation( Player(6), 6 )
    call SetPlayerColor( Player(6), ConvertPlayerColor(6) )
    call SetPlayerRacePreference( Player(6), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(6), false )
    call SetPlayerController( Player(6), MAP_CONTROL_USER )

    // Player 7
    call SetPlayerStartLocation( Player(7), 7 )
    call ForcePlayerStartLocation( Player(7), 7 )
    call SetPlayerColor( Player(7), ConvertPlayerColor(7) )
    call SetPlayerRacePreference( Player(7), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(7), false )
    call SetPlayerController( Player(7), MAP_CONTROL_USER )

    // Player 8
    call SetPlayerStartLocation( Player(8), 8 )
    call SetPlayerColor( Player(8), ConvertPlayerColor(8) )
    call SetPlayerRacePreference( Player(8), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(8), false )
    call SetPlayerController( Player(8), MAP_CONTROL_COMPUTER )

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_886
    call SetPlayerTeam( Player(0), 0 )
    call SetPlayerTeam( Player(1), 0 )
    call SetPlayerTeam( Player(2), 0 )
    call SetPlayerTeam( Player(3), 0 )
    call SetPlayerTeam( Player(4), 0 )
    call SetPlayerTeam( Player(5), 0 )
    call SetPlayerTeam( Player(6), 0 )
    call SetPlayerTeam( Player(7), 0 )

    // Force: TRIGSTR_883
    call SetPlayerTeam( Player(8), 1 )

endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds( -17408.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -9728.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 13312.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 13312.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -17408.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 13312.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 13312.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -9728.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM) )
    call SetDayNightModels( "Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl" )
    call NewSoundEnvironment( "Default" )
    call SetAmbientDaySound( "LordaeronWinterDay" )
    call SetAmbientNightSound( "LordaeronWinterNight" )
    call SetMapMusic( "Music", true, 0 )
    call InitSounds(  )
    call CreateRegions(  )
    call CreateCameras(  )
    call CreateAllDestructables(  )
    call CreateAllUnits(  )
    call InitBlizzard(  )
    call InitGlobals(  )
    call InitCustomTriggers(  )
    call RunInitializationTriggers(  )

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName( "TRIGSTR_003" )
    call SetMapDescription( "TRIGSTR_005" )
    call SetPlayers( 9 )
    call SetTeams( 9 )
    call SetGamePlacement( MAP_PLACEMENT_TEAMS_TOGETHER )

    call DefineStartLocation( 0, 1024.0, -8832.0 )
    call DefineStartLocation( 1, 1600.0, -8832.0 )
    call DefineStartLocation( 2, 2112.0, -8832.0 )
    call DefineStartLocation( 3, 2624.0, -8832.0 )
    call DefineStartLocation( 4, 1024.0, -9408.0 )
    call DefineStartLocation( 5, 1536.0, -9408.0 )
    call DefineStartLocation( 6, 2048.0, -9408.0 )
    call DefineStartLocation( 7, 2560.0, -9408.0 )
    call DefineStartLocation( 8, -16832.0, 12544.0 )

    // Player setup
    call InitCustomPlayerSlots(  )
    call InitCustomTeams(  )
endfunction

